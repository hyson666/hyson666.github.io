<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HysonQAQ</title>
  <subtitle>很卑微，不努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-08T14:34:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hyson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斯坦福机器学习（四）神经网络</title>
    <link href="http://yoursite.com/2017/08/08/standford4/"/>
    <id>http://yoursite.com/2017/08/08/standford4/</id>
    <published>2017-08-08T14:26:55.000Z</published>
    <updated>2017-08-08T14:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$a^{(j)}_{i}$ —— 第j层第i个单元的激励值<br>$\Theta^{(j)}$ —— 第j层的权重矩阵，对应从第j层到j+1层的变换</p>
<h2 id="为什么要使用神经网络解决非线性回归问题？"><a href="#为什么要使用神经网络解决非线性回归问题？" class="headerlink" title="为什么要使用神经网络解决非线性回归问题？"></a>为什么要使用神经网络解决非线性回归问题？</h2><p>当特征数n很大的时候，我们继续使用一般的逻辑回归就会遇上复杂度上面的障碍，比如我们选择最高次数项次数为2，那么就会有<script type="math/tex">\frac{n^2}{2}</script>项，其复杂度为<script type="math/tex">O(n^2)</script>，而如果你打算使用最高次数项为三次方去拟合的话，这将会达到<script type="math/tex">O(n^3)</script>的复杂度。有一种想法是，仅仅保留高次数项，比方说二次项，这看起来行得通，但在某些需要使用直线的点拟合的却不是特别的好，比如希望拟合如下的图形：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmaoep32j20bf07ya9u.jpg" alt=""><br>得到的可能会变成下面这样的图形：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmamm204j20bg0840si.jpg" alt=""><br>这时欠拟合的。显然我们需要使用一种新算法，当在n特别大的时候依然能够有效率地运行，这就是我们使用神经网络解决问题的原因。</p>
<h2 id="大脑中的简单神经元结构"><a href="#大脑中的简单神经元结构" class="headerlink" title="大脑中的简单神经元结构"></a>大脑中的简单神经元结构</h2><p>大脑神经具有惊人的学习能力，而且这种学习能力具有普适性。所谓普适性，即处理大脑某一特定功能的区域连接到一个不同的地方，如把嗅觉神经区与眼部相连，可以令嗅觉神经区学会观看事物。所以神经网络模型就是一种通过一种算法解决多种学习问题的模型。一个典型的神经元结构如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmivjmgij20he0amjvw.jpg" alt=""><br>神经元类似一个计算单元，从输入神经，即Dendrite（树突）中接受一定的信息之后，经过一定的计算后通过输出神经Axon（轴突）可以把这些信息传输到其他的节点或者大脑中的其他神经元，神经网络就是通过模拟大脑神经元的这种信息输入输出的特性工作的。</p>
<h2 id="神经网络模型概述"><a href="#神经网络模型概述" class="headerlink" title="神经网络模型概述"></a>神经网络模型概述</h2><p>简单的说，神经元就是一个简单的计算单元，它从输入神经中获取电信号输入后经过计算后到输出神经中输出，所以我们就可以模型拆分为三个层次，分别是输入层、隐藏层与输出层，其中隐藏层之中又可能包含数个不同的层次，模型看起来类似下面这样：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficn61owgfj20iz09ctbv.jpg" alt=""></p>
<h3 id="输入层-Layer-1"><a href="#输入层-Layer-1" class="headerlink" title="输入层(Layer 1)"></a>输入层(Layer 1)</h3><p>输入层对应大脑神经元中的树突结构，它以特征向量的形式即<script type="math/tex">x_1,x_2,...,x_n</script>接受数据的输入，然后以<script type="math/tex">h_{\theta}</script>最为结果在输出层输出。在这个模型当中，当然也包括<script type="math/tex">x_0</script>,我们称其为偏置单元，其值永远等于一，在计算的时候务必记得在每一层中都手动加入它。<br>在神经网络的每一层当中，我们都是用同样的逻辑函数和我们之前的分类问题一样。我们可以把他们封装起来，称为sigmoid(logistic) activation function,即逻辑激励函数，在很多不同的文献当中，我们也会把参数<script type="math/tex">\theta</script>称为weights，即权重。此时的模型可以如下表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline \end{bmatrix}\rightarrow\begin{bmatrix}\ \ \ \newline \end{bmatrix}\rightarrow h_\theta(x)</script><h3 id="隐藏层-Layer-2"><a href="#隐藏层-Layer-2" class="headerlink" title="隐藏层(Layer 2)"></a>隐藏层(Layer 2)</h3><p>一般的神经网络模型中，隐藏层至少拥有一层，而且当预测函数比较复杂的时候可能超过一层而拥有数层。它负责神经元中的计算工作，当只有一层的时候我们可以把公式表示为如下：</p>
<script type="math/tex; mode=display">
\begin{align*} a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3) \newline a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3) \newline a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3) \newline h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)}) \newline \end{align*}</script><p>也就是说我们可以通过一个<script type="math/tex">3\times4</script>的参数矩阵矩阵来就算我们的激励值。<br>推广至多层神经网络，我们用上一层的参数矩阵<script type="math/tex">\Theta^{(i-1)}</script>中每一行的值来计算上一层中获得的的输入值来计算该层的激励值<script type="math/tex">a_i^{(2)}</script>每一层中我们都进行逻辑回归的计算，也即：</p>
<script type="math/tex; mode=display">
\begin{align*}a_1^{(2)} = g(z_1^{(2)}) \newline a_2^{(2)} = g(z_2^{(2)}) \newline a_3^{(2)} = g(z_3^{(2)}) \newline \end{align*}</script><p>其中z的值可以用以下公式进行计算：</p>
<script type="math/tex; mode=display">
z_k^{(2)} = \Theta_{k,0}^{(1)}x_0 + \Theta_{k,1}^{(1)}x_1 + \cdots + \Theta_{k,n}^{(1)}x_n</script><p>此时的模型可以如下表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline x_3\end{bmatrix}\rightarrow\begin{bmatrix}a_1^{(2)} \newline a_2^{(2)} \newline a_3^{(2)} \newline \end{bmatrix}\rightarrow h_\theta(x)</script><p>当神经网络有 <script type="math/tex">s_j</script> 个单元于层 $j$ 和 <script type="math/tex">s_{j+1}</script> 个单元于层 <script type="math/tex">j+1</script>, 那么 <script type="math/tex">\Theta^{(j)}</script> 的维度为 <script type="math/tex">s_{j+1} \times (s_j + 1)</script>。</p>
<h3 id="输出层-Layer-3"><a href="#输出层-Layer-3" class="headerlink" title="输出层(Layer 3)"></a>输出层(Layer 3)</h3><p>输出层的计算同隐藏层一致，通过一定的处理之后把所得到的预测值转化为预测矩阵输出。</p>
<h2 id="利用神经网络计算逻辑与"><a href="#利用神经网络计算逻辑与" class="headerlink" title="利用神经网络计算逻辑与"></a>利用神经网络计算逻辑与</h2><p>首先复习一下逻辑函数的图形如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fico2lp6ngj20ci06odgl.jpg" alt=""><br>当x=4.6的时候，可以说函数值约等于1，由对称性，当x=-4.6的时候，可以说函数值约等于0，基于这个特点，我们给权重赋予一定的值就可以进行各种逻辑计算。</p>
<h3 id="利用神经网络计算逻辑与-1"><a href="#利用神经网络计算逻辑与-1" class="headerlink" title="利用神经网络计算逻辑与"></a>利用神经网络计算逻辑与</h3><p>首先给第一个参数矩阵赋值如下：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-30 & 20 & 20\end{bmatrix}</script><p>因为此时<script type="math/tex">x_1、x_2</script>都是二进制数，结合逻辑函数图像，我们可以得到如下的结果：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\Theta(x) = g(-30 + 20x_1 + 20x_2) \newline \newline & x_1 = 0 \ \ and \ \ x_2 = 0 \ \ then \ \ g(-30) \approx 0 \newline & x_1 = 0 \ \ and \ \ x_2 = 1 \ \ then \ \ g(-10) \approx 0 \newline & x_1 = 1 \ \ and \ \ x_2 = 0 \ \ then \ \ g(-10) \approx 0 \newline & x_1 = 1 \ \ and \ \ x_2 = 1 \ \ then \ \ g(10) \approx 1\end{align*}</script><p>一个好的办法是列出真值表如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fico7gpzqqj20gb07raaw.jpg" alt=""><br>这样我们就完成了逻辑与的表示，同样的，把参数赋值为以下值就可以表示逻辑或了：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-10 & 20 & 20\end{bmatrix}</script><h3 id="利用神经网络计算或非"><a href="#利用神经网络计算或非" class="headerlink" title="利用神经网络计算或非"></a>利用神经网络计算或非</h3><p>可以容易把或非拆分为与、与非后再或的形式，由此把与和与非作为隐藏层，再进行一次或到输出层我们就可以表示或非了，每种形式我们赋权值如下：</p>
<script type="math/tex; mode=display">
\begin{align*}AND:\newline\Theta^{(1)} &=\begin{bmatrix}-30 & 20 & 20\end{bmatrix} \newline NOR:\newline\Theta^{(1)} &= \begin{bmatrix}10 & -20 & -20\end{bmatrix} \newline OR:\newline\Theta^{(1)} &= \begin{bmatrix}-10 & 20 & 20\end{bmatrix} \newline\end{align*}</script><p>则第一层参数矩阵如下：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-30 & 20 & 20 \newline 10 & -20 & -20\end{bmatrix}</script><p>第二层参数矩阵如下：</p>
<script type="math/tex; mode=display">
\Theta^{(2)} =\begin{bmatrix}-10 & 20 & 20\end{bmatrix}</script><p>结合起来写就成为如下的形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& a^{(2)} = g(\Theta^{(1)} \cdot x) \newline& a^{(3)} = g(\Theta^{(2)} \cdot a^{(2)}) \newline& h_\Theta(x) = a^{(3)}\end{align*}</script><p>整合起来用表示为如下图：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficodbubwmj20hb09h40o.jpg" alt=""></p>
<h2 id="一对多分类（One-vs-all）的神经网络"><a href="#一对多分类（One-vs-all）的神经网络" class="headerlink" title="一对多分类（One-vs-all）的神经网络"></a>一对多分类（One-vs-all）的神经网络</h2><p>为了把数据分为多个种类，我们的预测函数可以返回一个向量值。现在我们说我们要把一组数据分为四个种类，我们会使用如下这个例子，把图片分为四类：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficog2w1kjj20h309en0f.jpg" alt=""><br>输出y应该具有如下四个类型：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficogyh306j205v02cq2y.jpg" alt=""><br>其中第j个元素值为1则说明预测分类为第j类，而且其他位置应该全部为0。<br>而我们的一对多分类模型可以表示为如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficoj0z725j208u02w3yn.jpg" alt=""><br>预测函数为如下向量的时候：</p>
<script type="math/tex; mode=display">
h_\Theta(x) =\begin{bmatrix}0 \newline 0 \newline 1 \newline 0 \newline\end{bmatrix}</script><p>我们就可以判断我们模型推断这张图片是摩托车。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$a^{(j)}_{i}$ —— 第j层第i个单元的激励值&lt;br&gt;$\Theta^{(j)}$ —— 第j层的权重矩阵，对应
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（三）逻辑回归与正则化</title>
    <link href="http://yoursite.com/2017/08/05/standford3/"/>
    <id>http://yoursite.com/2017/08/05/standford3/</id>
    <published>2017-08-05T11:26:51.000Z</published>
    <updated>2017-08-08T14:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提出背景"><a href="#提出背景" class="headerlink" title="提出背景"></a>提出背景</h2><p>现实生活经常会碰到的一种问题就是分类问题，通过机器学习我们可以让机器进行判断某一个事物的好坏或者对事物进行分类。例如判断肿瘤是否为恶性肿瘤，判断葡萄酒属于哪一等级的葡萄酒等。我们很容易想到可以利用线性回归来解决这类问题，通过判断预测值是否大于某一个值来进行对数据的分类，这看起来似乎可行，但实际上是有严重缺陷的,例如下图这种情况：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8vbfl9mvj20og077gmn.jpg" alt=""><br>其试图以预测值是否大于0.5来判断肿瘤是否为恶性肿瘤，但是当加入最右边的样例的时候，预测曲线显然出现了很大的偏置，导致模型不能够很好地拟合数据。<br>所以我们必须找到一种更好的办法来解决这种分类问题，逻辑回归便因此产生。</p>
<h2 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h2><p>逻辑回归模型可以用公式表示如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta (x) = g ( \theta^T x ) \newline \newline& z = \theta^T x \newline& g(z) = \dfrac{1}{1 + e^{-z}}\end{align*}</script><p>可以称之为S型函数（sigmoid function）或者逻辑函数其函数图形如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8vgh2up1j20l703rt8v.jpg" alt=""><br>取值范围为（0,1），通过这种转化，把原来的线性函数转化成为了更佳适用于分类问题的函数取值类型。<br>预测函数<script type="math/tex">h_{\theta}</script>会给出该模型认为其属于某一类型的可能性大小，比如<script type="math/tex">h_{\theta}=0.7</script>代表有70%的可能我们的输出是1，如果这个1是肿瘤是否恶性，那么我们可以说我们有70%的把握说这个肿瘤是恶性肿瘤，同时其为良性肿瘤的概率便是30%，显然满足如下关系：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta(x) = P(y=1 | x ; \theta) = 1 - P(y=0 | x ; \theta) \newline& P(y = 0 | x;\theta) + P(y = 1 | x ; \theta) = 1\end{align*}</script><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>为了把预测函数的值转化为离散的0/1取值，我们可以把预测函数转化为如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& g(z) \geq 0.5 \newline& when \; z \geq 0\end{align*}</script><p>我们根据前面逻辑函数的形式可以知道，当其输入Z≥0的时候，函数g的输出值将会大于或等于0.5，即如下表现形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& g(z) \geq 0.5 \newline& when \; z \geq 0\end{align*}</script><p>而且有如下的性质：</p>
<script type="math/tex; mode=display">
\begin{align*}z=0, e^{0}=1 \Rightarrow g(z)=1/2\newline z \to \infty, e^{-\infty} \to 0 \Rightarrow g(z)=1 \newline z \to -\infty, e^{\infty}\to \infty \Rightarrow g(z)=0 \end{align*}</script><p>如果此时我们把输入Z换成$\theta^TX$输入的话，就意味着：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta(x) = g(\theta^T x) \geq 0.5 \newline& when \; \theta^T x \geq 0\end{align*}</script><p>根据上面的表述，也即可以说：</p>
<script type="math/tex; mode=display">
\begin{align*}& \theta^T x \geq 0 \Rightarrow y = 1 \newline& \theta^T x < 0 \Rightarrow y = 0 \newline\end{align*}</script><p>其图形就是决策边界。决策边界是一条把y=0与y=1区域分开线，它是由预测函数本身参数决定的，是一种属性。<br>当决策边界是直线时表现为如下形式：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8w1lxc0tj20m907f0u0.jpg" alt=""><br>当然它也可能是其他各种非线性的形状如下所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8w30m5j9j20nf07i0u7.jpg" alt=""><br>根据Z的值是否大于零就可以确定区域内与区域外的分类情况。</p>
<h2 id="逻辑回归的代价函数"><a href="#逻辑回归的代价函数" class="headerlink" title="逻辑回归的代价函数"></a>逻辑回归的代价函数</h2><p>线性回归的代价函数看起来似乎也很符合逻辑回归的应用，但是经过实际观察得知其实并不如此。画出图形发现使其用于逻辑回归会成为如下的形状：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zmaz1b1j20a207274d.jpg" alt=""><br>显然函数是非凸的（convex），这样很可能不会得到全局最优解，因此需要找到一种新的代价函数形式专门用于逻辑回归，现在我们把新的形式定义如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& J(\theta) = \dfrac{1}{m} \sum_{i=1}^m \mathrm{Cost}(h_\theta(x^{(i)}),y^{(i)}) \newline & \mathrm{Cost}(h_\theta(x),y) = -\log(h_\theta(x)) \; & \text{if y = 1} \newline & \mathrm{Cost}(h_\theta(x),y) = -\log(1-h_\theta(x)) \; & \text{if y = 0}\end{align*}</script><p>当y=1的时候，代价函数的图像如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zppi64sj208g06tjru.jpg" alt=""><br>其单调递减，且当预测值趋于0时，代价函数的值趋于正无穷，当预测值为1时，代价函数的值为0。<br>当y=0的时候，代价函数的图像如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zrft0jnj208j07sdg7.jpg" alt=""><br>其单调递增，且当预测值趋于1时，代价函数的值趋于正无穷，当预测值为0时，代价函数的值为0。<br>这很容易理解，当y=1的时候，预测为1当然是百分百准确的，代价必然为0，反之预测为0是一点都不准确的，同理对y=0的时候也是如此。<br>这两个函数都是凸函数，显然可以很好地应用于逻辑回归作为代价函数。</p>
<h2 id="简化代价函数并进行梯度下降"><a href="#简化代价函数并进行梯度下降" class="headerlink" title="简化代价函数并进行梯度下降"></a>简化代价函数并进行梯度下降</h2><p>显然对于两条方程并不能适用于梯度下降，我们必须对其简化，使之化为一条式子才能够进行梯度下降，因此可以写出新的费用形式如下：</p>
<script type="math/tex; mode=display">
\mathrm{Cost}(h_\theta(x),y) = - y \; \log(h_\theta(x)) - (1 - y) \log(1 - h_\theta(x))</script><p>显然其余前面的方程是等价的，由此转化成为了一条式子，并可以据此写出新的代价函数如下：</p>
<script type="math/tex; mode=display">
J(\theta) = - \frac{1}{m} \displaystyle \sum_{i=1}^m [y^{(i)}\log (h_\theta (x^{(i)})) + (1 - y^{(i)})\log (1 - h_\theta(x^{(i)}))]</script><p>可以向量化表示为：</p>
<script type="math/tex; mode=display">
\begin{align*} & h = g(X\theta)\newline & J(\theta) = \frac{1}{m} \cdot \left(-y^{T}\log(h)-(1-y)^{T}\log(1-h)\right) \end{align*}</script><p>由此就可以得到新的梯度下降的形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta) \newline & \rbrace\end{align*}</script><p>对其解出微分后的形式如下：</p>
<script type="math/tex; mode=display">
\begin{align*} & Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \newline & \rbrace \end{align*}</script><p>其形式和之前缩写的代价函数是一致的，并且可以向量化地表述为如下形式：</p>
<script type="math/tex; mode=display">
\theta := \theta - \frac{\alpha}{m} X^{T} (g(X \theta ) - \vec{y})</script><h2 id="高级最优化算法"><a href="#高级最优化算法" class="headerlink" title="高级最优化算法"></a>高级最优化算法</h2><p>比梯度下降法更加高级的算法有共轭梯度法、BFGS、L-BGFS等，这些算法都具有自动选取学习速率$\alpha$等能力，甚至能够在循环进行的过程中自动改变学习速率的值，并通常比梯度下降法快得多。但是多数情况下我们并不需要知道他们具体是怎么实现的，只要掌握运用即可。在Octave已经封装好了用以上几种方法求解最优参数值得函数”fminunc()”,我们只需要提供好参数直接进行调用求解即可。<br>代价函数依照以下形式编写：<br><figure class="highlight m"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function [jVal, gradient] <span class="built_in">=</span> costFunction(theta)</div><div class="line">  jVal <span class="built_in">=</span> [...code to compute J(theta)...];</div><div class="line">  gradient <span class="built_in">=</span> [...code to compute derivative of J(theta)...];</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>则调用如下：<br><figure class="highlight m"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% GradObj表示是否可以利用梯度下降，MaxIter表示在聚集前最大可以循环的次数</span></div><div class="line"><span class="comment">% 提供给fminunc的参数有代价函数、用以求得最优解值的参数矩阵以及其他可选项。</span></div><div class="line">options <span class="built_in">=</span> optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">100</span>);</div><div class="line">initialTheta <span class="built_in">=</span> zeros(<span class="number">2</span>,<span class="number">1</span>);</div><div class="line">   [optTheta, functionVal, exitFlag] <span class="built_in">=</span> fminunc(@costFunction, initialTheta, options);</div></pre></td></tr></table></figure></p>
<p>运行之后，将会返回最优参数值、函数值以及一个表明是否已经聚集的标志。</p>
<h2 id="多重分类"><a href="#多重分类" class="headerlink" title="多重分类"></a>多重分类</h2><p>多重分类只要把每一组向数据独立出来与其余数据进行逻辑回归求解，得到对每一个类型的预测函数，输出可能性最大那个类型即可，可以列出公式如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& y \in \lbrace0, 1 ... n\rbrace \newline& h_\theta^{(0)}(x) = P(y = 0 | x ; \theta) \newline& h_\theta^{(1)}(x) = P(y = 1 | x ; \theta) \newline& \cdots \newline& h_\theta^{(n)}(x) = P(y = n | x ; \theta) \newline& \mathrm{prediction} = \max_i( h_\theta ^{(i)}(x) )\newline\end{align*}</script><p>当n=2的时候，要进行一次逻辑回归，而当n≥3的时候，要进行n次逻辑回归，其示意图如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91m3vjjmj20d307ggmk.jpg" alt=""></p>
<h2 id="过拟合现象以及其解决方式"><a href="#过拟合现象以及其解决方式" class="headerlink" title="过拟合现象以及其解决方式"></a>过拟合现象以及其解决方式</h2><p>当进行线性回归的时候，待拟合函数的最高次数如果比较低的话，往往拟合效果会非常差。如果待拟合函数的最高次数足越高，一般与现行数据的拟合程度就会越好，但是这并不总是意见好事，有时就会出现一种叫过拟合的现象。一下三幅函数图分别代表了欠拟合、拟合较好、过拟合三种情况：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91qsi0j0j20es03v74c.jpg" alt=""><br>当出现过拟合现象的时候，预测函数能够非常好地拟合用于拟合的数据，但是却不能很好地把这些数据泛化到其他未输入的数据当中，造成高方差的情况，而且函数图像会变得没有规律。其出现的主要原因是因为函数的维度太大、以及训练集的数量太少。<br>为此，要解决过拟合的现象，我们可以人为或者使用特定的某种算法（PAC、因子分析等）去选择保留哪些特征，删掉掉哪些贡献不大的特征，当然这些特征对原函数肯定是有贡献的，删除掉必然导致某些信息的缺失，所以更好的办法是使用正则化处理，这样可以保留所有的特征，但是减少<script type="math/tex">\theta_j</script>的规模与大小，正则化尤其适用于那些贡献不大的特征比较多的场合。</p>
<h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>通过正则化可以通过对参数进行“惩罚”，让拟合函数的图形变得更加平滑，其应用于线性回归时候的伪代码如下所示：</p>
<script type="math/tex; mode=display">
\begin{align*} & \text{Repeat}\ \lbrace \newline & \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline & \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2...n\rbrace\newline & \rbrace \end{align*}</script><p>为什么通过加上惩罚可以使函数更加平滑呢？把其展开可以发现正则化其实是做了如下操作：</p>
<script type="math/tex; mode=display">
\theta_j := \theta_j(1 - \alpha\frac{\lambda}{m}) - \alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}</script><p>观察知道，除了$\theta_j$会在每次循环的时候先替换成一个比本身小一点点的值在进行更新，这样循环下来<script type="math/tex">\theta_j</script>的值都会减小一点点，达到了控制进行速度，减小参数值，从而更好地拟合数据的目的。<br>学到这里，我们就可以解决前面正规方程面对奇异矩阵的问题了，通过正则化，可以把矩阵变化成为一个可逆阵，只需要按照以下的公式进行：</p>
<script type="math/tex; mode=display">
\begin{align*}& \theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty \newline& \text{where}\ \ L = \begin{bmatrix} 0 & & & & \newline & 1 & & & \newline & & 1 & & \newline & & & \ddots & \newline & & & & 1 \newline\end{bmatrix}\end{align*}</script><p>即加上了$\lambda·L$,实现了其正则化，可以证明知道这样获得矩阵是可逆的，故正规方程可解。<br>接下来介绍用于逻辑回归的正则化，其能够把决策边界变得更加光滑，从而泛化到更多的数据，效果如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91xnqoy7j20dr07f3zk.jpg" alt=""><br>其正则化的代价函数如下：</p>
<script type="math/tex; mode=display">
J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2</script><p>注意一定要从i=1开始，对应的要把i=0的常数项排除在正则化之外，否则可能会带来不好的影响。所以对逻辑回归进行梯度下降形式如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi92h6irgaj20dj06jmy8.jpg" alt=""><br>结合正规化以及之前所学的高级最优化函数，我们已经可以解决绝大部分的线性回归、逻辑回归问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提出背景&quot;&gt;&lt;a href=&quot;#提出背景&quot; class=&quot;headerlink&quot; title=&quot;提出背景&quot;&gt;&lt;/a&gt;提出背景&lt;/h2&gt;&lt;p&gt;现实生活经常会碰到的一种问题就是分类问题，通过机器学习我们可以让机器进行判断某一个事物的好坏或者对事物进行分类。例如判断肿瘤
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="梯度下降法" scheme="http://yoursite.com/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（二）多变量线性回归</title>
    <link href="http://yoursite.com/2017/08/05/standford2/"/>
    <id>http://yoursite.com/2017/08/05/standford2/</id>
    <published>2017-08-05T06:28:36.000Z</published>
    <updated>2017-08-08T14:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$n$ —— 特征数量<br>$x^{(i)}$ —— 第i组训练样例的特征值<br>$x^{(i)}_j$ —— 第i组训练样例的第j个特征值</p>
<h2 id="矩阵向量乘法的应用"><a href="#矩阵向量乘法的应用" class="headerlink" title="矩阵向量乘法的应用"></a>矩阵向量乘法的应用</h2><p>矩阵向量乘法是向量化的基础，给定<script type="math/tex">theta_i</script>的值以及特征向量$X$,利用矩阵向量乘法计算<script type="math/tex">h_{\theta}</script>的公式如下：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}1&a\\1& b\\1 &c \\ 1&d \end{bmatrix} \times \begin{bmatrix}\theta_1\\\theta_2\end{bmatrix}= \begin{bmatrix}h_{\theta}(a)\\ h_{\theta}(b)\\ h_{\theta}(c)\\ h_{\theta}(d)\end{bmatrix}</script><p>即预测值 = 特征矩阵 * 参数矩阵。当参数矩阵为n维的时候，我们可以同时对几组预测函数进行计算。<br>之后的多变量线性回归向量化也依照此形式对$h_{\theta}$的值进行计算，而尽量避免对for循环的使用。</p>
<h2 id="逆矩阵复习"><a href="#逆矩阵复习" class="headerlink" title="逆矩阵复习"></a>逆矩阵复习</h2><p>仅m*m方阵有逆矩阵（只有这种情况相乘可以得到单位矩阵），其他情况利用Octave求得的矩阵均为奇异矩阵（退化矩阵）。<br>用Octave对矩阵A求逆矩阵可以用inv(A)，这个时候必须保证A是方阵，但当不是的时候也可以求得逆矩阵，利用pinv(A)即可，也可以得到一个不错的结果，不过一般不建议这样做。</p>
<h2 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h2><p>多变量线性回归要解决的是如下方程的最优参数值（代价最小）选取问题：</p>
<script type="math/tex; mode=display">
h_\theta(x) = \theta_0+\theta_1x_1+\theta_2x_2+...+\theta_nx_n</script><p>其与单变量线性回归形式非常相似，只需要把其延展到多变量即可。</p>
<h2 id="多变量线性回归的代价函数"><a href="#多变量线性回归的代价函数" class="headerlink" title="多变量线性回归的代价函数"></a>多变量线性回归的代价函数</h2><p>根据已经知道的单变量线性回归的代价函数的定义，延展其为多变量线性回归方程的形式如下：</p>
<script type="math/tex; mode=display">
J(\theta_0,\theta_1,...,\theta_n)=\frac{1}{2m}\sum _{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^2</script><h2 id="用梯度下降法求多变量线性回归问题"><a href="#用梯度下降法求多变量线性回归问题" class="headerlink" title="用梯度下降法求多变量线性回归问题"></a>用梯度下降法求多变量线性回归问题</h2><p>已经得到多变量线性回归的代价函数，同样是基于同步更新，则进行梯度下降的伪代码可以写成如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& \text{repeat until convergence:} \; \lbrace \newline \; & \theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1,...,\theta_n) & \text{for j := 0...n}\newline \rbrace\end{align*}</script><p>进行微分后就是如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& \text{repeat until convergence:} \; \lbrace \newline \; & \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \; & \text{for j := 0...n}\newline \rbrace\end{align*}</script><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>目的：确保变量都在一个相同的规模与比例之内，比如全部缩放为-1~1的范围之内，从而使梯度下降法收敛速度更快。<br>这里介绍特征缩放的其中一个方法就是<strong>均值归一化</strong>，即每个变量减去该变量的平均值，再除以极差或者方差，这样就可以控制变量范围在-1~1之内了。</p>
<p>E.g.房子的尺寸$x_1$变化范围为0~2000$feet^2$，房子的房间数$x_2$的变化范围为1~5，显然他们的规模相差非常大，如果不进行特征缩放就开始跑梯度下降，那么其下降过程的轨迹会变成如下这样：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8t2y2iz0j208v09p3yy.jpg" alt=""><br>可见其要通过比较多次的循环才能够达到全局最优解，通过特征缩放之后轮廓图会比较接近于一个圆形，此时的下降过程就如下图：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8ta96pyqj209d063dg2.jpg" alt=""><br>显然其收敛速度更快，更快达到了全局最优点。</p>
<h2 id="确保梯度下降法能够正确进行"><a href="#确保梯度下降法能够正确进行" class="headerlink" title="确保梯度下降法能够正确进行"></a>确保梯度下降法能够正确进行</h2><p>为了让梯度下降法能够正确地进行，我们需要选取合适的学习速率$\alpha$，通过观察代价函数随着循环进行的具体走向不失为一个好办法，因为好的曲线应该是每次循环进行代价函数的值都会下降并且具有良好的收敛速度。尝试的时候从小数开始，每次乘10再观察1/3处的值，每次输出图形即可。当然这一部分也不总是通过手动完成，在之后会接触能够自动选取学习速率以及能够随着循环次数改变学习速率，使其收敛更加迅速的高级算法。</p>
<h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>多项式回归即如下的形式：</p>
<script type="math/tex; mode=display">
h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+...+\theta_nx^n</script><p>显然，通过取根，更改变化范围，我们同样可以化成多变量线性回归求解，过程就省略不说了。</p>
<h2 id="正规方程解多变量线性回归"><a href="#正规方程解多变量线性回归" class="headerlink" title="正规方程解多变量线性回归"></a>正规方程解多变量线性回归</h2><p>正规方程求解参数值是利用一种解析性的方法求解参数的选取问题，且可以保证得到全局最优解，且在变量比较少的情况下具有优秀的运行速度。其向量化的表达形式如下：</p>
<script type="math/tex; mode=display">
\theta = (X^TX)^{-1}X^Ty</script><p>利用Octave表示即：pinv(x’*x)*x’*y<br>其证明过程略。相比于梯度下降，其具有不需要选择虚席速率、不需要多次循环且一定能获得全局最优解的优点，但是由于计算逆矩阵的复杂度是$O(n^3)$,一旦n比较大的时候，运行速度就会非常缓慢，而此时的梯度下降法依然能够以比较高的效率继续进行，同时，在某两组变量线性相关，或者样例数少于特征数的时候，会出现逆矩阵奇异的情况，无法使用普通方程，此时可以通过选主元素减少变量或者正则化的方法解决问题，这会在后面有所提及。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$n$ —— 特征数量&lt;br&gt;$x^{(i)}$ —— 第i组训练样例的特征值&lt;br&gt;$x^{(i)}_j$ —— 第i组训
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="正规方程" scheme="http://yoursite.com/tags/%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 三值排序 贪心</title>
    <link href="http://yoursite.com/2017/07/21/triplesort/"/>
    <id>http://yoursite.com/2017/07/21/triplesort/</id>
    <published>2017-07-21T07:06:39.000Z</published>
    <updated>2017-07-21T07:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="https://nanti.jisuanke.com/t/27" target="_blank" rel="external">https://nanti.jisuanke.com/t/27</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>排序是一种很频繁的计算任务。一个实际的例子是，当我们给某项竞赛的优胜者按金银铜牌排序的时候。在这个任务中可能的值只有三种1，2和3。我们用交换的方法把他排成升序的。</p>
<p>写一个程序计算出，计算出的一个包括1、2、3三种值的数字序列，排成升序所需的最少交换次数。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入第1行为类别的数量N（1≤N≤1000）</p>
<p>输入第2行到第N+1行，每行包括一个数字（1或2或3）。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出包含一行，为排成升序所需的最少交换次数。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>9<br>2<br>2<br>1<br>3<br>3<br>3<br>2<br>3<br>1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>4</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>最少交换多少次可以让3值按照升序排序？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然要用贪心解决。首先知道的是有三种方式交换是最优的：<br>1.1区中的2和2区中的1交换，一次能让两个数字到达正确位置。<br>2.1区中的3和3区中的2交换，同上。<br>3.2区中的3和3区中的2交换，同上。<br>本体显然有最优解结构，且交换次序不影响最优解结构，那么我们可以换一个角度看，先把1全部归位到1区，然后只要再令2中3和3中2回到正确位置即可，这个次数为max（2中3数目，3中2数目）。加上1归位的操作次数，便是贪心最优解。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        b[i]=a[i];</div><div class="line">    &#125;</div><div class="line">    sort(a,a+n);</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,tempx=<span class="number">0</span>,tempy=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span> &amp;&amp; b[i]!=<span class="number">1</span>)</div><div class="line">            ans++;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">2</span> &amp;&amp; b[i]==<span class="number">3</span>)</div><div class="line">            tempx++;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">3</span> &amp;&amp; b[i]==<span class="number">2</span>)</div><div class="line">            tempy++;</div><div class="line">    &#125;</div><div class="line">    ans+=max(tempx,tempy);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/27&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="三值排序" scheme="http://yoursite.com/tags/%E4%B8%89%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Barn Repair 贪心 牛棚问题</title>
    <link href="http://yoursite.com/2017/07/21/13barn1/"/>
    <id>http://yoursite.com/2017/07/21/13barn1/</id>
    <published>2017-07-21T06:26:15.000Z</published>
    <updated>2017-07-21T06:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;S=barn1" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;S=barn1</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>It was a dark and stormy night that ripped the roof and gates off the stalls that hold Farmer John’s cows. Happily, many of the cows were on vacation, so the barn was not completely full.</p>
<p>The cows spend the night in stalls that are arranged adjacent to each other in a long line. Some stalls have cows in them; some do not. All stalls are the same width.</p>
<p>Farmer John must quickly erect new boards in front of the stalls, since the doors were lost. His new lumber supplier will supply him boards of any length he wishes, but the supplier can only deliver a small number of total boards. Farmer John wishes to minimize the total length of the boards he must purchase.</p>
<p>Given M (1 &lt;= M &lt;= 50), the maximum number of boards that can be purchased; S (1 &lt;= S &lt;= 200), the total number of stalls; C (1 &lt;= C &lt;= S) the number of cows in the stalls, and the C occupied stall numbers (1 &lt;= stall_number &lt;= S), calculate the minimum number of stalls that must be blocked in order to block all the stalls that have cows in them.</p>
<p>Print your answer as the total number of stalls blocked.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    M, S, and C (space separated)<br>Lines 2-C+1:    Each line contains one integer, the number of an occupied stall.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line with one integer that represents the total number of stalls blocked.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4 50 18<br>3<br>4<br>6<br>8<br>14<br>15<br>16<br>17<br>21<br>25<br>26<br>27<br>30<br>31<br>40<br>41<br>42<br>43</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>25</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>可以任意使用任何规格的木板，给出牛棚的位置，用最少长度的m块模板去覆盖所有牛棚。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心之前练得真的不多，本身也不喜欢做贪心，所以水平可能因此提不上去吧。这题的思路比较简单，算一道经典题。先用一块大木板去覆盖整个最左边和最右边的牛棚，容易知道使用所有m块木板是最优策略，因为如果少使用一块的话必定多一块木板覆盖不用覆盖的区间。然后m块木板必定产生m-1个空隙，这个就是我们可以优化掉的空间，每次选取最大的缝隙即可，直到选取到m-1个。最后答案就是总长度减去最左边不用覆盖的区间和最右边不用覆盖的区间，再减去刚才选取的优化区间。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: barn1</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</div><div class="line"><span class="keyword">int</span> m,s,c,board[maxn],pos[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"barn1.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"barn1.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;m,&amp;s,&amp;c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos[i]);</div><div class="line">    sort(pos,pos+c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c;++i) board[i]=pos[i]-pos[i<span class="number">-1</span>]<span class="number">-1</span>;</div><div class="line">    sort(board+<span class="number">1</span>,board+c,cmp);</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>,ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c &amp;&amp; cnt!=m;++i)&#123;</div><div class="line">        ans+=board[i];</div><div class="line">        ++cnt;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s-ans-(pos[<span class="number">0</span>]<span class="number">-1</span>)-(s-pos[c<span class="number">-1</span>]));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;amp;S
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Dual Palindromes</title>
    <link href="http://yoursite.com/2017/07/16/1-2dualpal/"/>
    <id>http://yoursite.com/2017/07/16/1-2dualpal/</id>
    <published>2017-07-16T11:50:48.000Z</published>
    <updated>2017-07-16T11:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;S=dualpal" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;S=dualpal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome.</p>
<p>The number 21 (base 10) is not palindrome in base 10, but the number 21 (base 10) is, in fact, a palindrome in base 2 (10101).</p>
<p>Write a program that reads two numbers (expressed in base 10):</p>
<p>N (1 &lt;= N &lt;= 15)<br>S (0 &lt; S &lt; 10000)<br>and then finds and prints (in base 10) the first N numbers strictly greater than S that are palindromic when written in two or more number bases (2 &lt;= base &lt;= 10).<br>Solutions to this problem do not require manipulating integers larger than the standard 32 bits.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>A single line with space separated integers N and S.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>N lines, each with a base 10 number that is palindromic when expressed in at least two of the bases 2..10. The numbers should be listed in order from smallest to largest.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>25</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>26<br>27<br>28</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出十进制数大于S的前N个数，他们在十进制以内存在两个以上的回文数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>和上一题差不多的思路吧，变换进制检测即可,水题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: dualpal</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n,s;</div><div class="line"><span class="keyword">char</span> now[<span class="number">35</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> base=<span class="number">2</span>,length_now,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(base&lt;=<span class="number">10</span> &amp;&amp; cnt&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">int</span> temp=num;</div><div class="line">        length_now=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(temp)&#123;</div><div class="line">            now[length_now]=temp%base+<span class="string">'0'</span>;</div><div class="line">            length_now++;</div><div class="line">            temp/=base;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length_now/<span class="number">2</span> &amp;&amp; flag;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(now[i]!=now[length_now<span class="number">-1</span>-i])</div><div class="line">                flag=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ++base;</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"dualpal.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"dualpal.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    ++s;</div><div class="line">    <span class="keyword">while</span>(cnt&lt;n)&#123;</div><div class="line">        <span class="keyword">if</span>(check(s))&#123;</div><div class="line">            ++cnt;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">        &#125;</div><div class="line">        ++s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="USACO" scheme="http://yoursite.com/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Palsquare</title>
    <link href="http://yoursite.com/2017/07/16/1-2palsquare/"/>
    <id>http://yoursite.com/2017/07/16/1-2palsquare/</id>
    <published>2017-07-16T07:53:19.000Z</published>
    <updated>2017-07-16T07:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;S=palsquare" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;S=palsquare</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Palindromes are numbers that read the same forwards as backwards. The number 12321 is a typical palindrome.</p>
<p>Given a number base B (2 &lt;= B &lt;= 20 base 10), print all the integers N (1 &lt;= N &lt;= 300 base 10) such that the square of N is palindromic when expressed in base B; also print the value of that palindromic square. Use the letters ‘A’, ‘B’, and so on to represent the digits 10, 11, and so on.</p>
<p>Print both the number and its square in base B.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> A single line with B, the base (specified in base 10).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Lines with two integers represented in base B. The first integer is the number whose square is palindromic; the second integer is the square itself. NOTE WELL THAT BOTH INTEGERS ARE IN BASE B!</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>10</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 1<br>2 4<br>3 9<br>11 121<br>22 484<br>26 676<br>101 10201<br>111 12321<br>121 14641<br>202 40804<br>212 44944<br>264 69696</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个进制（小于20）判断其平方数在此进制下是否为回文数，如果是的话输出这个数字在该进制下的值以及其平方数在此进制下的值。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题，大于10的时候转换一下即可，代码要写得简洁凝练。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: palsquare</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">char</span> numa[<span class="number">10000</span>],numb[<span class="number">10000</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> length_i=<span class="number">0</span>,length_now=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i)&#123;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> judge=i%n;</div><div class="line">        <span class="keyword">if</span>(judge&gt;=<span class="number">10</span>)&#123;</div><div class="line">            c=judge<span class="number">-10</span>+<span class="string">'A'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            c=<span class="string">'0'</span>+judge;</div><div class="line">        &#125;</div><div class="line">        numa[length_i]=c;</div><div class="line">        length_i++;</div><div class="line">        i/=n;</div><div class="line">    &#125;</div><div class="line">    numa[length_i]=<span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">int</span> temp = now;</div><div class="line">    <span class="keyword">while</span>(temp)&#123;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> judge=temp%n;</div><div class="line">        <span class="keyword">if</span>(judge&gt;=<span class="number">10</span>)&#123;</div><div class="line">            c=judge<span class="number">-10</span>+<span class="string">'A'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            c=<span class="string">'0'</span>+judge;</div><div class="line">        &#125;</div><div class="line">        numb[length_now]=c;</div><div class="line">        length_now++;</div><div class="line">        temp/=n;</div><div class="line">    &#125;</div><div class="line">    numb[length_now]=<span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length_i/<span class="number">2</span>;++j)&#123;</div><div class="line">        <span class="keyword">char</span> to_s=numa[j];</div><div class="line">        numa[j]=numa[length_i<span class="number">-1</span>-j];</div><div class="line">        numa[length_i<span class="number">-1</span>-j]=to_s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length_now/<span class="number">2</span>;++j)&#123;</div><div class="line">        <span class="keyword">if</span>(numb[j]!=numb[length_now<span class="number">-1</span>-j])</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"palsquare.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"palsquare.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">300</span>;++i)&#123;</div><div class="line">        now=i*i;</div><div class="line">        <span class="keyword">if</span>(check(i))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,numa,numb);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Namenum</title>
    <link href="http://yoursite.com/2017/07/10/12namenum/"/>
    <id>http://yoursite.com/2017/07/10/12namenum/</id>
    <published>2017-07-10T06:04:08.000Z</published>
    <updated>2017-07-10T06:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=namenum" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=namenum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Among the large Wisconsin cattle ranchers, it is customary to brand cows with serial numbers to please the Accounting Department. The cow hands don’t appreciate the advantage of this filing system, though, and wish to call the members of their herd by a pleasing name rather than saying, “C’mon, #4734, get along.”</p>
<p>Help the poor cowhands out by writing a program that will translate the brand serial number of a cow into possible names uniquely associated with that serial number. Since the cow hands all have cellular saddle phones these days, use the standard Touch-Tone(R) telephone keypad mapping to get from numbers to letters (except for “Q” and “Z”):</p>
<pre><code>      2: A,B,C     5: J,K,L    8: T,U,V
      3: D,E,F     6: M,N,O    9: W,X,Y
      4: G,H,I     7: P,R,S
</code></pre><p>Acceptable names for cattle are provided to you in a file named “dict.txt”, which contains a list of fewer than 5,000 acceptable cattle names (all letters capitalized). Take a cow’s brand number and report which of all the possible words to which that number maps are in the given dictionary which is supplied as dict.txt in the grading environment (and is sorted into ascending order).</p>
<p>For instance, the brand number 4734 produces all the following names:</p>
<p>GPDG GPDH GPDI GPEG GPEH GPEI GPFG GPFH GPFI GRDG GRDH GRDI<br>GREG GREH GREI GRFG GRFH GRFI GSDG GSDH GSDI GSEG GSEH GSEI<br>GSFG GSFH GSFI HPDG HPDH HPDI HPEG HPEH HPEI HPFG HPFH HPFI<br>HRDG HRDH HRDI HREG HREH HREI HRFG HRFH HRFI HSDG HSDH HSDI<br>HSEG HSEH HSEI HSFG HSFH HSFI IPDG IPDH IPDI IPEG IPEH IPEI<br>IPFG IPFH IPFI IRDG IRDH IRDI IREG IREH IREI IRFG IRFH IRFI<br>ISDG ISDH ISDI ISEG ISEH ISEI ISFG ISFH ISFI<br>As it happens, the only one of these 81 names that is in the list of valid names is “GREG”.</p>
<p>Write a program that is given the brand number of a cow and prints all the valid names that can be generated from that brand number or ``NONE’’ if there are no valid names. Serial numbers can be as many as a dozen digits long.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>A single line with a number from 1 through 12 digits in length.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A list of valid names that can be generated from the input, one per line, in ascending alphabetical order.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4734</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>GREG</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>牛之间用手机进行练习，给出牛的名单表和手机按键，判断这个牛是否在名单表中。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很容易知道按照输入来枚举的话数量很爆炸，所以直接按读入文件来进行枚举，转换后和输入相同就输出它就可以了。本题在另一方面练习了文件流的读写。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: namenum</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> alpha[<span class="number">26</span>]=&#123;<span class="string">'2'</span>,<span class="string">'2'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'3'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'4'</span>,</div><div class="line">    <span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'5'</span>,<span class="string">'5'</span>,  <span class="string">'6'</span>,<span class="string">'6'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,</div><div class="line">    <span class="string">'0'</span>,<span class="string">'7'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'8'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'9'</span>,<span class="string">'9'</span>,<span class="string">'0'</span>&#125;;</div><div class="line"><span class="built_in">string</span> words,tmp,data;</div><div class="line"><span class="keyword">bool</span> flag;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//定向程序IO。</span></div><div class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"namenum.in"</span>)</span></span>;</div><div class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"namenum.out"</span>)</span></span>;</div><div class="line">    <span class="comment">//不进行数字操作，只进行比较操作，直接用string处理。</span></div><div class="line">    fin&gt;&gt;data;</div><div class="line">    <span class="comment">//定向名字文件IO。</span></div><div class="line">    <span class="function">ifstream <span class="title">tin</span><span class="params">(<span class="string">"dict.txt"</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span>(tin&gt;&gt;words)&#123;</div><div class="line">        <span class="comment">//获取当前单词长度，再分开判断。</span></div><div class="line">        <span class="keyword">int</span> wnum=words.size();</div><div class="line">        tmp=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;wnum;++i)</div><div class="line">            tmp+=alpha[words[i]<span class="number">-65</span>];</div><div class="line">        <span class="keyword">if</span>(tmp==data)&#123;</div><div class="line">            fout&lt;&lt;words&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!flag) fout&lt;&lt;<span class="string">"NONE"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Transformations</title>
    <link href="http://yoursite.com/2017/07/10/12transform/"/>
    <id>http://yoursite.com/2017/07/10/12transform/</id>
    <published>2017-07-10T05:36:06.000Z</published>
    <updated>2017-07-10T05:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=transform" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=transform</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A square pattern of size N x N (1 &lt;= N &lt;= 10) black and white square tiles is transformed into another square pattern. Write a program that will recognize the minimum transformation that has been applied to the original pattern given the following list of possible transformations:</p>
<p>#1: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees.<br>#2: 180 Degree Rotation: The pattern was rotated clockwise 180 degrees.<br>#3: 270 Degree Rotation: The pattern was rotated clockwise 270 degrees.<br>#4: Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image).<br>#5: Combination: The pattern was reflected horizontally and then subjected to one of the rotations (#1-#3).<br>#6: No Change: The original pattern was not changed.<br>#7: Invalid Transformation: The new pattern was not obtained by any of the above methods.<br>In the case that more than one transform could have been used, choose the one with the minimum number above.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    A single integer, N<br>Line 2..N+1:    N lines of N characters (each either `@’ or `-‘); this is the square before transformation<br>Line N+2..2*N+1:    N lines of N characters (each either `@’ or `-‘); this is the square after transformation</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line containing the number from 1 through 7 (described above) that categorizes the transformation required to change from the `before’ representation to the `after’ representation.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3</p>
<h2 id=""><a href="#" class="headerlink" title="@-@"></a>@-@</h2><p>@@-<br>@-@<br>@—<br>—@</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出原始矩阵和目标矩阵，一共有七种转换方式，给出最小可以达到目标矩阵的转换方式的编号。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>计算一下转化的公式，之后优雅地顺序执行判断即可,练习基本功的好题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: transform</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</div><div class="line"><span class="keyword">char</span> m[maxn][maxn],t[maxn][maxn],a[maxn][maxn],now[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpy</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            t[i][j]=now[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            now[i][j]=m[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rot90</span><span class="params">()</span></span>&#123;</div><div class="line">    cpy();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            now[i][j]=t[n<span class="number">-1</span>-j][i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge4</span><span class="params">()</span></span>&#123;</div><div class="line">    cpy();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">            now[i][j]=t[i][n<span class="number">-1</span>-j];</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge5</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> tt[maxn][maxn];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">            tt[i][j]=now[i][n<span class="number">-1</span>-j];</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(tt[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(now[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok5=<span class="literal">false</span>;</div><div class="line">    init();</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    init();</div><div class="line">    judge4();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    <span class="keyword">if</span>(ok5)</div><div class="line">        <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(m[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"transform.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"transform.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;m[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（一）单变量线性回归</title>
    <link href="http://yoursite.com/2017/06/15/unvariablegradient/"/>
    <id>http://yoursite.com/2017/06/15/unvariablegradient/</id>
    <published>2017-06-15T06:19:52.000Z</published>
    <updated>2017-08-05T11:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$m$ —— 训练集中训练样本个个数<br>$x’s$ —— 输入变量/特征量(即$features$，用$X_i$刻画样本数)<br>$y’s$ —— 输出变量/约定变量</p>
<h2 id="监督学习与回归问题"><a href="#监督学习与回归问题" class="headerlink" title="监督学习与回归问题"></a>监督学习与回归问题</h2><p>监督学习指机器能够通过使用包含特征量、已知结果的训练集训练，具备能够对问题给出“正确答案”的能力。<br>回归问题指能够机器能够对问题给出一个预计的真值输出（相对于分类问题）。</p>
<h2 id="单变量线性回归要解决的问题"><a href="#单变量线性回归要解决的问题" class="headerlink" title="单变量线性回归要解决的问题"></a>单变量线性回归要解决的问题</h2><p>$Hypothesis: h_\theta(x) = \theta_0 + \theta_1x$<br>$\theta_i’s: Parameters$<br>$How\ to\ choose\ \theta_i’s?$</p>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>为了解决$\theta_0$和$\theta_1$的选择问题，使它能够很好地拟合训练集的已知数据，我们必须引入评判模型误差的手段，这就是将要说明的代价函数，即Cost Function。<br>针对前面的公式，我们现在要解决两个参数$\theta_0$和$\theta_1$的选取，而代价函数定义为：</p>
<script type="math/tex; mode=display">
J(\theta_1,\theta_2)=\frac{1}{2m}\sum_{i=1}^{m}(h_0(x_i)-y_i)^2</script><p>可以从公式看出，其做的是计算当前<script type="math/tex">\theta_0</script>和<script type="math/tex">\theta_1</script>的确定的预测函数与精确已知值的方差。<br>我们构造模型的目标就是<script type="math/tex">\min_{\theta_0,\theta_1} J(\theta_0,\theta_1)</script><br>当仅有一个参数$\theta_1$时的代价函数图：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fglwia2t55j308n081aap.jpg" alt=""><br>两个参数$\theta_0$和$\theta_1$时的代价函数<strong>立体图</strong>：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fglwmjy7ovj30db0a1q6u.jpg" alt=""><br>两个参数$\theta_0$和$\theta_1$时的代价函数<strong>轮廓图</strong>：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fglwoswiluj30cn0bxq7i.jpg" alt=""><br>其最中心点就是为局部最优点取值对应的点位。</p>
<h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><p>梯度下降法能通过下山得到问题的一个最优解，其大多数情况是局部最优解，不一定为全局最优解。<br>梯度下降法的算法方程如下:</p>
<script type="math/tex; mode=display">
\begin{align*} \text{repeat until convergence: } \lbrace & \newline
\theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1)  \newline\rbrace& \end{align*}</script><p>公式中的$\theta_0$和$\theta_1$的每次更新都是同步的，写代码的时候不能够拆分成先后写，这样有时虽然也可能得到正确结果，但也可能导致不可预知的错误。<br>正确的同步更新写法可以写为：</p>
<script type="math/tex; mode=display">
\begin{align}
temp_0 := \theta_0 - \frac{\partial }{\partial \theta_0}J(\theta_0,\theta_1)\\
temp_1 := \theta_0 - \frac{\partial }{\partial \theta_1}J(\theta_0,\theta_1)\\
\theta_0 := temp_0\\
\theta_1 := temp_1\\
\end{align}</script><p>梯度下降(也称下山）图解：<br><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fglx7z9ztyj30ff07tjus.jpg" alt=""><br>注意，其中:<br>$\alpha$ —— 学习速率(即learning rate)，其决定了下山的步子迈多大，如果$\alpha$大的话说明迈的是大步子，其收敛速度快，但是如果过快的话会导致无法收敛的问题,而$\alpha$选取过小的话又会导致收敛速度过慢的问题。</p>
<h2 id="学习速率的选取"><a href="#学习速率的选取" class="headerlink" title="学习速率的选取"></a>学习速率的选取</h2><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fglxmaiymkj30hy09xdh9.jpg" alt=""><br>由图可以得出如下结论：<br>1.如果$\alpha$选取过小，则下降会非常缓慢，迟迟无法收敛。<br>2.如果$\alpha$选取过小，则步子过大会迈过最优点不断迭代发散导致振荡、溢出，得不到最优解。<br>为了选择最佳的学习速率，我们可以通过Octave画图观察不同迭代速率收敛的速度来选取，若每次迭代代价函数的值都在下降，即单调递减，再次基础上保证循环次数最少，即是我们想要的$\alpha$值。<br>尝试$\alpha$的时候可以从0.01、0.03、0.1、0.3、1……来进行粗调，再进行微调即可。</p>
<h2 id="单变量线性回归的梯度下降法运用"><a href="#单变量线性回归的梯度下降法运用" class="headerlink" title="单变量线性回归的梯度下降法运用"></a>单变量线性回归的梯度下降法运用</h2><p>对前面的代价公式求导后，得到算法流程如下：</p>
<script type="math/tex; mode=display">
\begin{align*} \text{repeat until convergence: } \lbrace & \newline \theta_0 := & \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}(h_\theta(x_{i}) - y_{i}) \newline \theta_1 := & \theta_1 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}\left((h_\theta(x_{i}) - y_{i}) x_{i}\right) \newline \rbrace& \end{align*}</script><p>注意，实现时一定要避免使用for循环结构，直接利用向量化解决问题会使得算法效率极大提高。<br>在变量$x$的矩阵当中，一定要记得添加一列全为1的<script type="math/tex">X_{0}</script>伴随矩阵于最左边。所以我们可以得到$X * \theta = h_{\theta}(x)$，其中X为特征矩阵。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，单变量线性回归问题的知识点全部介绍完，利用训练集求出的参数值就可以把模型应用于解决实际问题，它是之后多变量线性回归（多于一个特征值）的基础，需要牢固掌握，以及能够熟练编写代码解决实际问题。同时要注意编写程序的时候一定要应用向量化提高代码的执行效率，这需要对线性代数知识有扎实的基础。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$m$ —— 训练集中训练样本个个数&lt;br&gt;$x’s$ —— 输入变量/特征量(即$features$，用$X_i$刻画样本
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="梯度下降法" scheme="http://yoursite.com/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Milking Cows</title>
    <link href="http://yoursite.com/2017/06/12/12milking/"/>
    <id>http://yoursite.com/2017/06/12/12milking/</id>
    <published>2017-06-11T16:34:37.000Z</published>
    <updated>2017-06-11T16:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;S=milk2" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;S=milk2</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Three farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200).</p>
<p>Your job is to write a program that will examine a list of beginning and ending times for N (1 &lt;= N &lt;= 5000) farmers milking N cows and compute (in seconds):</p>
<p>The longest time interval at least one cow was milked.<br>The longest time interval (after milking starts) during which no cows were being milked.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    The single integer, N<br>Lines 2..N+1:    Two non-negative integers less than 1,000,000, respectively the starting and ending time in seconds after 0500</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line with two integers that represent the longest continuous time of milking and the longest idle time.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>300 1000<br>700 1200<br>1500 2100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>900 300</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出每头牛的工作时间段，输出最长至少一头牛的工作时间长度以及最长没有妞工作的时间长度。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>时间按开始时间早晚排序，用cur维护当前最长的从头到尾的时间段，若开始时间在cur的结束时间之前，且当前时间段的结束时间&gt;cur的结束时间，则更新cur的结束时间为当前时间的结束时间，否则如果当前时间段开始时间&gt;=cur的结束时间，而且结束时间&gt;=cur的结束时间，说明这个时间段在cur之外，则维护tnomilk的值和tmilk的值，且令这个时间段成为cur。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: milk2</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> nmilking,tmilk,tnomilk,t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> begin;</div><div class="line">    <span class="keyword">int</span> end;</div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(node a,node b)&#123;</div><div class="line">        <span class="keyword">return</span> a.begin&lt;b.begin;</div><div class="line">    &#125;</div><div class="line">&#125;milking[maxn],cur;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"milk2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"milk2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nmilking);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nmilking;++i)</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;milking[i].begin,&amp;milking[i].end);</div><div class="line">    sort(milking,milking+nmilking);</div><div class="line">    tmilk=<span class="number">0</span>,tnomilk=<span class="number">0</span>;</div><div class="line">    cur=milking[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nmilking;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(milking[i].begin&gt;cur.end)&#123;</div><div class="line">            t=milking[i].begin-cur.end;</div><div class="line">            <span class="keyword">if</span>(t&gt;tnomilk)</div><div class="line">            tnomilk=t;</div><div class="line">            t=cur.end-cur.begin;</div><div class="line">            <span class="keyword">if</span>(t&gt;tmilk)</div><div class="line">            tmilk=t;</div><div class="line">            cur=milking[i];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(milking[i].end&gt;cur.end)</div><div class="line">            cur.end=milking[i].end;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    t=cur.end-cur.begin;</div><div class="line">    <span class="keyword">if</span>(t&gt;tmilk)</div><div class="line">    tmilk=t;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,tmilk,tnomilk);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>在Hexo中渲染MathJax数学公式</title>
    <link href="http://yoursite.com/2017/06/10/MathJax/"/>
    <id>http://yoursite.com/2017/06/10/MathJax/</id>
    <published>2017-06-10T11:34:20.000Z</published>
    <updated>2017-06-10T13:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近在学习机器学习，课堂笔记中免不了有大量的数学公式，为了避免截图的麻烦，学习了用MathJax来渲染数学公式。Hexo完美地支持了MathJax的使用，但是由于渲染引擎的问题，默认情况下会出现不渲染的问题。</p>
<h2 id="原因（引自推酷作者ShallowLearner）"><a href="#原因（引自推酷作者ShallowLearner）" class="headerlink" title="原因（引自推酷作者ShallowLearner）"></a>原因（引自推酷作者ShallowLearner）</h2><p>Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为<em>标签。</em></p>
<p>因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为&lt;\em&gt;标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为\$x&lt;\em&gt;i&lt;/em&gt;$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</p>
<p>类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\’等。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以更换渲染引擎为<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="external">hexo-renderer-kramed</a>，其修复了默认引擎的一些Bug，能够更好地渲染MathJax公式而避免转义的麻烦。<br>安装过程如下：</p>
<blockquote>
<p>npm uninstall hexo-renderer-marked —save<br>npm install hexo-renderer-kramed —save</p>
</blockquote>
<h2 id="在主题中开启MathJax开关"><a href="#在主题中开启MathJax开关" class="headerlink" title="在主题中开启MathJax开关"></a>在主题中开启MathJax开关</h2><p>打开主题的 _config.yml 文件，如下片段：</p>
<blockquote>
<p># MathJax Support<br>mathjax:<br>  enable: flase<br>  per_page: false<br>  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</p>
</blockquote>
<p>修改两个false值为true即可打开MathJax的支持。<br>此外为了提高访问速度，MathJax并不是全局打开的，要在需要使用MathJax的文章Front-matter打开开关才可以使用，格式如下：</p>
<blockquote>
<p>-—<br>title: index.html<br>date: 2017-12-28 2017-06-10 19:34:20<br>tags:<br>mathjax: true<br>-—</p>
</blockquote>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>输入如下的LaTeX公式：</p>
<blockquote>
<p>$$<br>J(\theta<em>1,\theta_2)=\frac{1}{2m}\sum</em>{i=1}^{m}(\widehat{y<em>i}-y_i)^2 = \frac{1}{2m}\sum</em>{i=1}^{m}(h_0(x_i)-y_i)^2<br>$$</p>
</blockquote>
<p>即可渲染为：</p>
<script type="math/tex; mode=display">
J(\theta_1,\theta_2)=\frac{1}{2m}\sum_{i=1}^{m}(\widehat{y_i}-y_i)^2 = \frac{1}{2m}\sum_{i=1}^{m}(h_0(x_i)-y_i)^2</script><p>此外，如果你不熟悉MathJax的语法，可以借助下列网站来帮助你生成LaTeX代码：<br><a href="http://latex.codecogs.com/eqneditor/editor.php" target="_blank" rel="external">http://latex.codecogs.com/eqneditor/editor.php</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近在学习机器学习，课堂笔记中免不了有大量的数学公式，为了避免截图的麻烦，学习了用MathJax来渲染数学公式。Hexo完美地支持了MathJax的使用，但是由于渲染引擎的问题，默认情况下会出现不渲染的问题。&lt;/p&gt;
&lt;h2 id=&quot;原因（引自推酷作者ShallowLe
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="MathJax" scheme="http://yoursite.com/tags/MathJax/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 Broken Necklace</title>
    <link href="http://yoursite.com/2017/05/28/11necklace/"/>
    <id>http://yoursite.com/2017/05/28/11necklace/</id>
    <published>2017-05-28T03:59:42.000Z</published>
    <updated>2017-05-28T04:08:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;S=beads" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;S=beads</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have a necklace of N red, white, or blue beads (3&lt;=N&lt;=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29:</p>
<pre><code>            1 2                               1 2
        r b b r                           b r r b
      r         b                       b         b
     r           r                     b           r
    r             r                   w             r
   b               r                 w               w
  b                 b               r                 r
  b                 b               b                 b
  b                 b               r                 b
   r               r                 b               r
    b             r                   r             r
     b           r                     r           r
       r       r                         r       b
         r b r                             r r w
        Figure A                         Figure B
                    r red bead
                    b blue bead
                    w white bead
</code></pre><p>The beads considered first and second in the text that follows have been marked in the picture.</p>
<p>The configuration in Figure A may be represented as a string of b’s and r’s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb .</p>
<p>Suppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this).</p>
<p>Determine the point where the necklace should be broken so that the most number of beads can be collected.</p>
<p>Example</p>
<p>For example, for the necklace in Figure A, 8 beads can be collected, with the breaking point either between bead 9 and bead 10 or else between bead 24 and bead 25.</p>
<p>In some necklaces, white beads had been included as shown in Figure B above. When collecting beads, a white bead that is encountered may be treated as either red or blue and then painted with the desired color. The string that represents this configuration can include any of the three symbols r, b and w.</p>
<p>Write a program to determine the largest number of beads that can be collected from a supplied necklace.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    N, the number of beads<br>Line 2:    a string of N characters, each of which is r, b, or w</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line containing the maximum of number of beads that can be collected from the supplied necklace.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>29<br>wwwbbrwrbrbrrbrbrwrwwrbwrwrrb</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>11</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>从某一个端点断开项链，然后从断开的两端数珠子，直到第一个与数的珠子颜色不同的珠子，停止计数。其中W颜色可以染色成R颜色或者B颜色。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>虽然说是水题，但是这题实在是不会啊，代码写得很乱很难看啊，只能过过样例啊，只好看官方题解了，在参数多于两个的时候应该调用函数封装好，比如本题的数珠子的方向dir与断点i。还有取余的模拟环操作也要注意判断是否为负，为负加一个len就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">ID: hyson601</div><div class="line">PROG: beads</div><div class="line">LANG: C++</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(n&lt;<span class="number">0</span>) n+=m;</div><div class="line">    <span class="keyword">return</span> n%m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tobreak</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> dir)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">if</span>(dir&gt;<span class="number">0</span>) i=p;</div><div class="line">    <span class="keyword">else</span> i=mod(p<span class="number">-1</span>,len);</div><div class="line">    <span class="keyword">char</span> color=<span class="string">'w'</span>;</div><div class="line">    <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;len;i=mod(i+dir,len))&#123;</div><div class="line">        <span class="keyword">if</span>(color==<span class="string">'w'</span> &amp;&amp; s[i]!=<span class="string">'w'</span>)</div><div class="line">            color=s[i];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color!=s[i] &amp;&amp; s[i]!=<span class="string">'w'</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        ++n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"beads.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"beads.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">    <span class="keyword">int</span> n,m=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</div><div class="line">        n=tobreak(i,<span class="number">1</span>)+tobreak(i,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(n&gt;m) m=n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(m&gt;len) m=len;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="AD HOC" scheme="http://yoursite.com/tags/AD-HOC/"/>
    
  </entry>
  
  <entry>
    <title>省赛之后的训练计划</title>
    <link href="http://yoursite.com/2017/05/25/plan525/"/>
    <id>http://yoursite.com/2017/05/25/plan525/</id>
    <published>2017-05-25T06:43:54.000Z</published>
    <updated>2017-05-25T06:54:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于之前所学的算法知识比较零碎，省赛后要做的就是把所学的算法再次巩固一遍，更加深入地去理解每一个算法不要依赖板子，USACO显然是一个个比较好的选择，之后会针对USACO的课程来进行科学的刷题，并且继续提高自己的手速，将会涵盖的算法内容如下：</p>
<p>Dynamic Programming<br>Greedy<br>Complete Search<br>Flood Fill<br>Shortest Path<br>Recursive Search Techniques<br>Minimum Spanning Tree<br>Knapsack<br>Computational Geometry<br>Network Flow<br>Eulerian Path<br>Two-Dimensional Convex Hull<br>BigNums<br>Heuristic Search<br>Approximate Search<br>Ad Hoc Problems</p>
<p>将会采用USACO+白书+SPOJ的训练模式，为之后刷紫书做铺垫。<br>此外以后的每一场CodeForces仍然会坚持打，坚持补题。<br>新旅途开始，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于之前所学的算法知识比较零碎，省赛后要做的就是把所学的算法再次巩固一遍，更加深入地去理解每一个算法不要依赖板子，USACO显然是一个个比较好的选择，之后会针对USACO的课程来进行科学的刷题，并且继续提高自己的手速，将会涵盖的算法内容如下：&lt;/p&gt;
&lt;p&gt;Dynamic 
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ2409 Power Strings - KMP裸题</title>
    <link href="http://yoursite.com/2017/05/18/POJ2409/"/>
    <id>http://yoursite.com/2017/05/18/POJ2409/</id>
    <published>2017-05-18T02:27:30.000Z</published>
    <updated>2017-05-18T02:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2406" target="_blank" rel="external">http://poj.org/problem?id=2406</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings a and b we define a<em>b to be their concatenation. For example, if a = “abc” and b = “def” then a</em>b = “abcdef”. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = “” (the empty string) and a^(n+1) = a*(a^n).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each s you should print the largest n such that s = a^n for some string a.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>abcd<br>aaaa<br>ababab<br>.</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1<br>4<br>3</p>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>This problem has huge input, use scanf instead of cin to avoid time limit exceed.</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>寻找最小循环节，并求循环次数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>其实寒假做过这种求最小循环节的题，但是太久没有摸过KMP忘记了Next数组怎么操作，特地复习了一遍。简单的说，Next数组可以在模式串和原串失配的时候返回一个前缀和后缀相等的最大位置，而且这个过程是可以递归的。在串中某个循环节不断重复的过程中其实next数组已经记录了最大的滑动位置，所以最后要得到的结果为s[next[len]]s[next[len]+1]……s[len-1]。如果其长度能够被串本身长度整除，说明它存在不是它本身的子串，否则自己就是长度最大子串，返回1。</p>
<p>Tips:字符串ababab的Next数组值为-1,0,0,1,2,3,4。<br>字符串abaabcac的Next数组值为-1,0,0,1,1,2,0,1。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> Next[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</div><div class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;=len)&#123;</div><div class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || (i&lt;len &amp;&amp; s[i]==s[j]))&#123;</div><div class="line">            Next[++i]=++j;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            j=Next[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s) &amp;&amp; <span class="built_in">strcmp</span>(s,<span class="string">"."</span>)!=<span class="number">0</span>)&#123;</div><div class="line">        len=<span class="built_in">strlen</span>(s);</div><div class="line">        get_next(s);</div><div class="line">        <span class="keyword">if</span>(len%(len-Next[len])==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,len/(len-Next[len]));</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2406&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>POJ3624 Charm Bracelet - 01背包</title>
    <link href="http://yoursite.com/2017/05/17/POJ3624/"/>
    <id>http://yoursite.com/2017/05/17/POJ3624/</id>
    <published>2017-05-17T00:49:08.000Z</published>
    <updated>2017-05-17T00:56:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Bessie has gone to the mall’s jewelry store and spies a charm bracelet. Of course, she’d like to fill it with the best charms possible from the N (1 ≤ N ≤ 3,402) available charms. Each charm i in the supplied list has a weight Wi (1 ≤ Wi ≤ 400), a ‘desirability’ factor Di (1 ≤ Di ≤ 100), and can be used at most once. Bessie can only support a charm bracelet whose weight is no more than M (1 ≤ M ≤ 12,880).</p>
<p>Given that weight limit as a constraint and a list of the charms with their weights and desirability rating, deduce the maximum possible sum of ratings.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><ul>
<li>Line 1: Two space-separated integers: N and M</li>
<li>Lines 2..N+1: Line i+1 describes charm i with two space-separated integers: Wi and Di <h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2></li>
<li>Line 1: A single integer that is the greatest sum of charm desirabilities that can be achieved given the weight constraints</li>
</ul>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4 6<br>1 4<br>2 6<br>3 12<br>2 7</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>23</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>买珠宝，每个珠宝都有一个魅力值，但是也有重量，要求允许重量不满情况下取得的最大魅力值为多少。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>典型的01背包问题，一维状态转移方程为F[v]=max{F[v],F[v-Ci]+Wi}。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150000</span>;</div><div class="line"><span class="keyword">int</span> f[maxn],w[maxn],d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;w[i],&amp;d[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=w[i];--j)</div><div class="line">            f[j]=max(f[j],f[j-w[i]]+d[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[m]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="动态规划 背包DP" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85DP/"/>
    
    
      <category term="01背包" scheme="http://yoursite.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4010 菜肴制作 - 拓补排序</title>
    <link href="http://yoursite.com/2017/05/16/BZOJ4010/"/>
    <id>http://yoursite.com/2017/05/16/BZOJ4010/</id>
    <published>2017-05-16T13:36:23.000Z</published>
    <updated>2017-05-16T13:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>知名美食家小 A被邀请至ATM 大酒店，为其品评菜肴。<br>ATM 酒店为小 A 准备了 N 道菜肴，酒店按照为菜肴预估的质量从高到低给予<br>1到N的顺序编号，预估质量最高的菜肴编号为1。由于菜肴之间口味搭配的问题，<br>某些菜肴必须在另一些菜肴之前制作，具体的，一共有 M 条形如“i 号菜肴‘必须’<br>先于 j 号菜肴制作”的限制，我们将这样的限制简写为<i,j>。现在，酒店希望能求<br>出一个最优的菜肴的制作顺序，使得小 A能尽量先吃到质量高的菜肴：也就是说，<br>(1)在满足所有限制的前提下，1 号菜肴“尽量”优先制作；(2)在满足所有限制，1<br>号菜肴“尽量”优先制作的前提下，2号菜肴“尽量”优先制作；(3)在满足所有限<br>制，1号和2号菜肴“尽量”优先的前提下，3号菜肴“尽量”优先制作；(4)在满<br>足所有限制，1 号和 2 号和 3 号菜肴“尽量”优先的前提下，4 号菜肴“尽量”优<br>先制作；(5)以此类推。<br>例1：共4 道菜肴，两条限制<3,1>、<4,1>，那么制作顺序是 3,4,1,2。例2：共<br>5道菜肴，两条限制<5,2>、 <4,3>，那么制作顺序是 1,5,2,4,3。例1里，首先考虑 1，<br>因为有限制<3,1>和<4,1>，所以只有制作完 3 和 4 后才能制作 1，而根据(3)，3 号<br>又应“尽量”比 4 号优先，所以当前可确定前三道菜的制作顺序是 3,4,1；接下来<br>考虑2，确定最终的制作顺序是 3,4,1,2。例 2里，首先制作 1是不违背限制的；接<br>下来考虑 2 时有<5,2>的限制，所以接下来先制作 5 再制作 2；接下来考虑 3 时有</5,2></4,1></3,1></4,3></5,2></4,1></3,1></i,j></p>
<p><4,3>的限制，所以接下来先制作 4再制作 3，从而最终的顺序是 1,5,2,4,3。<br>现在你需要求出这个最优的菜肴制作顺序。无解输出“Impossible!” （不含引号，<br>首字母大写，其余字母小写） </4,3></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行是一个正整数D，表示数据组数。<br>接下来是D组数据。<br>对于每组数据：<br>第一行两个用空格分开的正整数N和M，分别表示菜肴数目和制作顺序限<br>制的条目数。<br>接下来M行，每行两个正整数x,y，表示“x号菜肴必须先于y号菜肴制作”<br>的限制。（注意：M条限制中可能存在完全相同的限制） </p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出文件仅包含 D 行，每行 N 个整数，表示最优的菜肴制作顺序，或<br>者”Impossible!”表示无解（不含引号）。 </p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 </p>
<p>5 4 </p>
<p>5 4 </p>
<p>5 3 </p>
<p>4 2 </p>
<p>3 2 </p>
<p>3 3 </p>
<p>1 2 </p>
<p>2 3 </p>
<p>3 1 </p>
<p>5 2 </p>
<p>5 2 </p>
<p>4 3 </p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 5 3 4 2 </p>
<p>Impossible! </p>
<p>1 5 2 4 3 </p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出若干种品尝菜肴先后顺序的限制，输出一个合法的品尝序列，并且要求在此基础上字典序最小。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目可以转化为求拓补序列的问题，同时要求按照尽量小的字典序来输出，显然进行拓补排序的时候可以使用优先队列来维护入队的点。为了保证无限制时按照字典序输出，仅仅使用最小值优先的优先队列是不够的，以为其后连边可能破坏字典序的结构，我们可以转变下思想反向连边，然后用最大值优先的优先队列来维护点，这样拓补序列总会令最大的靠前，再反向输出就可以得到正确的结果。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,id;</div><div class="line"><span class="keyword">int</span> du[maxn],L[maxn],head[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> from,to,next;</div><div class="line">&#125;e[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(du,<span class="number">0</span>,<span class="keyword">sizeof</span> du);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    e[id].from=u;</div><div class="line">    e[id].to=v;</div><div class="line">    e[id].next=head[u];</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">int</span> d;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d);</div><div class="line">    <span class="keyword">while</span>(d--)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            addEdge(v,u);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j!=<span class="number">-1</span>;j=e[j].next)</div><div class="line">                du[e[j].to]++;</div><div class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; Q;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">            <span class="keyword">if</span>(!du[i]) Q.push(i);</div><div class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</div><div class="line">            <span class="keyword">int</span> x=Q.top();Q.pop();</div><div class="line">            L[tot++]=x;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[x];j!=<span class="number">-1</span>;j=e[j].next)&#123;</div><div class="line">                <span class="keyword">int</span> t=e[j].to;</div><div class="line">                du[t]--;</div><div class="line">                <span class="keyword">if</span>(!du[t])</div><div class="line">                    Q.push(t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(tot==n)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,L[i]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible!\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="拓补排序" scheme="http://yoursite.com/categories/%E6%8B%93%E8%A1%A5%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="拓补排序" scheme="http://yoursite.com/tags/%E6%8B%93%E8%A1%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 21D - Array Division 二分</title>
    <link href="http://yoursite.com/2017/05/16/EDU21D/"/>
    <id>http://yoursite.com/2017/05/16/EDU21D/</id>
    <published>2017-05-16T11:07:18.000Z</published>
    <updated>2017-05-16T11:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/contest/808/problem/D" target="_blank" rel="external">http://codeforces.com/contest/808/problem/D</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Vasya has an array a consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).</p>
<p><em>Inserting an element in the same position he was erased from is also considered moving.</em></p>
<p>Can Vasya divide the array after choosing the right element to move and its new position?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains single integer n (1 ≤ n ≤ 100000) — the size of the array.</p>
<p>The second line contains n integers a1, a2… an (1 ≤ ai ≤ 109) — the elements of the array.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print YES if Vasya can divide the array after moving one element. Otherwise print NO.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>1 3 2</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>YES</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>能否只移动一个元素使数组可以分开为前后缀和相等的两半？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>容易知道两半的和一定为tot/2，那么现在问题转化为能否移动一个元素使得前缀or后缀的和等于tot/2（此时另一半也为tot/2）。枚举移动的元素，正向二分一次判断插前，逆向二分一次判断插后即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line">ll s[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    ll tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        tot += a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(tot%<span class="number">2</span>!=<span class="number">0</span> || n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    tot/=<span class="number">2</span>;</div><div class="line">    s[<span class="number">0</span>]=a[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;++i)&#123;</div><div class="line">        s[i]=s[i<span class="number">-1</span>]+a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==tot)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=i<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">            ll temp=s[mid]+a[i];</div><div class="line">            <span class="keyword">if</span>(temp==tot)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp&lt;tot)  l=mid+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        l=i+<span class="number">1</span>,r=n;</div><div class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</div><div class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">            ll temp=s[n]-s[mid]+a[i];</div><div class="line">            <span class="keyword">if</span>(temp==tot)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp&lt;tot) r=mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/808/problem/D&quot; target=&quot;
    
    </summary>
    
      <category term="其他 二分" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ECNU3247 铁路修复计划 - 二分+MST</title>
    <link href="http://yoursite.com/2017/05/15/ECNU3247/"/>
    <id>http://yoursite.com/2017/05/15/ECNU3247/</id>
    <published>2017-05-15T02:26:11.000Z</published>
    <updated>2017-05-15T05:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.ecnu.edu.cn/blog/entry/25/" target="_blank" rel="external">http://acm.ecnu.edu.cn/blog/entry/25/</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在 A 国有很多城际铁路。这些铁路都连接两个城市（城市从 1 到 n 编号），可以双向通行，使得任意两个城市之间都由铁路网联系起来。</p>
<p>不过在一次星球大战之后，所有的铁路都经历了不同程度的损伤以至于无法通行了。由于经费紧缺，A 国政府不愿意再出资造新的铁路。对于原有的城际铁路，根据铁路的实际情况，有以下两种处理办法：</p>
<p>使用国内技术进行修复：主要针对损坏情况不是很严重的铁路。国内公司会对铁路状况进行评估，然后如实开出铁路修复的费用。<br>使用国外技术进行修复：主要针对损坏情况严重的铁路。国外公司也会对铁路情况进行评估，然后按照铁路实际修复费用的 k 倍来收费（其中 k 是一个由国外公司决定的实数，不管怎么说，优惠是不可能的，所以 k≥1）。<br>A国政府修复铁路的总预算是 M，目标是要让任意两个城市之间都能通过铁路联系起来。在预算不够且能够完成目标的条件下，显然没必要修复每一条铁路。</p>
<p>国外公司通过不知什么途径了解到了 A 国政府的总预算 M，他们现在要把 k 定下来，并且希望 k 尽可能得大。但 k 又不能太大，不然，如果 A 国政府发现无法完成任务的话，整个订单都会泡汤。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>测试数据包含不超过 30 个测试文件。每个测试文件是单个测试点。</p>
<p>第一行是三个整数 n,m,M (2≤n≤105,n−1≤m≤min{105,n(n−1)2},1≤M≤1015)。</p>
<p>接下来 m 行，每行四个整数 ui,vi,ti,fi。表示一条城际铁路，连接着 ui 和 vi 城市，ti 表示铁路实际修复费用。fi=1 表示只能由国外公司修复，fi=0 表示由国内公司修复。(1≤ui,vi≤n,ui≠vi,1≤ti≤106,fi∈{0,1})。输入保证两个城市之间不会存在多条铁路。</p>
<p>输入保证：</p>
<p>在国外公司不乱收费 (k=1) 的情况下，使用预算能完成要求。<br>完全不使用国外技术，只使用国内技术，是不能完成目标的。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>求 k 的最大值。输出答案与标准答案相差不超过 10−6 即判为正确。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 3 9<br>1 2 1 1<br>1 3 2 0<br>2 3 1 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>7.000000</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>修铁路，铁路是双向路，而且可以由国内国外去修理，修理费用给出，现在国外知道了国内的总预算M，希望取k倍（实数）于正常报价的价格压榨国内政府，但是这个k也不能太大，超过M的解是不可行的。已知没有国外的参与不能完成这次修复，求这个k最大的时候为多少。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>维护无向图的连通，显然可以转化为MST问题，然后贪心知道当国内政府和国外政府都取尽量小的值是符合题目要求的，所以我们可以对这个k进行二分，对边重新赋值后由大到小排序，用kruscal判断修复后的总预算是否超过M来判断这个解是否可行。（注：所补图不一定构成最小生成树，只是通过MST的思想来进行贪心。）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,m,par[maxn];</div><div class="line"><span class="keyword">double</span>  M;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> u,v,f,t;</div><div class="line">    <span class="keyword">double</span> cost;</div><div class="line">&#125;edge[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        par[i]=i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(par[x]==x)</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    x=find(x);</div><div class="line">    y=find(y);</div><div class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</div><div class="line">    par[x]=y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> mid)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) edge[i].cost=(edge[i].f ? mid*edge[i].t : edge[i].t);</div><div class="line">    sort(edge,edge+m,[](node a,node b)&#123;<span class="keyword">if</span>(a.cost==b.cost) <span class="keyword">return</span> !a.f;  <span class="keyword">return</span> a.cost&lt;b.cost;&#125;);</div><div class="line">    init(n);</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(cnt==n<span class="number">-1</span> &amp;&amp; tot&lt;=M ) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">int</span> x=find(edge[i].u),y=find(edge[i].v);</div><div class="line">        <span class="keyword">if</span> (x!=y)&#123;</div><div class="line">            tot+=edge[i].cost;</div><div class="line">            unite(x,y);</div><div class="line">            ++cnt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tot&lt;=M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lf"</span>,&amp;n,&amp;m,&amp;M);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].t,&amp;edge[i].f);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> l=<span class="number">1</span>,r=<span class="number">1e15</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> _=<span class="number">0</span>;_&lt;<span class="number">100</span>;_++)&#123;</div><div class="line">        <span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid)) l=mid;</div><div class="line">        <span class="keyword">else</span> r=mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>) r=(<span class="keyword">double</span>)M/edge[<span class="number">0</span>].t*<span class="number">1.0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>,r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.ecnu.edu.cn/blog/entry/25/&quot; target=&quot;_blank
    
    </summary>
    
      <category term="图论 生成树" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="MST" scheme="http://yoursite.com/tags/MST/"/>
    
  </entry>
  
  <entry>
    <title>ECNU3260 袋鼠妈妈找孩子 - DFS暴搜</title>
    <link href="http://yoursite.com/2017/05/15/ECNU3260/"/>
    <id>http://yoursite.com/2017/05/15/ECNU3260/</id>
    <published>2017-05-15T02:14:52.000Z</published>
    <updated>2017-05-15T05:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.ecnu.edu.cn/problem/3260/" target="_blank" rel="external">http://acm.ecnu.edu.cn/problem/3260/</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>袋鼠妈妈找不到她的孩子了。她的孩子被怪兽抓走了。</p>
<p>袋鼠妈妈现在在地图的左上角，她的孩子在地图第 x 行第 y 列的位置。怪兽想和袋鼠妈妈玩一个游戏：他不想让袋鼠妈妈过快地找到她的孩子。袋鼠妈妈每秒钟可以向上下左右四个方向跳一格（如果没有墙阻拦的话），怪兽就要在一些格子中造墙，从而完成一个迷宫，使得袋鼠妈妈能够找到她的孩子，但最快不能小于 k 秒。</p>
<p>请设计这样一个迷宫。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行两个整数 n,m (1≤n,m≤8)，表示地图的总行数和总列数。</p>
<p>第二行三个整数 x,y,k (1≤x≤n,1≤y≤m,x+y&gt;1)。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出一个地图，应正好 n 行 m 列。</p>
<p>用 . 表示空地，用 * 表示墙。袋鼠妈妈所在的位置和孩子所在的位置用 . 表示。</p>
<p>数据保证有解。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2 6<br>1 3 4</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>.<em>.**</em><br>……</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>构造一副图使从（1，1）点到终点的步数不小于k。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>地图比较小，DFS暴搜一遍即可，为了保证最后形成的是不重复走的最短路，每次搜索的时候要保证上下左右只有一个点时被访问过的。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,endx,endy,k;</div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">char</span> g[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> step)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x==endx &amp;&amp; y==endy &amp;&amp; step&gt;=k ) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</div><div class="line">        <span class="keyword">int</span> tx=x+dx[i],ty=y+dy[i];</div><div class="line">        <span class="keyword">if</span>(tx&lt;<span class="number">1</span> || ty&lt;<span class="number">1</span> || tx&gt;n || ty&gt;m || g[tx][ty]==<span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j)</div><div class="line">            <span class="keyword">if</span>(g[tx+dx[j]][ty+dy[j]]==<span class="string">'.'</span>) ++cnt;</div><div class="line">        <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        g[tx][ty]=<span class="string">'.'</span>;</div><div class="line">        <span class="keyword">if</span>(dfs(tx,ty,step+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        g[tx][ty]=<span class="string">'*'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;endx,&amp;endy,&amp;k);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</div><div class="line">            g[i][j]=<span class="string">'*'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    g[<span class="number">1</span>][<span class="number">1</span>]=<span class="string">'.'</span>;</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,g[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.ecnu.edu.cn/problem/3260/&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="搜索 DFS" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2-DFS/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
</feed>
