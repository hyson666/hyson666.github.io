<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HysonQAQ</title>
  <subtitle>很卑微，不努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-29T17:47:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hyson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ2689 Prime Distance - 埃拉托色尼筛法应用</title>
    <link href="http://yoursite.com/2017/04/30/POJ2689/"/>
    <id>http://yoursite.com/2017/04/30/POJ2689/</id>
    <published>2017-04-29T17:35:00.000Z</published>
    <updated>2017-04-29T17:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2689" target="_blank" rel="external">http://poj.org/problem?id=2689</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The branch of mathematics called number theory is about properties of numbers. One of the areas that has captured the interest of number theoreticians for thousands of years is the question of primality. A prime number is a number that is has no proper factors (it is only evenly divisible by 1 and itself). The first prime numbers are 2,3,5,7 but they quickly become less frequent. One of the interesting questions is how dense they are in various ranges. Adjacent primes are two numbers that are both primes, but there are no other prime numbers between the adjacent primes. For example, 2,3 are the only adjacent primes that are also adjacent numbers.<br>Your program is given 2 numbers: L and U (1&lt;=L&lt; U&lt;=2,147,483,647), and you are to find the two adjacent primes C1 and C2 (L&lt;=C1&lt; C2&lt;=U) that are closest (i.e. C2-C1 is the minimum). If there are other pairs that are the same distance apart, use the first pair. You are also to find the two adjacent primes D1 and D2 (L&lt;=D1&lt; D2&lt;=U) where D1 and D2 are as distant from each other as possible (again choosing the first pair if there is a tie).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> Each line of input will contain two positive integers, L and U, with L &lt; U. The difference between L and U will not exceed 1,000,000.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each L and U, the output will either be the statement that there are no adjacent primes (because there are less than two primes between the two given numbers) or a line giving the two pairs of adjacent primes.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2 17<br>14 17</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2,3 are closest, 7,11 are most distant.<br>There are no adjacent primes.</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出区间的上下界，求在这个区间之内距离最近的两个素数距离为多少和距离最远的两个素数距离为多少。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先注意到题目的范围非常大，打出完整的素数表必定会MLE，所以我们当然没必要打出整个素数表，现在我们知道与埃拉托色尼筛法有关的定理：<strong>如果n是一个合数，那么n一定有一个不超过sqrt(n)的素因子。</strong>那么运用这点我们知道只需要打出前5万个素数的表就可以解决问题了,因为sqrt(2^31)&lt;50000，我们可以运用表内的素数乘上k来判断在大区间中的某个数字是否属素数，如果n=k*prime在区间中，那么它一定不是素数。注意枚举素数的时候一定不能慢慢累加到对应的区间，因为当所求区间非常靠后的时候，第五万个素数距离它还是非常远的，累加的话会出现O(n^2)复杂度变得非常大的情况，显然我们可以用除法来进行加速，避免一系列不必要的枚举直接到目的区间。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = INT_MAX<span class="number">-1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span>&lt;&lt;<span class="number">16</span>;</div><div class="line">ll u,l,maxl,maxr,minl,minr,num;</div><div class="line"><span class="keyword">bool</span> vis[maxn],is_prime[maxn*<span class="number">20</span>];</div><div class="line">ll prime[maxn],ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">	num=<span class="number">0</span>;</div><div class="line">	<span class="built_in">memset</span>(vis,<span class="literal">true</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">	vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(vis[i]) &#123;</div><div class="line">			prime[num++]=i;</div><div class="line">			is_prime[i]=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num &amp;&amp; i*prime[j]&lt;n;j++)</div><div class="line">		&#123;</div><div class="line">			vis[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(ll l,ll u)</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(is_prime,<span class="number">1</span>, <span class="keyword">sizeof</span>(is_prime));</div><div class="line">	<span class="keyword">int</span> mul;</div><div class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;num &amp;&amp; prime[i]&lt;=u;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(l&gt;prime[i]) &#123;</div><div class="line">			ll temp = l - prime[i];</div><div class="line">			mul = temp / prime[i] ;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			mul=<span class="number">2</span>;</div><div class="line">		<span class="keyword">for</span>(ll j=mul*prime[i];j&lt;=u;j+=prime[i])&#123;</div><div class="line">			<span class="keyword">if</span>(j&gt;=l) &#123;</div><div class="line">				is_prime[j - l] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	init_prime_factor(maxn);</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;u))&#123;</div><div class="line">		get_prime(l,u);</div><div class="line">		<span class="keyword">int</span> pnum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(ll i=l;i&lt;=u;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(is_prime[i-l])&#123;</div><div class="line">				<span class="keyword">if</span>(i==<span class="number">1</span>)</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				ans[++pnum]=i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		ll MIN=inf,MAX=-inf;</div><div class="line">		ll temp;</div><div class="line">		<span class="keyword">if</span>(pnum&lt;<span class="number">2</span>)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"There are no adjacent primes.\n"</span>);</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pnum; ++i) &#123;</div><div class="line">				temp = ans[i + <span class="number">1</span>] - ans[i];</div><div class="line">				<span class="keyword">if</span> (temp &lt; MIN) &#123;</div><div class="line">					MIN = temp;</div><div class="line">					minl = ans[i];</div><div class="line">					minr = ans[i+<span class="number">1</span>];</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(temp &gt;MAX)&#123;</div><div class="line">					MAX=temp;</div><div class="line">					maxl=ans[i];</div><div class="line">					maxr=ans[i+<span class="number">1</span>];</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%lld,%lld are closest, %lld,%lld are most distant.\n"</span>,minl,minr,maxl,maxr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2689&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="筛法" scheme="http://yoursite.com/tags/%E7%AD%9B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>POJ2262 Goldbach&#39;s Conjecture - 哥德巴赫猜想</title>
    <link href="http://yoursite.com/2017/04/30/POJ2262/"/>
    <id>http://yoursite.com/2017/04/30/POJ2262/</id>
    <published>2017-04-29T17:26:20.000Z</published>
    <updated>2017-04-29T17:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2262" target="_blank" rel="external">http://poj.org/problem?id=2262</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In 1742, Christian Goldbach, a German amateur mathematician, sent a letter to Leonhard Euler in which he made the following conjecture:<br>Every even number greater than 4 can be<br>written as the sum of two odd prime numbers.</p>
<p>For example:<br>8 = 3 + 5. Both 3 and 5 are odd prime numbers.<br>20 = 3 + 17 = 7 + 13.<br>42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23.</p>
<p>Today it is still unproven whether the conjecture is right. (Oh wait, I have the proof of course, but it is too long to write it on the margin of this page.)<br>Anyway, your task is now to verify Goldbach’s conjecture for all even numbers less than a million. </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input will contain one or more test cases.<br>Each test case consists of one even integer n with 6 &lt;= n &lt; 1000000.<br>Input will be terminated by a value of 0 for n.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print one line of the form n = a + b, where a and b are odd primes. Numbers and operators should be separated by exactly one blank like in the sample output below. If there is more than one pair of odd primes adding up to n, choose the pair where the difference b - a is maximized. If there is no such pair, print a line saying “Goldbach’s conjecture is wrong.”</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>8<br>20<br>42<br>0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>8 = 3 + 5<br>20 = 3 + 17<br>42 = 5 + 37</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>哥德巴赫猜想是一个著名的但是没有被准确证明的定理，其指出任意一个数字都可以表示为两个质数之和，给出n个数字，现在要求你把它拆分为两个素数的和，取两个素数只差最大的输出。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>从头开始枚举素数，当满足n-prime[i]也为素数的时候输出即可线性解决这个问题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">4</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = INT_MAX;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn],n,num,is_prime[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span>   </span></div><div class="line">&#123;</div><div class="line">    num=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="literal">true</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) &#123;</div><div class="line">            prime[num++]=i;</div><div class="line">            is_prime[i]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num &amp;&amp; i*prime[j]&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            vis[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	init_prime_factor(maxn);</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> a,b;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(is_prime[n-prime[i]])&#123;</div><div class="line">				a=prime[i];</div><div class="line">				b=n-prime[i];</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d = %d + %d\n"</span>,n,a,b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2262&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>POJ3641 Pseudoprime numbers - 快速幂运算模板</title>
    <link href="http://yoursite.com/2017/04/29/POJ3641/"/>
    <id>http://yoursite.com/2017/04/29/POJ3641/</id>
    <published>2017-04-28T17:50:32.000Z</published>
    <updated>2017-04-28T17:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=3641" target="_blank" rel="external">http://poj.org/problem?id=3641</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Fermat’s theorem states that for any prime number p and for any integer a &gt; 1, ap = a (mod p). That is, if we raise a to the pth power and divide by p, the remainder is a. Some (but not very many) non-prime values of p, known as base-a pseudoprimes, have this property for some a. (And some, known as Carmichael Numbers, are base-a pseudoprimes for all a.)</p>
<p>Given 2 &lt; p ≤ 1000000000 and 1 &lt; a &lt; p, determine whether or not p is a base-a pseudoprime.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> Input contains several test cases followed by a line containing “0 0”. Each test case consists of a line containing p and a.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, output “yes” if p is a base-a pseudoprime; otherwise output “no”.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 2<br>10 3<br>341 2<br>341 3<br>1105 2<br>1105 3<br>0 0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>no<br>no<br>yes<br>no<br>yes<br>yes</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义伪素数满足a^p = a (mod p),给出a和p的值，问a^p是否为伪素数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用快速幂运算计算出a^p%p的值之后和a比较即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">ll <span class="title">quick_mod</span><span class="params">(ll a,ll b,ll c)</span></span>&#123;</div><div class="line">    ll ans=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = (ans*a)%c;</div><div class="line">        a = (a*a)%c;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">quick_mul</span><span class="params">(ll a,ll b)</span></span>&#123;</div><div class="line">    ll ans=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(b)&#123;</div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = ans*a;</div><div class="line">        a = a*a;</div><div class="line">        b&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge_prime</span><span class="params">(ll n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p,a;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;a))&#123;</div><div class="line">        <span class="keyword">if</span>(p==<span class="number">0</span> &amp;&amp; a==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        ll temp = quick_mul(a,p);</div><div class="line">        <span class="keyword">if</span>(!judge_prime(p) &amp;&amp; a==quick_mod(a,p,p))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3641&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="快速幂" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>POJ3518 Prime Gap - 水题</title>
    <link href="http://yoursite.com/2017/04/29/POJ3518/"/>
    <id>http://yoursite.com/2017/04/29/POJ3518/</id>
    <published>2017-04-28T17:45:16.000Z</published>
    <updated>2017-04-28T17:49:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=3518" target="_blank" rel="external">http://poj.org/problem?id=3518</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The sequence of n − 1 consecutive composite numbers (positive integers that are not prime and not equal to 1) lying between two successive prime numbers p and p + n is called a prime gap of length n. For example, ‹24, 25, 26, 27, 28› between 23 and 29 is a prime gap of length 6.</p>
<p>Your mission is to write a program to calculate, for a given positive integer k, the length of the prime gap that contains k. For convenience, the length is considered 0 in case no prime gap contains k.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input is a sequence of lines each of which contains a single positive integer. Each positive integer is greater than 1 and less than or equal to the 100000th prime number, which is 1299709. The end of the input is indicated by a line containing a single zero.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The output should be composed of lines each of which contains a single non-negative integer. It is the length of the prime gap that contains the corresponding positive integer in the input if it is a composite number, or 0 otherwise. No other characters should occur in the output.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>10<br>11<br>27<br>2<br>492170<br>0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>4<br>0<br>6<br>0<br>114</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义素数区间的长度为相邻两个素数的差，求一个数所在素数区间的长度。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用之前的打表模板会MLE，所以换了个模板，打表后输出即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>,maxnn=<span class="number">2000000</span>;</div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxnn],is_prime[maxnn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span>   </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="literal">true</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) &#123;</div><div class="line">            prime[num++]=i;</div><div class="line">            is_prime[i]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num &amp;&amp; i*prime[j]&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            vis[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    init_prime_factor(maxnn);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(is_prime[n] || n==<span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(prime[i]&gt;n)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prime[i]-prime[i<span class="number">-1</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3518&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>POJ2739 Sum of Consecutive Prime Numbers - 水题</title>
    <link href="http://yoursite.com/2017/04/29/POJ2739/"/>
    <id>http://yoursite.com/2017/04/29/POJ2739/</id>
    <published>2017-04-28T17:40:31.000Z</published>
    <updated>2017-04-28T17:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2739" target="_blank" rel="external">http://poj.org/problem?id=2739</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Some positive integers can be represented by a sum of one or more consecutive prime numbers. How many such representations does a given positive integer have? For example, the integer 53 has two representations 5 + 7 + 11 + 13 + 17 and 53. The integer 41 has three representations 2+3+5+7+11+13, 11+13+17, and 41. The integer 3 has only one representation, which is 3. The integer 20 has no such representations. Note that summands must be consecutive prime<br>numbers, so neither 7 + 13 nor 3 + 5 + 5 + 7 is a valid representation for the integer 20.<br>Your mission is to write a program that reports the number of representations for the given positive integer.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> The input is a sequence of positive integers each in a separate line. The integers are between 2 and 10 000, inclusive. The end of the input is indicated by a zero.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The output should be composed of lines each corresponding to an input line except the last zero. An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers. No other characters should be inserted in the output.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>3<br>17<br>41<br>20<br>666<br>12<br>53<br>0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1<br>1<br>2<br>3<br>0<br>0<br>1<br>2</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个数字，求它能由几组连续的素数组成。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>素数打表之后线性爬一遍就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</div><div class="line"><span class="keyword">int</span> visit[maxn],prime[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(!visit[i]) &#123;</div><div class="line">            prime[++num] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num &amp;&amp; i*prime[j]&lt;=n;++j)&#123;</div><div class="line">            visit[i*prime[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    init_prime_factor(maxn);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> total=prime[<span class="number">1</span>],l=<span class="number">1</span>,r=<span class="number">1</span>,ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(total&lt;=n)&#123;</div><div class="line">                total+=prime[++r];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(total==n)</div><div class="line">                ans++;</div><div class="line">            <span class="keyword">while</span>(total&gt;=n) &#123;</div><div class="line">                total -= prime[l++];</div><div class="line">                <span class="keyword">if</span>(total==n) &#123;</div><div class="line">                    ans++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(prime[r]&gt;n) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2739&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>POJ1595 Prime Cuts - 水题</title>
    <link href="http://yoursite.com/2017/04/29/POJ1595/"/>
    <id>http://yoursite.com/2017/04/29/POJ1595/</id>
    <published>2017-04-28T17:33:24.000Z</published>
    <updated>2017-04-28T17:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=1595" target="_blank" rel="external">http://poj.org/problem?id=1595</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A prime number is a counting number (1, 2, 3, …) that is evenly divisible only by 1 and itself. In this problem you are to write a program that will cut some number of prime numbers from the list of prime numbers between (and including) 1 and N. Your program will read in a number N; determine the list of prime numbers between 1 and N; and print the C*2 prime numbers from the center of the list if there are an even number of prime numbers or (C*2)-1 prime numbers from the center of the list if there are an odd number of prime numbers in the list.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> Each input set will be on a line by itself and will consist of 2 numbers. The first number (1 &lt;= N &lt;= 1000) is the maximum number in the complete list of prime numbers between 1 and N. The second number (1 &lt;= C &lt;= N) defines the C*2 prime numbers to be printed from the center of the list if the length of the list is even; or the (C*2)-1 numbers to be printed from the center of the list if the length of the list is odd.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each input set, you should print the number N beginning in column 1 followed by a space, then by the number C, then by a colon (:), and then by the center numbers from the list of prime numbers as defined above. If the size of the center list exceeds the limits of the list of prime numbers between 1 and N, the list of prime numbers between 1 and N (inclusive) should be printed. Each number from the center of the list should be preceded by exactly one blank. Each line of output should be followed by a blank line. Hence, your output should follow the exact format shown in the sample output.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>21 2<br>18 2<br>18 18<br>100 7</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>21 2: 5 7 11</p>
<p>18 2: 3 5 7 11</p>
<p>18 18: 1 2 3 5 7 11 13 17</p>
<p>100 7: 13 17 19 23 29 31 37 41 43 47 53 59 61 67</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个数，如果在它前面的素数有奇数个，则输出前面n个素数中心附近的2*c-1个数字，若为偶数个，则输出中心附近的2*c个数字。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>打表后计算前面素数的个数，分情况处理即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">50</span>,maxp=<span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">bool</span> visit[maxp],is_prime[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(!visit[i]) prime[++num]=i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num &amp;&amp; i*prime[j]&lt;=n;++j)&#123;</div><div class="line">            visit[i*prime[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    prime[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    init_prime_factor(maxn);</div><div class="line">    <span class="keyword">int</span> n,c,center;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;c))&#123;</div><div class="line">        <span class="keyword">int</span> first=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(prime[i]&gt;n)&#123;</div><div class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>)&#123;</div><div class="line">                    center = (i<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d: "</span>,n,c);</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=max(center-c+<span class="number">1</span>,<span class="number">0</span>);j&lt;=min(i<span class="number">-1</span>,center+c<span class="number">-1</span>);++j)&#123;</div><div class="line">                        <span class="keyword">if</span>(!first) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                        first=<span class="number">0</span>;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d"</span>,prime[j]);</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    center = (i<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d: "</span>,n,c);</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=max(center-c+<span class="number">1</span>,<span class="number">0</span>);j&lt;=min(center+c,i<span class="number">-1</span>);++j)&#123;</div><div class="line">                        <span class="keyword">if</span>(!first) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                        first=<span class="number">0</span>;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d"</span>,prime[j]);</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"1 1: 1\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1595&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>POJ2034 Anti-prime Sequences - 素数打表+DFS</title>
    <link href="http://yoursite.com/2017/04/26/POJ2034/"/>
    <id>http://yoursite.com/2017/04/26/POJ2034/</id>
    <published>2017-04-26T06:27:09.000Z</published>
    <updated>2017-04-26T06:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2034" target="_blank" rel="external">http://poj.org/problem?id=2034</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sequence of consecutive integers n,n+1,n+2,…,m, an anti-prime sequence is a rearrangement of these integers so that each adjacent pair of integers sums to a composite (non-prime) number. For example, if n = 1 and m = 10, one such anti-prime sequence is 1,3,5,4,2,6,9,7,8,10. This is also the lexicographically first such sequence. </p>
<p>We can extend the definition by defining a degree danti-prime sequence as one where all consecutive subsequences of length 2,3,…,d sum to a composite number. The sequence above is a degree 2 anti-prime sequence, but not a degree 3, since the subsequence 5, 4, 2 sums to 11. The lexicographically .rst degree 3 anti-prime sequence for these numbers is 1,3,5,4,6,2,10,8,7,9. </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Input will consist of multiple input sets. Each set will consist of three integers, n, m, and d on a single line. The values of n, m and d will satisfy 1 &lt;= n &lt; m &lt;= 1000, and 2 &lt;= d &lt;= 10. The line 0 0 0 will indicate end of input and should not be processed.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each input set, output a single line consisting of a comma-separated list of integers forming a degree danti-prime sequence (do not insert any spaces and do not split the output over multiple lines). In the case where more than one anti-prime sequence exists, print the lexicographically first one (i.e., output the one with the lowest first value; in case of a tie, the lowest second value, etc.). In the case where no anti-prime sequence exists, output </p>
<p>No anti-prime sequence exists. </p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>1 10 2<br>1 10 3<br>1 10 5<br>40 60 7<br>0 0 0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1,3,5,4,2,6,9,7,8,10<br>1,3,5,4,6,2,10,8,7,9<br>No anti-prime sequence exists.<br>40,41,43,42,44,46,45,47,48,50,55,53,52,60,56,49,51,59,58,57,54</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义一串数字的度d为任意连续2~d-1的连续数字相加都不为素食，现在给出起点n和终点m，区间内的每个整数只能使用一次，要求构造出一个度为d的数字串。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先打素数表，然后进行DFS搜索，每次搜索只需要确定该个数及其前面d-1个数字是否符合要求即可（当前搜索的状态的前一个状态必已经符合要求），不满足的情况进行回溯即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</div><div class="line"><span class="keyword">int</span> ans[maxn],m,n,d,prime[maxn],vis[maxn],used[maxn],ok;</div><div class="line"><span class="keyword">bool</span> is_prime[maxn],exist;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_table</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">			prime[++num]=i;</div><div class="line">			is_prime[i]=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num &amp;&amp; i*prime[j]&lt;=n;++j)&#123;</div><div class="line">			vis[i*prime[j]] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> total,<span class="keyword">int</span> cnt,<span class="keyword">int</span> sum)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(total==ok) &#123;exist=<span class="literal">true</span>; <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">if</span>(cnt==d &amp;&amp; is_prime[sum]) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(cnt==d &amp;&amp; !is_prime[sum]) &#123;cnt=<span class="number">0</span>,sum=<span class="number">0</span>;&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">			dfs(total+<span class="number">1</span>,cnt+<span class="number">1</span>,sum+i);</div><div class="line">			vis[i]=<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		vis[i]=<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	init_prime_table(maxn);</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;m,&amp;n,&amp;d))&#123;</div><div class="line">		<span class="keyword">if</span>(m==<span class="number">0</span> &amp;&amp; n==<span class="number">0</span> &amp;&amp; d==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> cnt=m-n+<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> ok=cnt;</div><div class="line">		dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">		<span class="keyword">int</span> first=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(!first) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2034&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="搜索 DFS" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2-DFS/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 741 C - Arpa’s overnight party and Mehrdad’s silent entering - DFS染色</title>
    <link href="http://yoursite.com/2017/04/24/CF741C/"/>
    <id>http://yoursite.com/2017/04/24/CF741C/</id>
    <published>2017-04-24T02:55:38.000Z</published>
    <updated>2017-04-24T03:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/contest/741/problem/C" target="_blank" rel="external">http://codeforces.com/contest/741/problem/C</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Note that girls in Arpa’s land are really attractive.</p>
<p>Arpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i-th pair consisted of a boy, sitting on the ai-th chair, and his girlfriend, sitting on the bi-th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair.</p>
<p>There were two types of food: Kooft and Zahre-mar. Now Mehrdad wonders, was there any way to serve food for the guests such that:</p>
<p>Each person had exactly one type of food,<br>No boy had the same type of food as his girlfriend,<br>Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive.<br>Find the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer n (1  ≤  n  ≤  105) — the number of pairs of guests.</p>
<p>The i-th of the next n lines contains a pair of integers ai and bi (1  ≤ ai, bi ≤  2n) — the number of chair on which the boy in the i-th pair was sitting and the number of chair on which his girlfriend was sitting. It’s guaranteed that there was exactly one person sitting on each chair.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>If there is no solution, print -1.</p>
<p>Otherwise print n lines, the i-th of them should contain two integers which represent the type of food for the i-th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2.</p>
<p>If there are multiple solutions, print any of them.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>1 4<br>2 5<br>3 6</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 2<br>2 1<br>1 2</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>派对现在有1，2两种食物，男女朋友之间一定要吃不同的食物，而且相邻的三个人吃的食物不能一样，现在问每个人分配吃什么食物才能满足。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>为了满足这样的制约关系，我们可以建图来进行处理，男女朋友之间连线，确保他们吃的食物不一样，然后相邻的两个人（2k与2K+1）进行连线，确保每相邻三个人吃的食物都不全一样，这样建图之后跑DFS进行染色即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sp[<span class="number">2</span>*<span class="number">100010</span>];</div><div class="line"><span class="keyword">int</span> a[<span class="number">2</span>*<span class="number">100010</span>],b[<span class="number">2</span>*<span class="number">100010</span>],vis[<span class="number">2</span>*<span class="number">100010</span>],ans[<span class="number">2</span>*<span class="number">100010</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">	sp[a].push_back(b);</div><div class="line">	sp[b].push_back(a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> col)</span></span>&#123;</div><div class="line">	vis[t]=<span class="number">1</span>;</div><div class="line">	ans[t]=col;</div><div class="line">	col=(col==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sp[t].size();++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!vis[sp[t][i]]) dfs(sp[t][i],col);</div><div class="line">	&#125;</div><div class="line">&#125;	</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</div><div class="line">		add(a[i],b[i]);</div><div class="line">		add(b[i],a[i]);</div><div class="line">		add(<span class="number">2</span>*i,<span class="number">2</span>*i+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!vis[i])</div><div class="line">		  dfs(i,<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[a[i]],ans[b[i]]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/741/problem/C&quot; target=&quot;
    
    </summary>
    
      <category term="搜索 DFS" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2-DFS/"/>
    
    
      <category term="建图" scheme="http://yoursite.com/tags/%E5%BB%BA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>POJ1365 Prime Land - 质因数分解</title>
    <link href="http://yoursite.com/2017/04/24/POJ1365/"/>
    <id>http://yoursite.com/2017/04/24/POJ1365/</id>
    <published>2017-04-24T02:43:11.000Z</published>
    <updated>2017-04-24T02:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=1365" target="_blank" rel="external">http://poj.org/problem?id=1365</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Everybody in the Prime Land is using a prime base number system. In this system, each positive integer x is represented as follows: Let {pi}i=0,1,2,… denote the increasing sequence of all prime numbers. We know that x &gt; 1 can be represented in only one way in the form of product of powers of prime factors. This implies that there is an integer kx and uniquely determined integers ekx, ekx-1, …, e1, e0, (ekx &gt; 0), that  The sequence </p>
<p>(ekx, ekx-1, … ,e1, e0) </p>
<p>is considered to be the representation of x in prime base number system. </p>
<p>It is really true that all numerical calculations in prime base number system can seem to us a little bit unusual, or even hard. In fact, the children in Prime Land learn to add to subtract numbers several years. On the other hand, multiplication and division is very simple. </p>
<p>Recently, somebody has returned from a holiday in the Computer Land where small smart things called computers have been used. It has turned out that they could be used to make addition and subtraction in prime base number system much easier. It has been decided to make an experiment and let a computer to do the operation “minus one”. </p>
<p>Help people in the Prime Land and write a corresponding program. </p>
<p>For practical reasons we will write here the prime base representation as a sequence of such pi and ei from the prime base representation above for which ei &gt; 0. We will keep decreasing order with regard to pi. </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input consists of lines (at least one) each of which except the last contains prime base representation of just one positive integer greater than 2 and less or equal 32767. All numbers in the line are separated by one space. The last line contains number 0.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The output contains one line for each but the last line of the input. If x is a positive integer contained in a line of the input, the line in the output will contain x - 1 in prime base representation. All numbers in the line are separated by one space. There is no line in the output corresponding to the last “null” line of the input.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>17 1<br>5 1 2 1<br>509 1 59 1<br>0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2 4<br>3 2<br>13 1 11 1 7 1 5 1 3 1 2 1</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>每一个数字都通过质因数分解可以化成题目所述的形式，现在给出分解好的数，要你重新合成为原数，要你分解这个数减1后的质因数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>输入可以用getline(cin,s)化成串整行读入来优雅地处理，素数打表之后从小到大枚举，若可以整除则继续除直到不能再除继续枚举下一个数，直到整除为1。这个结论是由式子的形式显式得到的。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">40000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> prime[maxn],ans[maxn],visit[maxn],num[maxn];</div><div class="line"><span class="keyword">double</span> a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime_factor</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!visit[i]) prime[++num]=i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num &amp;&amp; i*prime[j]&lt;=n;++j)&#123;</div><div class="line">			visit[i*prime[j]] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">string</span> s;</div><div class="line">	init_prime_factor(maxn);</div><div class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</div><div class="line">		<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span> num);</div><div class="line">		<span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);</div><div class="line">		<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</div><div class="line">		<span class="keyword">int</span> n=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(ss&gt;&gt;a[n]) ++n;</div><div class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">		<span class="keyword">int</span> temp=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=<span class="number">2</span>)&#123;</div><div class="line">			temp*=(<span class="keyword">int</span>)<span class="built_in">pow</span>(a[i],a[i+<span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> now=temp<span class="number">-1</span>,u=<span class="number">1</span>,cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(now!=<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(now%prime[u]==<span class="number">0</span>)&#123;</div><div class="line">				num[cnt]=prime[u];</div><div class="line">				<span class="keyword">while</span>(now%prime[u]==<span class="number">0</span>)&#123;</div><div class="line">					ans[cnt]++;</div><div class="line">					now/=prime[u];</div><div class="line">				&#125;</div><div class="line">				cnt++;</div><div class="line">			&#125;</div><div class="line">			++u;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">		  <span class="built_in">printf</span>(<span class="string">"%d %d "</span>,num[i],ans[i]);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1365&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="质因数" scheme="http://yoursite.com/tags/%E8%B4%A8%E5%9B%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) C -Mike and gcd problem 数论 GCD</title>
    <link href="http://yoursite.com/2017/04/22/CF410C/"/>
    <id>http://yoursite.com/2017/04/22/CF410C/</id>
    <published>2017-04-22T11:42:31.000Z</published>
    <updated>2017-04-23T07:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/C</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has a sequence A = [a1, a2, …, an] of length n. He considers the sequence B = [b1, b2, …, bn] beautiful if the gcd of all its elements is bigger than 1, i.e. .</p>
<p>Mike wants to change his sequence in order to make it beautiful. In one move he can choose an index i (1 ≤ i &lt; n), delete numbers ai, ai + 1 and put numbers ai - ai + 1, ai + ai + 1 in their place instead, in this order. He wants perform as few operations as possible. Find the minimal number of operations to make sequence A beautiful if it’s possible, or tell him that it is impossible to do so.</p>
<p> is the biggest non-negative number d such that d divides bi for every i (1 ≤ i ≤ n).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains a single integer n (2 ≤ n ≤ 100 000) — length of sequence A.</p>
<p>The second line contains n space-separated integers a1, a2, …, an (1 ≤ ai ≤ 109) — elements of sequence A.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Output on the first line “YES” (without quotes) if it is possible to make sequence A beautiful by performing operations described above, and “NO” (without quotes) otherwise.</p>
<p>If the answer was “YES”, output the minimal number of moves needed to make sequence A beautiful.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>1 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>YES<br>1</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一串数，如果能够通过N次操作使他们的gcd&gt;1,那么输出YES，并给出最少操作次数，否则输出NO。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以通过推理证明得一次操作将会导致前后两个数字的gcd增长一倍，那么容易知道现在要求的就是把所有数字的gcd变成2，而互质的时候是1，最快变成2的办法就是找出所有连起来的奇数，对起一个数字进行操作，使他们两个都变成偶数，最后找出落单的奇数，容易知道可以通过对其操作两次让它变为偶数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x%y!=<span class="number">0</span>) <span class="keyword">return</span> gcd(y,x%y);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">int</span> g=<span class="number">0</span>,temp;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</div><div class="line">		g=gcd(g,temp);</div><div class="line">		a[i]=temp&amp;<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(g&gt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"YES\n0\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&amp;&amp;a[i+<span class="number">1</span>])&#123;</div><div class="line">			a[i]=!a[i],a[i+<span class="number">1</span>]=!a[i+<span class="number">1</span>];</div><div class="line">			ans++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">		<span class="keyword">if</span>(a[i]) ans+=<span class="number">2</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"YES\n%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/C&quot; targe
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>POJ3348 Cows - 求凸包面积</title>
    <link href="http://yoursite.com/2017/04/22/POJ3348/"/>
    <id>http://yoursite.com/2017/04/22/POJ3348/</id>
    <published>2017-04-22T10:44:57.000Z</published>
    <updated>2017-04-22T10:50:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=3348" target="_blank" rel="external">http://poj.org/problem?id=3348</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Your friend to the south is interested in building fences and turning plowshares into swords. In order to help with his overseas adventure, they are forced to save money on buying fence posts by using trees as fence posts wherever possible. Given the locations of some trees, you are to help farmers try to create the largest pasture that is possible. Not all the trees will need to be used.</p>
<p>However, because you will oversee the construction of the pasture yourself, all the farmers want to know is how many cows they can put in the pasture. It is well known that a cow needs at least 50 square metres of pasture to survive.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of input contains a single integer, n (1 ≤ n ≤ 10000), containing the number of trees that grow on the available land. The next n lines contain the integer coordinates of each tree given as two integers x and y separated by one space (where -1000 ≤ x, y ≤ 1000). The integer coordinates correlate exactly to distance in metres (e.g., the distance between coordinate (10; 11) and (11; 11) is one metre).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>You are to output a single integer value, the number of cows that can survive on the largest field you can construct using the available trees.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>0 0<br>0 101<br>75 0<br>75 101</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>151</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>你的朋友要造一个牧场，现在给出N棵树，要求你把这些树都包括在牧场里面，造一个建设长度最短的牧场。此外他还想养牛，已知道一头健康成长需要50平方米的空间，问这个牧场能养多少头牛？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>凸包点确定之后从起始点开始对边进行两两叉乘再除以2得到每个三角形的面积，加起来就是凸包的面积，最后除50输出答案即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn= <span class="number">10010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> x,y;</div><div class="line">&#125;p[maxn],P[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(node A,node B,node C)</span></span>&#123;	</div><div class="line">	<span class="keyword">return</span> (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node &amp;A,node &amp;B)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> pp = X(p[<span class="number">0</span>],A,B);</div><div class="line">	<span class="keyword">if</span>(pp&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(pp&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> len(p[<span class="number">0</span>],A)&lt;len(p[<span class="number">0</span>],B);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</div><div class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(p[i].x&lt;p[<span class="number">0</span>].x) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p[i].x==p[<span class="number">0</span>].x &amp;&amp; p[i].y&lt;p[<span class="number">0</span>].y) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">		&#125;</div><div class="line">		sort(p+<span class="number">1</span>,p+n,cmp);</div><div class="line">		P[<span class="number">0</span>]=p[<span class="number">0</span>];</div><div class="line">		P[<span class="number">1</span>]=p[<span class="number">1</span>];</div><div class="line">		<span class="keyword">int</span> top=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">while</span>(top&gt;<span class="number">0</span> &amp;&amp; X(P[top<span class="number">-1</span>],P[top],p[i])&lt;=<span class="number">0</span>) top--;</div><div class="line">			top++;</div><div class="line">			P[top]=p[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</div><div class="line">			ans+=<span class="built_in">fabs</span>(X(P[<span class="number">0</span>],P[i],P[i+<span class="number">1</span>]))/<span class="number">2.0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">50</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3348&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="计算几何 凸包" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95-%E5%87%B8%E5%8C%85/"/>
    
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>HDU1348 Wall - Granham算法模板题</title>
    <link href="http://yoursite.com/2017/04/22/HDU1348/"/>
    <id>http://yoursite.com/2017/04/22/HDU1348/</id>
    <published>2017-04-22T10:33:24.000Z</published>
    <updated>2017-04-22T10:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1348" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1348</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King’s castle. The King was so greedy, that he would not listen to his Architect’s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.<br>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King’s requirements.</p>
<p>The task is somewhat simplified by the fact, that the King’s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle’s vertices in feet.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input file contains two integer numbers N and L separated by a space. N (3 &lt;= N &lt;= 1000) is the number of vertices in the King’s castle, and L (1 &lt;= L &lt;= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.</p>
<p>Next N lines describe coordinates of castle’s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &lt;= Xi, Yi &lt;= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King’s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.</p>
<p>This problem contains multiple test cases!</p>
<p>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.</p>
<p>The output format consists of N output blocks. There is a blank line between output blocks.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>1</p>
<p>9 100<br>200 400<br>300 400<br>300 300<br>400 300<br>400 400<br>500 400<br>500 200<br>350 200<br>200 200</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1628</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>贪婪的国王想要建造城墙，并且城墙距离它的城堡要保持大于等于L的距离，现在给出N个点来刻画他的城堡，问最少建造城墙的长度为多少？<br>注意：这个城墙必须是凸的。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然通过凸包可以求出符合要求的最小长度，但是问题在于平移边之后还差一段长度，显然可以证得这段长度刚好就是以L为圆心画圆的圆周长。所以最终的答案就是凸包长度加上这段圆弧的长度。记得加上最后一个点和起始点的连线。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Graham Scan算法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn= <span class="number">1001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> x,y;</div><div class="line">&#125;p[maxn],P[maxn];</div><div class="line"></div><div class="line"><span class="comment">//求取向量叉积。</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(node A,node B,node C)</span></span>&#123;	</div><div class="line">	<span class="keyword">return</span> (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求取长度。</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//一定要定义sort的cmp操作。</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> pp = X(p[<span class="number">0</span>],A,B);</div><div class="line">	<span class="keyword">if</span>(pp&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(pp&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> len(p[<span class="number">0</span>],A)&lt;len(p[<span class="number">0</span>],B);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> v,n;</div><div class="line">	<span class="keyword">double</span> ans,l;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">0</span>;cas&lt;v;++cas)&#123;</div><div class="line">		<span class="keyword">if</span>(cas) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;n,&amp;l);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) </div><div class="line">		  <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</div><div class="line">		ans=<span class="number">2</span>*pi*l;</div><div class="line">		<span class="comment">//先进行特判。</span></div><div class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans+len(p[<span class="number">0</span>],p[<span class="number">1</span>]));</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//选取最左下的点。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</div><div class="line">				<span class="keyword">if</span>(p[i].x&lt;p[<span class="number">0</span>].x) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p[i].x==p[<span class="number">0</span>].x &amp;&amp; p[i].y&lt;p[<span class="number">0</span>].y)</div><div class="line">					swap(p[i],p[<span class="number">0</span>]);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//建系后其他点按照极坐标编号。</span></div><div class="line">			sort(p+<span class="number">1</span>,p+n,cmp);</div><div class="line">			P[<span class="number">0</span>]=p[<span class="number">0</span>];</div><div class="line">			P[<span class="number">1</span>]=p[<span class="number">1</span>]; <span class="comment">//容易证明这两个点一定在凸包当中。</span></div><div class="line">			<span class="keyword">int</span> top=<span class="number">1</span>; <span class="comment">//模拟栈的栈顶。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</div><div class="line">				<span class="comment">//检测到左拐入栈，检测到右拐不断出栈。</span></div><div class="line">				<span class="keyword">while</span>(top&gt;<span class="number">0</span> &amp;&amp; X(P[top<span class="number">-1</span>],P[top],p[i])&lt;=<span class="number">0</span>) top--;</div><div class="line">				++top;</div><div class="line">				P[top]=p[i];</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//对加入到凸包的点进行求边长。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top;++i)&#123;</div><div class="line">			  ans+=len(P[i],P[i+<span class="number">1</span>]);</div><div class="line">			&#125;</div><div class="line">			ans+=len(P[<span class="number">0</span>],P[top]);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,ans);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1348&quot; targe
    
    </summary>
    
      <category term="计算几何 凸包" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95-%E5%87%B8%E5%8C%85/"/>
    
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) B - Mike and strings 水题</title>
    <link href="http://yoursite.com/2017/04/22/CF410B/"/>
    <id>http://yoursite.com/2017/04/22/CF410B/</id>
    <published>2017-04-22T08:58:53.000Z</published>
    <updated>2017-04-22T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/B" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/B</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has n strings s1, s2, …, sn each consisting of lowercase English letters. In one move he can choose a string si, erase the first character and append it to the end of the string. For example, if he has the string “coolmike”, in one move he can transform it into the string “oolmikec”.</p>
<p>Now Mike asks himself: what is minimal number of moves that he needs to do in order to make all the strings equal?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains integer n (1 ≤ n ≤ 50) — the number of strings.</p>
<p>This is followed by n lines which contain a string each. The i-th line corresponding to string si. Lengths of strings are equal. Lengths of each string is positive and don’t exceed 50.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print the minimal number of moves Mike needs in order to make all the strings equal or print  - 1 if there is no solution.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>xzzwo<br>zwoxz<br>zzwox<br>xzzwo</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>5</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定N个串，现在支持一种操作，把串的第一个字母放到串的最后面，问你最少经过几次操作可以使所有串都相同。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>数据输入量比较小，所以可以直接暴力枚举每个串，计算出以哪个串为标准串时，其他串变成它的总代价最小，可以在for中加入发现有串不相等（不可能变成另一个串）的时候跳出循环的条件剪掉部分操作，也可以不加，反正暴力就对了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60</span>;</div><div class="line"><span class="keyword">char</span> s[maxn][maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn][maxn],ret[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> judge = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> cnt, okk;</div><div class="line">    <span class="keyword">int</span> tonext = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> noans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; judge; ++i) &#123;</div><div class="line">        okk = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; judge; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            tonext = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len &amp;&amp; judge &amp;&amp; !tonext; ++k) &#123;</div><div class="line">                <span class="keyword">if</span> (s[i][<span class="number">0</span>] == s[j][k]) &#123;</div><div class="line">                    cnt = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = k; judge; ++l) &#123;</div><div class="line">                        <span class="keyword">if</span> (s[i][cnt] == s[j][l % len]) &#123;</div><div class="line">                            cnt++;</div><div class="line">                            <span class="keyword">if</span> (cnt == len) &#123;</div><div class="line">                                okk++;</div><div class="line">                                tonext = <span class="number">1</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (tonext)</div><div class="line">                        ans[i][j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (okk != n - <span class="number">1</span>)</div><div class="line">            noans = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (noans)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                ret[i] += ans[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(ret, ret + n);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ret[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/B&quot; targe
    
    </summary>
    
      <category term="其他 暴力" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%9A%B4%E5%8A%9B/"/>
    
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) A - Mike and palindrome 水题</title>
    <link href="http://yoursite.com/2017/04/22/CF410A/"/>
    <id>http://yoursite.com/2017/04/22/CF410A/</id>
    <published>2017-04-22T08:44:02.000Z</published>
    <updated>2017-04-22T09:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/A" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/A</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome.</p>
<p>A palindrome is a string that reads the same backward as forward, for example strings “z”, “aaa”, “aba”, “abccba” are palindromes, but strings “codeforces”, “reality”, “ab” are not.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first and single line contains string s (1 ≤ |s| ≤ 15).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print “YES” (without quotes) if Mike can change exactly one character so that the resulting string is palindrome or “NO” (without quotes) otherwise.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>abccaa</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>YES</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>回文串的定义大家都知道，现在给出一个串问你能不能通过一次操作使它变为回文串，而且任何情况下都要操作一次。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>WA了两次才发现Trick，这道题一定要注意特判已经是回文串的时候是单数的情况，因为总可以改变中间的字符使它依旧是回文串。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-i;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(s[i]!=s[len-i<span class="number">-1</span>])</div><div class="line">		  ans++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(ans==<span class="number">1</span> || len==<span class="number">1</span> || (ans==<span class="number">0</span> &amp;&amp; len%<span class="number">2</span>))</div><div class="line">	  <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	  <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/A&quot; targe
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>HDU3072 Intelligence System - Tarjan缩点+贪心</title>
    <link href="http://yoursite.com/2017/04/22/HDU3072/"/>
    <id>http://yoursite.com/2017/04/22/HDU3072/</id>
    <published>2017-04-22T03:02:45.000Z</published>
    <updated>2017-04-22T04:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3072" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3072</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>After a day, ALPCs finally complete their ultimate intelligence system, the purpose of it is of course for ACM … …<br>Now, kzc_tc, the head of the Intelligence Department (his code is once 48, but now 0), is sudden obtaining important information from one Intelligence personnel. That relates to the strategic direction and future development of the situation of ALPC. So it need for emergency notification to all Intelligence personnel, he decides to use the intelligence system (kzc_tc inform one, and the one inform other one or more, and so on. Finally the information is known to all).<br>We know this is a dangerous work. Each transmission of the information can only be made through a fixed approach, from a fixed person to another fixed, and cannot be exchanged, but between two persons may have more than one way for transferring. Each act of the transmission cost Ci (1 &lt;= Ci &lt;= 100000), the total cost of the transmission if inform some ones in our ALPC intelligence agency is their costs sum.<br>Something good, if two people can inform each other, directly or indirectly through someone else, then they belong to the same branch (kzc_tc is in one branch, too!). This case, it’s very easy to inform each other, so that the cost between persons in the same branch will be ignored. The number of branch in intelligence agency is no more than one hundred.<br>As a result of the current tensions of ALPC’s funds, kzc_tc now has all relationships in his Intelligence system, and he want to write a program to achieve the minimum cost to ensure that everyone knows this intelligence.<br>It’s really annoying!</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There are several test cases.<br>In each case, the first line is an Integer N (0&lt; N &lt;= 50000), the number of the intelligence personnel including kzc_tc. Their code is numbered from 0 to N-1. And then M (0&lt;= M &lt;= 100000), the number of the transmission approach.<br>The next M lines, each line contains three integers, X, Y and C means person X transfer information to person Y cost C. </p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The minimum total cost for inform everyone.<br>Believe kzc_tc’s working! There always is a way for him to communicate with all other intelligence personnel.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 3<br>0 1 100<br>1 2 50<br>0 2 100<br>3 3<br>0 1 100<br>1 2 50<br>2 1 100<br>2 2<br>0 1 50<br>0 1 100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>150<br>100<br>50</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>大哥要给小弟们传话，传递方向固定，不能反向，传话代价为0当且仅当他们在同一个连通分量中，现在要求大哥给所有小弟传话的最小代价。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于传递是单向的，所以要求的是一个最小树形图（和最小生成树区分）。Tarjan缩点后，显然可以采用朱刘算法来解决，但是题目告诉我们这个最小树形图必定存在，那么我们可以简单地采用贪心的思想每个点选择最小的入边即可（这样选择N-1条边候得到的图必定是最小树形图）。注意，选择入边最快的方法是把所有边反向建图，然后遍历每一条出边来选择。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">100000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,m,id,head[maxn],flag[maxn],tot,tag,dfn[maxn],low[maxn],vis[maxn];</div><div class="line"><span class="keyword">int</span> iid,hhead[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,to,next,h;</div><div class="line">&#125;E[maxm],e[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=tag=tot=iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    E[id].from = u;</div><div class="line">    E[id].to = v;</div><div class="line">    E[id].next = head[u];</div><div class="line">    E[id].h = h;</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    e[iid].from = u;</div><div class="line">    e[iid].to = v;</div><div class="line">    e[iid].next = hhead[u];</div><div class="line">    e[iid].h = h;</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x]=low[x]=++tot;</div><div class="line">    S.push(x);</div><div class="line">    vis[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            <span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u,v,h;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;h);</div><div class="line">            addEdge(u,v,h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u=flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v)&#123;</div><div class="line">                addEdge2(v,u,E[i].h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp,ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            temp=INT_MAX;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=hhead[i];j!=<span class="number">-1</span>;j=e[j].next)&#123;</div><div class="line">                temp=min(temp,e[j].h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp!=INT_MAX)</div><div class="line">                ans+=temp;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3072&quot; targe
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>HDU3639 Hawk-and-Chicken - Tarjan缩点+DFS求树权和</title>
    <link href="http://yoursite.com/2017/04/22/HDU3639/"/>
    <id>http://yoursite.com/2017/04/22/HDU3639/</id>
    <published>2017-04-22T02:47:16.000Z</published>
    <updated>2017-04-22T04:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3639" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3639</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Kids in kindergarten enjoy playing a game called Hawk-and-Chicken. But there always exists a big problem: every kid in this game want to play the role of Hawk.<br>So the teacher came up with an idea: Vote. Every child have some nice handkerchiefs, and if he/she think someone is suitable for the role of Hawk, he/she gives a handkerchief to this kid, which means this kid who is given the handkerchief win the support. Note the support can be transmitted. Kids who get the most supports win in the vote and able to play the role of Hawk.(A note:if A can win<br>support from B(A != B) A can win only one support from B in any case the number of the supports transmitted from B to A are many. And A can’t win the support from himself in any case.<br>If two or more kids own the same number of support from others, we treat all of them as winner.<br>Here’s a sample: 3 kids A, B and C, A gives a handkerchief to B, B gives a handkerchief to C, so C wins 2 supports and he is choosen to be the Hawk.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There are several test cases. First is a integer T(T &lt;= 50), means the number of test cases.<br>Each test case start with two integer n, m in a line (2 &lt;= n &lt;= 5000, 0 &lt;m &lt;= 30000). n means there are n children(numbered from 0 to n - 1). Each of the following m lines contains two integers A and B(A != B) denoting that the child numbered A give a handkerchief to B.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, the output should first contain one line with “Case x:”, here x means the case number start from 1. Followed by one number which is the total supports the winner(s) get.<br>Then follow a line contain all the Hawks’ number. The numbers must be listed in increasing order and separated by single spaces.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>4 3<br>3 2<br>2 0<br>2 1</p>
<p>3 3<br>1 0<br>2 1<br>0 2</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>Case 1: 2<br>0 1<br>Case 2: 2<br>0 1 2</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>小朋友之间存在着单向的支持关系，这种支持关系是可以传递的，但是要注意这种传递关系不会叠加，而且小朋友不可以自己支持自己。现在问哪个小朋友得到的支持最多，支持数是多少，如果得到支持最多的小朋友不止一个，那么把他们由大到小列出来。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>依照题意的题目显然存在环，那么利用Tarjan缩点之后求出每个点在不同的DFS树之中被访问得最多即可，当然这并不容易做到，我们可以换一个思路，反向边建图，那么DFS遍历到的所有点都必定支持该点，把这些点的权值和自己的权值加起来减去1就是得到的最多支持数（不能算自己）。最后从1到N的顺序，如果该点所在连通分量是被标记的被支持最多的连通分量则输出该点的编号保证增序，注意这题输出比较严格，不可以输出多的空格。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">30000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> id,n,m,head[maxn],iid,hhead[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],flag[maxn],tot,vis[maxn],tag,w[maxn],cur,ans[maxn],gone[maxn],mark[maxn];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,next,to;</div><div class="line">&#125;E[maxm],e[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=<span class="number">0</span>,tag=<span class="number">0</span>,tot=<span class="number">0</span>,iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span> w);</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    E[id].from=u;</div><div class="line">    E[id].to=v;</div><div class="line">    E[id].next=head[u];</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    e[iid].from=u;</div><div class="line">    e[iid].to=v;</div><div class="line">    e[iid].next=hhead[u];</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x] = low[x] = ++tot;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    S.push(x);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            w[tag]++;</div><div class="line">            <span class="keyword">if</span>(now == x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[x];i!=<span class="number">-1</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=e[i].to;</div><div class="line">        dfs(v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!gone[x]) &#123;</div><div class="line">        ans[cur] += w[x];</div><div class="line">        gone[x] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">1</span>;cas&lt;=p;++cas)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="comment">//建立图内连通。</span></div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            addEdge(u,v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="comment">//建立缩点图跑最长路用。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u = flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v) &#123;</div><div class="line">                addEdge2(v, u);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> most=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            <span class="built_in">memset</span>(gone,<span class="number">0</span>,<span class="keyword">sizeof</span> gone);</div><div class="line">            gone[i]=<span class="number">1</span>;</div><div class="line">            ans[i]+=w[i];</div><div class="line">            cur=i;</div><div class="line">            dfs(i);</div><div class="line">            most=max(most,ans[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(ans[i]==most) &#123;</div><div class="line">                mark[++cnt]=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas,most<span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> first=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</div><div class="line">                <span class="keyword">if</span>(flag[i]==mark[j]) &#123;</div><div class="line">                   <span class="keyword">if</span>(first) &#123;</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</div><div class="line">                       first = <span class="number">0</span>;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">else</span></div><div class="line">                       <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3639&quot; targe
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>HDU1009 FatMouse&#39; Trade - 贪心</title>
    <link href="http://yoursite.com/2017/04/21/HDU1009/"/>
    <id>http://yoursite.com/2017/04/21/HDU1009/</id>
    <published>2017-04-21T04:26:55.000Z</published>
    <updated>2017-04-21T04:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1009</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<br>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]<em> a% pounds of JavaBeans if he pays F[i]</em> a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1’s. All integers are not greater than 1000.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5 3<br>7 2<br>4 3<br>5 2<br>20 3<br>25 18<br>24 15<br>15 10<br>-1 -1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>13.333<br>31.500</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>老鼠有M磅猫粮，现在想找猫换豆子，每个猫舍有Ji磅豆子，而且价值Pi磅的猫粮，老鼠每次都可以按百分比只买其中的一部分。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>基础的完全背包问题，按照J[i]/P[i]的大小进行排序，然后钱不够不能全部买走的时候只买一部分花光剩余的猫粮即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> f,p,w;</div><div class="line">&#125;point[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.w&gt;b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n))&#123;</div><div class="line">		<span class="keyword">if</span>(m==<span class="number">-1</span> || n==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;point[i].f,&amp;point[i].p);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			point[i].w = point[i].f/point[i].p;</div><div class="line">		&#125;</div><div class="line">		sort(point,point+n,cmp);</div><div class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(m-point[i].p&gt;=<span class="number">0</span>)&#123;</div><div class="line">			  ans+=point[i].f;</div><div class="line">			  m-=point[i].p;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">			  ans+=(m/point[i].p)*point[i].f;</div><div class="line">			  <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1009&quot; targe
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="完全背包" scheme="http://yoursite.com/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>POJ3114 Countries in War - Tarjan缩点+堆优化Dijkstra</title>
    <link href="http://yoursite.com/2017/04/20/POJ3114/"/>
    <id>http://yoursite.com/2017/04/20/POJ3114/</id>
    <published>2017-04-20T05:10:24.000Z</published>
    <updated>2017-04-20T10:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=3119" target="_blank" rel="external">http://poj.org/problem?id=3119</a></p>
<font size="4">Description</font>

<p>In the year 2050, after different attempts of the UN to maintain peace in the world, the third world war broke out. The importance of industrial, commercial and military secrets obliges all the countries to use extremely sophisticated espionage services, so that each city in the world has at least one spy of each country. These spies need to communicate with other spies, informers as well as their headquarters during their actions. Unluckily there doesn’t exist a secure way for a spy to communicate during the war period, therefore the messages are always sent in code so that only the addressee is able to read the message and understand its meaning.</p>
<p>The spies use the only service that functions during the war period, the post. Each city has a postal agency where the letters are sent. The letters can be sent directly to their destination or to other postal agencies, until the letter arrives at the postal agency of the destination city, if possible.</p>
<p>The postal agency in city A can send a printed letter to the postal agency in city B if there is an agreement on sending letters, which determines the time, in hours, that a letter takes to reach city B from city A (and not necessarily the opposite). If there is no agreement between the agencies A and B, the agency A can try to send the letter to any agency so that the letter can reach its destination as early as possible</p>
<p>Some agencies are connected with electronic communication media, such as satellites and optical fibers. Before the war, these connections could reach all the agencies, making that a letter could be sent instantly. But during the period of hostilities every country starts to control electronic communication and an agency can only send a letter to another agency by electronic media (or instantly) if they are in the same country. Two agencies, A and B, are in the same country if a printed letter sent from any one of the agencies can be delivered to the other one.</p>
<p>The espionage service of your country has managed to obtain the content of all the agreements on sending messages existing in the world and desires to find out the minimum time to send a letter between different pairs of cities. Are you capable of helping them?</p>
<font size="4">Input</font>

<p>The input contains several test cases. The first line of each test case contains two integer separated by a space, N (1 ≤ N ≤ 500) and E (0 ≤ E ≤ N2), indicating the numbers of cities (numbered from 1 to N) and of agreements on sending messages, respectively. Following them, then, E lines, each containing three integers separated by spaces, X, Y and H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicating that there exist an agreement to send a printed letter from city X to city Y, and that such a letter will be delivered in H hours.</p>
<p>After that, there will be a line with an integer K (0 ≤ K ≤ 100), the number of queries. Finally, there will be K lines, each representing a query and containing two integers separated by a space, O and D (1 ≤ O, D ≤ N). You must determine the minimum time to send a letter from city O to city D.</p>
<p>The end of the input is indicated by N = 0.</p>
<font size="4">Output</font>

<p>For each test case your program should produce K lines of output. The I-th line should contain an integer M, the minimum time, in hours, to send a letter in the I-th query. If there aren’t communication media between the cities of the query, you should print “Nao e possivel entregar a carta” (“It’s impossible to deliver the letter”).</p>
<p>Print a blank line after each test case.</p>
<font size="4">Sample Input</font>

<p>4 5<br>1 2 5<br>2 1 10<br>3 4 8<br>4 3 7<br>2 3 6<br>5<br>1 2<br>1 3<br>1 4<br>4 3<br>4 1<br>3 3<br>1 2 10<br>2 3 1<br>3 2 1<br>3<br>1 3<br>3 1<br>3 2<br>0 0</p>
<font size="4">Sample Output</font>

<p>0<br>6<br>6<br>0<br>Nao e possivel entregar a carta</p>
<p>10<br>Nao e possivel entregar a carta<br>0</p>
<p><strong>题意</strong><br>第三次世界大战爆发，现在每个城市的间谍都通过邮局进行通信交流，A、B两个点发送邮件能立刻完成当且仅当其在同一个城市中，即两个点在同一个城市当中。询问任意两点间发送邮件所需要的最短时间。</p>
<p><strong>题解</strong></p>
<p>缩点成为DAG图之后跑Dijkstra即可，白书上的模板用了很多次但是有几次包括这次WA掉了果断换模板AC之。原本以为跑Floyd能过，但要查询的重复点似乎不多，Floyd反而爆掉了，这一点比较坑。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = INT_MAX;</div><div class="line"><span class="keyword">int</span> n,m,id,head[maxn],flag[maxn],tot,tag,dfn[maxn],low[maxn],vis[maxn],gone[maxn];</div><div class="line"><span class="keyword">int</span> iid,hhead[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,to,next,h;</div><div class="line">&#125;E[maxn*maxn],e[maxn*maxn];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">    <span class="keyword">int</span> dis,id;</div><div class="line">    <span class="keyword">friend</span>  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node A,Node B)&#123;</div><div class="line">        <span class="keyword">return</span> A.dis &gt; B.dis;</div><div class="line">    &#125;</div><div class="line">&#125;ans[maxn];</div><div class="line"></div><div class="line">priority_queue&lt;Node&gt; que;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=tag=tot=iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    E[id].from = u;</div><div class="line">    E[id].to = v;</div><div class="line">    E[id].next = head[u];</div><div class="line">    E[id].h = h;</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    e[iid].from = u;</div><div class="line">    e[iid].to = v;</div><div class="line">    e[iid].next = hhead[u];</div><div class="line">    e[iid].h = h;</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x]=low[x]=++tot;</div><div class="line">    S.push(x);</div><div class="line">    vis[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            <span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//书本上没有加gone标记的模板会WA,故换此模板。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</div><div class="line">    <span class="comment">//记得清空访问标记。</span></div><div class="line">    <span class="built_in">memset</span>(gone,<span class="number">0</span>,<span class="keyword">sizeof</span> gone);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">        ans[i].dis=inf;</div><div class="line">        ans[i].id=i;</div><div class="line">    &#125;</div><div class="line">    ans[x].dis = <span class="number">0</span>;</div><div class="line">    que.push(ans[x]);</div><div class="line">    <span class="keyword">while</span>(!que.empty())&#123;</div><div class="line">        Node u = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="comment">//若当前点u松弛过了直接continue,不加这个会WA,同时未访问就标记。</span></div><div class="line">        <span class="keyword">if</span>(gone[u.id]) <span class="keyword">continue</span>;</div><div class="line">        gone[u.id] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[u.id];i!=<span class="number">-1</span>;i=e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> v=e[i].to;</div><div class="line">            <span class="comment">//这里的工作就是通过u可以用的边松弛它到其他各个点的距离。</span></div><div class="line">            ans[v].dis = min(ans[v].dis,u.dis+e[i].h);</div><div class="line">            <span class="comment">//松弛完之后加入队列。</span></div><div class="line">            que.push(ans[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span> &amp;&amp; m==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u,v,h;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;h);</div><div class="line">            addEdge(u,v,h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u=flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v)&#123;</div><div class="line">                addEdge2(u,v,E[i].h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">        <span class="keyword">int</span> o,d;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;o,&amp;d);</div><div class="line">            <span class="keyword">if</span>(flag[o]==flag[d])</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                Dijkstra(flag[o]);</div><div class="line">                <span class="keyword">if</span>(ans[flag[d]].dis!=inf)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[flag[d]].dis);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Nao e possivel entregar a carta\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3119&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3119&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ3592 Instantaneous Transference - Tarjan缩点+DP</title>
    <link href="http://yoursite.com/2017/04/20/POJ3592/"/>
    <id>http://yoursite.com/2017/04/20/POJ3592/</id>
    <published>2017-04-20T04:39:47.000Z</published>
    <updated>2017-04-20T10:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=3592" target="_blank" rel="external">http://poj.org/problem?id=3592</a></p>
<font size="4">Description</font>

<p>It was long ago when we played the game Red Alert. There is a magic function for the game objects which is called instantaneous transfer. When an object uses this magic function, it will be transferred to the specified point immediately, regardless of how far it is.</p>
<p>Now there is a mining area, and you are driving an ore-miner truck. Your mission is to take the maximum ores in the field.</p>
<p>The ore area is a rectangle region which is composed by n × m small squares, some of the squares have numbers of ores, while some do not. The ores can’t be regenerated after taken.</p>
<p>The starting position of the ore-miner truck is the northwest corner of the field. It must move to the eastern or southern adjacent square, while it can not move to the northern or western adjacent square. And some squares have magic power that can instantaneously transfer the truck to a certain square specified. However, as the captain of the ore-miner truck, you can decide whether to use this magic power or to stay still. One magic power square will never lose its magic power; you can use the magic power whenever you get there.</p>
<font size="4">Input</font>

<p>The first line of the input is an integer T which indicates the number of test cases.</p>
<p>For each of the test case, the first will be two integers N, M (2 ≤ N, M ≤ 40).</p>
<p>The next N lines will describe the map of the mine field. Each of the N lines will be a string that contains M characters. Each character will be an integer X (0 ≤ X ≤ 9) or a ‘<em>‘ or a ‘#’. The integer X indicates that square has X units of ores, which your truck could get them all. The ‘</em>‘ indicates this square has a magic power which can transfer truck within an instant. The ‘#’ indicates this square is full of rock and the truck can’t move on this square. You can assume that the starting position of the truck will never be a ‘#’ square.</p>
<p>As the map indicates, there are K ‘*‘ on the map. Then there follows K lines after the map. The next K lines describe the specified target coordinates for the squares with ‘*‘, in the order from north to south then west to east. (the original point is the northwest corner, the coordinate is formatted as north-south, west-east, all from 0 to N - 1,M - 1).</p>
<font size="4">Output</font>

<p>For each test case output the maximum units of ores you can take. 　</p>
<p>Sample Input</p>
<p>1<br>2 2<br>11<br>1*<br>0 0<br>Sample Output</p>
<p>3</p>
<p><strong>题意</strong></p>
<p>采矿车只能向右或者向下移动，在传送点的时候可以进行瞬间移动到地图上的某一点，传送点可以用无数次，并且采矿车不能进入到山区，问你最大采矿量是多少。</p>
<p><strong>题解</strong></p>
<p>开始的时候以为矿车不会被传送到山区，连边的时候就没有多想什么，给山区也连了出边WA了一发，果然还是太年轻。</p>
<p>建边有两种可行的方式：</p>
<p>1.对点跑DFS跑到的点全部与DFS起点连单向边（只能右、下移动），连过边的做标记，最后给传送点连边即可。</p>
<p>2.N^连边，枚举每个点可走的点直接连边即可。</p>
<p>首先将地图染色，标记不同的连通分量，每个分量的矿产总量作为缩点后SCC图的权，而且由于传送无限次，必定可以都采完。那么现在只有对SCC图跑一次最大权路就可以了。题目没有规定终点，而且SCC图是简单无环图（DAG），所以我们只要重新建图后跑一边记忆化搜索记录根（起点所在的连通分量）到叶子结点路劲的权值和，DP出最大值就可以了。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2500</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> id,n,m,G[<span class="number">45</span>][<span class="number">45</span>],head[maxn],transnum[maxn],iid,hhead[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],flag[maxn],tot,vis[maxn],tag,w[maxn],dp[maxn];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,next,to;</div><div class="line">&#125;E[maxn&lt;&lt;<span class="number">2</span>],e[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=<span class="number">0</span>,tag=<span class="number">0</span>,tot=<span class="number">0</span>,iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(transnum,<span class="number">0</span>,<span class="keyword">sizeof</span> transnum);</div><div class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span> w);</div><div class="line">    <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x*m + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; G[x][y]!=<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    E[id].from=u;</div><div class="line">    E[id].to=v;</div><div class="line">    E[id].next=head[u];</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    e[iid].from=u;</div><div class="line">    e[iid].to=v;</div><div class="line">    e[iid].next=hhead[u];</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askw</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> y = num % m ;</div><div class="line">    <span class="keyword">int</span> x = (num-y)/m ;</div><div class="line">    <span class="keyword">if</span>(G[x][y]&gt;<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> G[x][y];</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x] = low[x] = ++tot;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    S.push(x);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            w[tag] += askw(now);</div><div class="line">            <span class="keyword">if</span>(now == x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//记忆化DFS跑最短路用的</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[x]&gt;<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> dp[x];</div><div class="line">    dp[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[x];i!=<span class="number">-1</span>;i=e[i].next)</div><div class="line">        dp[x]=max(dp[x],dfs(e[i].to));</div><div class="line">    dp[x]+=w[x];</div><div class="line">    <span class="keyword">return</span> dp[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">0</span>;cas&lt;v;++cas)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">char</span> temp[maxn];</div><div class="line">        <span class="keyword">int</span> num,transcnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s\n"</span>,temp);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</div><div class="line">                <span class="keyword">if</span>(temp[j]==<span class="string">'#'</span>)</div><div class="line">                    G[i][j]=<span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(temp[j] == <span class="string">'*'</span>)&#123;</div><div class="line">                    transcnt++;</div><div class="line">                    G[i][j]=<span class="number">0</span>;</div><div class="line">                    transnum[transcnt]=point(i,j);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    num=temp[j]-<span class="string">'0'</span>;</div><div class="line">                    G[i][j]=num;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//建立图内连通。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;++x)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;++y) &#123;</div><div class="line">                <span class="keyword">if</span>(G[x][y]!=<span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</div><div class="line">                        <span class="keyword">int</span> tx = x + dx[k], ty = y + dy[k];</div><div class="line">                        <span class="keyword">if</span> (judge(tx, ty) &amp;&amp; G[tx][ty] != <span class="number">-1</span>) &#123;</div><div class="line">                            addEdge(point(x, y), point(tx, ty));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="comment">//建立传送门。</span></div><div class="line">        <span class="keyword">int</span> u,r,pnum;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=transcnt;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;r);</div><div class="line">            pnum = point(u,r);</div><div class="line">            addEdge(transnum[i],pnum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> total = maxn;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="comment">//建立缩点图跑最长路用。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u = flag[E[i].from],r=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=r)</div><div class="line">                addEdge2(u,r);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//记忆化DFS跑DAG最短路（DP）。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)</div><div class="line">            dp[i]=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> ans = dfs(flag[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3592&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ2186 Popular Cow - Tarjan染色缩点</title>
    <link href="http://yoursite.com/2017/04/20/POJ2186/"/>
    <id>http://yoursite.com/2017/04/20/POJ2186/</id>
    <published>2017-04-20T04:09:45.000Z</published>
    <updated>2017-04-20T10:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=2186" target="_blank" rel="external">http://poj.org/problem?id=2186</a></p>
<font size="4">Description</font>

<p>Every cow’s dream is to become the most popular cow in the herd. In a herd of N (1 &lt;= N &lt;= 10,000) cows, you are given up to M (1 &lt;= M &lt;= 50,000) ordered pairs of the form (A, B) that tell you that cow A thinks that cow B is popular. Since popularity is transitive, if A thinks B is popular and B thinks C is popular, then A will also think that C is<br>popular, even if this is not explicitly specified by an ordered pair in the input. Your task is to compute the number of cows that are considered popular by every other cow. </p>
<font size="4">Input</font>

<ul>
<li><p>Line 1: Two space-separated integers, N and M </p>
</li>
<li><p>Lines 2..1+M: Two space-separated numbers A and B, meaning that A thinks B is popular.<br>Output</p>
</li>
<li><p>Line 1: A single integer that is the number of cows who are considered popular by every other cow.<br>Sample Input</p>
</li>
</ul>
<p>3 3<br>1 2<br>2 1<br>2 3</p>
<font size="4">Sample Output</font>

<p>1</p>
<font size="4">Hint</font>

<p>Cow 3 is the only cow of high popularity. </p>
<p><strong>题意</strong></p>
<p>草原上有一群牛，相互之前都存在着崇拜单向的崇拜关系，这种崇拜存在着传递性即A崇拜B且B崇拜C的时候A也崇拜C，现在要你求出那些牛是被所有的牛崇拜的。</p>
<p><strong>题解</strong></p>
<p>由题意可以知道当成为环的时候环内所有牛都是相互崇拜的，那么被所有牛崇拜的牛必定在一个最大的联通分量里面，并且出度为0。因为缩点后，如果出度为0的点的数目大于1的时候必定存在出度等于0的任意二者不能被对方所崇拜，与题意“被所有其他牛崇拜”不符合。同时，由于缩点后形成具有简单有向无环图，所以可以知道这个出度为0的唯一点必定可以由其他所有点得到，满足题意所述的“被所有其他牛崇拜”。所以只要输出这个出度为0的连通分量中牛的数目就可以了。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; E[maxn],e[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"><span class="keyword">int</span> n,m,tag=<span class="number">1</span>;  <span class="comment">//tag用来记录当前编号到哪里。</span></div><div class="line"><span class="keyword">int</span> vis[maxn],dfn[maxn],low[maxn],tot,flag[maxn],out[maxn]; <span class="comment">//flag[i]=点编号，用于缩图,w[maxn]用于记录缩图后的点权。</span></div><div class="line"><span class="keyword">int</span> found[maxn]; <span class="comment">//用来在寻找答案时标记已经寻找过的flag</span></div><div class="line"></div><div class="line"><span class="comment">//利用tarjan进行染色处理。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	dfn[x]=low[x]=++tot;</div><div class="line">	vis[x]=<span class="number">1</span>;</div><div class="line">	S.push(x);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E[x].size();++i)&#123;</div><div class="line">		<span class="keyword">int</span> v=E[x][i];</div><div class="line">		<span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">			tarjan(v);	</div><div class="line">		    low[x]=min(low[v],low[x]);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//访问过了不在栈中的要继续维护,即是返回边。</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">		  low[x]=min(low[v],dfn[x]);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//弹到最后自己出来就已经确定好了一个连通分量。</span></div><div class="line">	<span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> now = S.top();</div><div class="line">			++cnt;</div><div class="line">			vis[now]=<span class="number">0</span>;</div><div class="line">			S.pop();</div><div class="line">			flag[now]=tag;</div><div class="line">			<span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		++tag;	<span class="comment">//继续下一个点编号。</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">	<span class="keyword">int</span> a,b;</div><div class="line">	<span class="comment">//建立两个单向图比较快，一个记录它崇拜谁，一个是谁崇拜它(处理后找最大点)。</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">		E[a].push_back(b);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!dfn[i])</div><div class="line">		  tarjan(i);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//Tarjan染色后进行统计操作。</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;E[i].size();++j)&#123;</div><div class="line">			<span class="keyword">int</span> v=E[i][j];</div><div class="line">			<span class="keyword">if</span>(flag[i]!=flag[v])</div><div class="line">				++out[flag[i]];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mark,num=<span class="number">0</span>,ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tag;++i)</div><div class="line">	  <span class="keyword">if</span>(out[i]==<span class="number">0</span>)</div><div class="line">		++num,mark=i;</div><div class="line">    <span class="comment">//如果只有一个联通分量出度为0，这里面的所有牛肯定都被其他所有牛崇拜。</span></div><div class="line">	<span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">			<span class="keyword">if</span>(flag[i]==num)</div><div class="line">			  ++ans;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2186&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=2186&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
</feed>
