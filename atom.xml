<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HysonQAQ</title>
  <subtitle>很卑微，不努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-23T07:52:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hyson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) C -Mike and gcd problem 数论 GCD</title>
    <link href="http://yoursite.com/2017/04/22/CF410C/"/>
    <id>http://yoursite.com/2017/04/22/CF410C/</id>
    <published>2017-04-22T11:42:31.000Z</published>
    <updated>2017-04-23T07:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/C" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/C</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has a sequence A = [a1, a2, …, an] of length n. He considers the sequence B = [b1, b2, …, bn] beautiful if the gcd of all its elements is bigger than 1, i.e. .</p>
<p>Mike wants to change his sequence in order to make it beautiful. In one move he can choose an index i (1 ≤ i &lt; n), delete numbers ai, ai + 1 and put numbers ai - ai + 1, ai + ai + 1 in their place instead, in this order. He wants perform as few operations as possible. Find the minimal number of operations to make sequence A beautiful if it’s possible, or tell him that it is impossible to do so.</p>
<p> is the biggest non-negative number d such that d divides bi for every i (1 ≤ i ≤ n).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains a single integer n (2 ≤ n ≤ 100 000) — length of sequence A.</p>
<p>The second line contains n space-separated integers a1, a2, …, an (1 ≤ ai ≤ 109) — elements of sequence A.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Output on the first line “YES” (without quotes) if it is possible to make sequence A beautiful by performing operations described above, and “NO” (without quotes) otherwise.</p>
<p>If the answer was “YES”, output the minimal number of moves needed to make sequence A beautiful.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>1 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>YES<br>1</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一串数，如果能够通过N次操作使他们的gcd&gt;1,那么输出YES，并给出最少操作次数，否则输出NO。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以通过推理证明得一次操作将会导致前后两个数字的gcd增长一倍，那么容易知道现在要求的就是把所有数字的gcd变成2，而互质的时候是1，最快变成2的办法就是找出所有连起来的奇数，对起一个数字进行操作，使他们两个都变成偶数，最后找出落单的奇数，容易知道可以通过对其操作两次让它变为偶数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x%y!=<span class="number">0</span>) <span class="keyword">return</span> gcd(y,x%y);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">int</span> g=<span class="number">0</span>,temp;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</div><div class="line">		g=gcd(g,temp);</div><div class="line">		a[i]=temp&amp;<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(g&gt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"YES\n0\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i]&amp;&amp;a[i+<span class="number">1</span>])&#123;</div><div class="line">			a[i]=!a[i],a[i+<span class="number">1</span>]=!a[i+<span class="number">1</span>];</div><div class="line">			ans++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">		<span class="keyword">if</span>(a[i]) ans+=<span class="number">2</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"YES\n%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/C&quot; targe
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>POJ3348 Cows - 求凸包面积</title>
    <link href="http://yoursite.com/2017/04/22/POJ3348/"/>
    <id>http://yoursite.com/2017/04/22/POJ3348/</id>
    <published>2017-04-22T10:44:57.000Z</published>
    <updated>2017-04-22T10:50:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=3348" target="_blank" rel="external">http://poj.org/problem?id=3348</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Your friend to the south is interested in building fences and turning plowshares into swords. In order to help with his overseas adventure, they are forced to save money on buying fence posts by using trees as fence posts wherever possible. Given the locations of some trees, you are to help farmers try to create the largest pasture that is possible. Not all the trees will need to be used.</p>
<p>However, because you will oversee the construction of the pasture yourself, all the farmers want to know is how many cows they can put in the pasture. It is well known that a cow needs at least 50 square metres of pasture to survive.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of input contains a single integer, n (1 ≤ n ≤ 10000), containing the number of trees that grow on the available land. The next n lines contain the integer coordinates of each tree given as two integers x and y separated by one space (where -1000 ≤ x, y ≤ 1000). The integer coordinates correlate exactly to distance in metres (e.g., the distance between coordinate (10; 11) and (11; 11) is one metre).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>You are to output a single integer value, the number of cows that can survive on the largest field you can construct using the available trees.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>0 0<br>0 101<br>75 0<br>75 101</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>151</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>你的朋友要造一个牧场，现在给出N棵树，要求你把这些树都包括在牧场里面，造一个建设长度最短的牧场。此外他还想养牛，已知道一头健康成长需要50平方米的空间，问这个牧场能养多少头牛？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>凸包点确定之后从起始点开始对边进行两两叉乘再除以2得到每个三角形的面积，加起来就是凸包的面积，最后除50输出答案即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn= <span class="number">10010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> x,y;</div><div class="line">&#125;p[maxn],P[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(node A,node B,node C)</span></span>&#123;	</div><div class="line">	<span class="keyword">return</span> (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node &amp;A,node &amp;B)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> pp = X(p[<span class="number">0</span>],A,B);</div><div class="line">	<span class="keyword">if</span>(pp&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(pp&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> len(p[<span class="number">0</span>],A)&lt;len(p[<span class="number">0</span>],B);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</div><div class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(p[i].x&lt;p[<span class="number">0</span>].x) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(p[i].x==p[<span class="number">0</span>].x &amp;&amp; p[i].y&lt;p[<span class="number">0</span>].y) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">		&#125;</div><div class="line">		sort(p+<span class="number">1</span>,p+n,cmp);</div><div class="line">		P[<span class="number">0</span>]=p[<span class="number">0</span>];</div><div class="line">		P[<span class="number">1</span>]=p[<span class="number">1</span>];</div><div class="line">		<span class="keyword">int</span> top=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">while</span>(top&gt;<span class="number">0</span> &amp;&amp; X(P[top<span class="number">-1</span>],P[top],p[i])&lt;=<span class="number">0</span>) top--;</div><div class="line">			top++;</div><div class="line">			P[top]=p[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top;++i)&#123;</div><div class="line">			ans+=<span class="built_in">fabs</span>(X(P[<span class="number">0</span>],P[i],P[i+<span class="number">1</span>]))/<span class="number">2.0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">50</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3348&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
      <category term="计算几何 凸包" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95-%E5%87%B8%E5%8C%85/"/>
    
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>HDU1348 Wall - Granham算法模板题</title>
    <link href="http://yoursite.com/2017/04/22/HDU1348/"/>
    <id>http://yoursite.com/2017/04/22/HDU1348/</id>
    <published>2017-04-22T10:33:24.000Z</published>
    <updated>2017-04-22T10:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1348" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1348</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King’s castle. The King was so greedy, that he would not listen to his Architect’s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.<br>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King’s requirements.</p>
<p>The task is somewhat simplified by the fact, that the King’s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle’s vertices in feet.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input file contains two integer numbers N and L separated by a space. N (3 &lt;= N &lt;= 1000) is the number of vertices in the King’s castle, and L (1 &lt;= L &lt;= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.</p>
<p>Next N lines describe coordinates of castle’s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &lt;= Xi, Yi &lt;= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King’s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.</p>
<p>This problem contains multiple test cases!</p>
<p>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.</p>
<p>The output format consists of N output blocks. There is a blank line between output blocks.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>1</p>
<p>9 100<br>200 400<br>300 400<br>300 300<br>400 300<br>400 400<br>500 400<br>500 200<br>350 200<br>200 200</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1628</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>贪婪的国王想要建造城墙，并且城墙距离它的城堡要保持大于等于L的距离，现在给出N个点来刻画他的城堡，问最少建造城墙的长度为多少？<br>注意：这个城墙必须是凸的。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然通过凸包可以求出符合要求的最小长度，但是问题在于平移边之后还差一段长度，显然可以证得这段长度刚好就是以L为圆心画圆的圆周长。所以最终的答案就是凸包长度加上这段圆弧的长度。记得加上最后一个点和起始点的连线。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Graham Scan算法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn= <span class="number">1001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span> (<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> x,y;</div><div class="line">&#125;p[maxn],P[maxn];</div><div class="line"></div><div class="line"><span class="comment">//求取向量叉积。</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">X</span><span class="params">(node A,node B,node C)</span></span>&#123;	</div><div class="line">	<span class="keyword">return</span> (B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求取长度。</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>((A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//一定要定义sort的cmp操作。</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span>&#123;</div><div class="line">	<span class="keyword">double</span> pp = X(p[<span class="number">0</span>],A,B);</div><div class="line">	<span class="keyword">if</span>(pp&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span>(pp&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> len(p[<span class="number">0</span>],A)&lt;len(p[<span class="number">0</span>],B);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> v,n;</div><div class="line">	<span class="keyword">double</span> ans,l;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">0</span>;cas&lt;v;++cas)&#123;</div><div class="line">		<span class="keyword">if</span>(cas) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;n,&amp;l);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) </div><div class="line">		  <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</div><div class="line">		ans=<span class="number">2</span>*pi*l;</div><div class="line">		<span class="comment">//先进行特判。</span></div><div class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans+len(p[<span class="number">0</span>],p[<span class="number">1</span>]));</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//选取最左下的点。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</div><div class="line">				<span class="keyword">if</span>(p[i].x&lt;p[<span class="number">0</span>].x) swap(p[i],p[<span class="number">0</span>]);</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(p[i].x==p[<span class="number">0</span>].x &amp;&amp; p[i].y&lt;p[<span class="number">0</span>].y)</div><div class="line">					swap(p[i],p[<span class="number">0</span>]);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//建系后其他点按照极坐标编号。</span></div><div class="line">			sort(p+<span class="number">1</span>,p+n,cmp);</div><div class="line">			P[<span class="number">0</span>]=p[<span class="number">0</span>];</div><div class="line">			P[<span class="number">1</span>]=p[<span class="number">1</span>]; <span class="comment">//容易证明这两个点一定在凸包当中。</span></div><div class="line">			<span class="keyword">int</span> top=<span class="number">1</span>; <span class="comment">//模拟栈的栈顶。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</div><div class="line">				<span class="comment">//检测到左拐入栈，检测到右拐不断出栈。</span></div><div class="line">				<span class="keyword">while</span>(top&gt;<span class="number">0</span> &amp;&amp; X(P[top<span class="number">-1</span>],P[top],p[i])&lt;=<span class="number">0</span>) top--;</div><div class="line">				++top;</div><div class="line">				P[top]=p[i];</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//对加入到凸包的点进行求边长。</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top;++i)&#123;</div><div class="line">			  ans+=len(P[i],P[i+<span class="number">1</span>]);</div><div class="line">			&#125;</div><div class="line">			ans+=len(P[<span class="number">0</span>],P[top]);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,ans);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1348&quot; targe
    
    </summary>
    
      <category term="计算几何 凸包" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95-%E5%87%B8%E5%8C%85/"/>
    
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) B - Mike and strings 水题</title>
    <link href="http://yoursite.com/2017/04/22/CF410B/"/>
    <id>http://yoursite.com/2017/04/22/CF410B/</id>
    <published>2017-04-22T08:58:53.000Z</published>
    <updated>2017-04-22T09:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/B" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/B</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has n strings s1, s2, …, sn each consisting of lowercase English letters. In one move he can choose a string si, erase the first character and append it to the end of the string. For example, if he has the string “coolmike”, in one move he can transform it into the string “oolmikec”.</p>
<p>Now Mike asks himself: what is minimal number of moves that he needs to do in order to make all the strings equal?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains integer n (1 ≤ n ≤ 50) — the number of strings.</p>
<p>This is followed by n lines which contain a string each. The i-th line corresponding to string si. Lengths of strings are equal. Lengths of each string is positive and don’t exceed 50.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print the minimal number of moves Mike needs in order to make all the strings equal or print  - 1 if there is no solution.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>xzzwo<br>zwoxz<br>zzwox<br>xzzwo</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>5</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定N个串，现在支持一种操作，把串的第一个字母放到串的最后面，问你最少经过几次操作可以使所有串都相同。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>数据输入量比较小，所以可以直接暴力枚举每个串，计算出以哪个串为标准串时，其他串变成它的总代价最小，可以在for中加入发现有串不相等（不可能变成另一个串）的时候跳出循环的条件剪掉部分操作，也可以不加，反正暴力就对了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60</span>;</div><div class="line"><span class="keyword">char</span> s[maxn][maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn][maxn],ret[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> judge = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> cnt, okk;</div><div class="line">    <span class="keyword">int</span> tonext = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> noans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; judge; ++i) &#123;</div><div class="line">        okk = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; judge; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            tonext = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len &amp;&amp; judge &amp;&amp; !tonext; ++k) &#123;</div><div class="line">                <span class="keyword">if</span> (s[i][<span class="number">0</span>] == s[j][k]) &#123;</div><div class="line">                    cnt = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = k; judge; ++l) &#123;</div><div class="line">                        <span class="keyword">if</span> (s[i][cnt] == s[j][l % len]) &#123;</div><div class="line">                            cnt++;</div><div class="line">                            <span class="keyword">if</span> (cnt == len) &#123;</div><div class="line">                                okk++;</div><div class="line">                                tonext = <span class="number">1</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (tonext)</div><div class="line">                        ans[i][j] = k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (okk != n - <span class="number">1</span>)</div><div class="line">            noans = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (noans)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</div><div class="line">                ret[i] += ans[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(ret, ret + n);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ret[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/B&quot; targe
    
    </summary>
    
      <category term="其他 暴力" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%9A%B4%E5%8A%9B/"/>
    
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 410 (Div. 2) A - Mike and palindrome 水题</title>
    <link href="http://yoursite.com/2017/04/22/CF410A/"/>
    <id>http://yoursite.com/2017/04/22/CF410A/</id>
    <published>2017-04-22T08:44:02.000Z</published>
    <updated>2017-04-22T09:15:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://codeforces.com/problemset/problem/798/A" target="_blank" rel="external">http://codeforces.com/problemset/problem/798/A</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Mike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome.</p>
<p>A palindrome is a string that reads the same backward as forward, for example strings “z”, “aaa”, “aba”, “abccba” are palindromes, but strings “codeforces”, “reality”, “ab” are not.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first and single line contains string s (1 ≤ |s| ≤ 15).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print “YES” (without quotes) if Mike can change exactly one character so that the resulting string is palindrome or “NO” (without quotes) otherwise.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>abccaa</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>YES</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>回文串的定义大家都知道，现在给出一个串问你能不能通过一次操作使它变为回文串，而且任何情况下都要操作一次。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>WA了两次才发现Trick，这道题一定要注意特判已经是回文串的时候是单数的情况，因为总可以改变中间的字符使它依旧是回文串。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-i;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(s[i]!=s[len-i<span class="number">-1</span>])</div><div class="line">		  ans++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(ans==<span class="number">1</span> || len==<span class="number">1</span> || (ans==<span class="number">0</span> &amp;&amp; len%<span class="number">2</span>))</div><div class="line">	  <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	  <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/798/A&quot; targe
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>HDU3072 Intelligence System - Tarjan缩点+贪心</title>
    <link href="http://yoursite.com/2017/04/22/HDU3072/"/>
    <id>http://yoursite.com/2017/04/22/HDU3072/</id>
    <published>2017-04-22T03:02:45.000Z</published>
    <updated>2017-04-22T04:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3072" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3072</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>After a day, ALPCs finally complete their ultimate intelligence system, the purpose of it is of course for ACM … …<br>Now, kzc_tc, the head of the Intelligence Department (his code is once 48, but now 0), is sudden obtaining important information from one Intelligence personnel. That relates to the strategic direction and future development of the situation of ALPC. So it need for emergency notification to all Intelligence personnel, he decides to use the intelligence system (kzc_tc inform one, and the one inform other one or more, and so on. Finally the information is known to all).<br>We know this is a dangerous work. Each transmission of the information can only be made through a fixed approach, from a fixed person to another fixed, and cannot be exchanged, but between two persons may have more than one way for transferring. Each act of the transmission cost Ci (1 &lt;= Ci &lt;= 100000), the total cost of the transmission if inform some ones in our ALPC intelligence agency is their costs sum.<br>Something good, if two people can inform each other, directly or indirectly through someone else, then they belong to the same branch (kzc_tc is in one branch, too!). This case, it’s very easy to inform each other, so that the cost between persons in the same branch will be ignored. The number of branch in intelligence agency is no more than one hundred.<br>As a result of the current tensions of ALPC’s funds, kzc_tc now has all relationships in his Intelligence system, and he want to write a program to achieve the minimum cost to ensure that everyone knows this intelligence.<br>It’s really annoying!</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There are several test cases.<br>In each case, the first line is an Integer N (0&lt; N &lt;= 50000), the number of the intelligence personnel including kzc_tc. Their code is numbered from 0 to N-1. And then M (0&lt;= M &lt;= 100000), the number of the transmission approach.<br>The next M lines, each line contains three integers, X, Y and C means person X transfer information to person Y cost C. </p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The minimum total cost for inform everyone.<br>Believe kzc_tc’s working! There always is a way for him to communicate with all other intelligence personnel.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3 3<br>0 1 100<br>1 2 50<br>0 2 100<br>3 3<br>0 1 100<br>1 2 50<br>2 1 100<br>2 2<br>0 1 50<br>0 1 100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>150<br>100<br>50</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>大哥要给小弟们传话，传递方向固定，不能反向，传话代价为0当且仅当他们在同一个连通分量中，现在要求大哥给所有小弟传话的最小代价。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于传递是单向的，所以要求的是一个最小树形图（和最小生成树区分）。Tarjan缩点后，显然可以采用朱刘算法来解决，但是题目告诉我们这个最小树形图必定存在，那么我们可以简单地采用贪心的思想每个点选择最小的入边即可（这样选择N-1条边候得到的图必定是最小树形图）。注意，选择入边最快的方法是把所有边反向建图，然后遍历每一条出边来选择。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">100000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,m,id,head[maxn],flag[maxn],tot,tag,dfn[maxn],low[maxn],vis[maxn];</div><div class="line"><span class="keyword">int</span> iid,hhead[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,to,next,h;</div><div class="line">&#125;E[maxm],e[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=tag=tot=iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    E[id].from = u;</div><div class="line">    E[id].to = v;</div><div class="line">    E[id].next = head[u];</div><div class="line">    E[id].h = h;</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    e[iid].from = u;</div><div class="line">    e[iid].to = v;</div><div class="line">    e[iid].next = hhead[u];</div><div class="line">    e[iid].h = h;</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x]=low[x]=++tot;</div><div class="line">    S.push(x);</div><div class="line">    vis[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            <span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u,v,h;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;h);</div><div class="line">            addEdge(u,v,h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u=flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v)&#123;</div><div class="line">                addEdge2(v,u,E[i].h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp,ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            temp=INT_MAX;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=hhead[i];j!=<span class="number">-1</span>;j=e[j].next)&#123;</div><div class="line">                temp=min(temp,e[j].h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(temp!=INT_MAX)</div><div class="line">                ans+=temp;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3072&quot; targe
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>HDU3639 Hawk-and-Chicken - Tarjan缩点+DFS求树权和</title>
    <link href="http://yoursite.com/2017/04/22/HDU3639/"/>
    <id>http://yoursite.com/2017/04/22/HDU3639/</id>
    <published>2017-04-22T02:47:16.000Z</published>
    <updated>2017-04-22T04:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3639" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=3639</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Kids in kindergarten enjoy playing a game called Hawk-and-Chicken. But there always exists a big problem: every kid in this game want to play the role of Hawk.<br>So the teacher came up with an idea: Vote. Every child have some nice handkerchiefs, and if he/she think someone is suitable for the role of Hawk, he/she gives a handkerchief to this kid, which means this kid who is given the handkerchief win the support. Note the support can be transmitted. Kids who get the most supports win in the vote and able to play the role of Hawk.(A note:if A can win<br>support from B(A != B) A can win only one support from B in any case the number of the supports transmitted from B to A are many. And A can’t win the support from himself in any case.<br>If two or more kids own the same number of support from others, we treat all of them as winner.<br>Here’s a sample: 3 kids A, B and C, A gives a handkerchief to B, B gives a handkerchief to C, so C wins 2 supports and he is choosen to be the Hawk.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There are several test cases. First is a integer T(T &lt;= 50), means the number of test cases.<br>Each test case start with two integer n, m in a line (2 &lt;= n &lt;= 5000, 0 &lt;m &lt;= 30000). n means there are n children(numbered from 0 to n - 1). Each of the following m lines contains two integers A and B(A != B) denoting that the child numbered A give a handkerchief to B.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, the output should first contain one line with “Case x:”, here x means the case number start from 1. Followed by one number which is the total supports the winner(s) get.<br>Then follow a line contain all the Hawks’ number. The numbers must be listed in increasing order and separated by single spaces.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>4 3<br>3 2<br>2 0<br>2 1</p>
<p>3 3<br>1 0<br>2 1<br>0 2</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>Case 1: 2<br>0 1<br>Case 2: 2<br>0 1 2</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>小朋友之间存在着单向的支持关系，这种支持关系是可以传递的，但是要注意这种传递关系不会叠加，而且小朋友不可以自己支持自己。现在问哪个小朋友得到的支持最多，支持数是多少，如果得到支持最多的小朋友不止一个，那么把他们由大到小列出来。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>依照题意的题目显然存在环，那么利用Tarjan缩点之后求出每个点在不同的DFS树之中被访问得最多即可，当然这并不容易做到，我们可以换一个思路，反向边建图，那么DFS遍历到的所有点都必定支持该点，把这些点的权值和自己的权值加起来减去1就是得到的最多支持数（不能算自己）。最后从1到N的顺序，如果该点所在连通分量是被标记的被支持最多的连通分量则输出该点的编号保证增序，注意这题输出比较严格，不可以输出多的空格。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">30000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> id,n,m,head[maxn],iid,hhead[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],flag[maxn],tot,vis[maxn],tag,w[maxn],cur,ans[maxn],gone[maxn],mark[maxn];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,next,to;</div><div class="line">&#125;E[maxm],e[maxm];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=<span class="number">0</span>,tag=<span class="number">0</span>,tot=<span class="number">0</span>,iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span> w);</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    E[id].from=u;</div><div class="line">    E[id].to=v;</div><div class="line">    E[id].next=head[u];</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    e[iid].from=u;</div><div class="line">    e[iid].to=v;</div><div class="line">    e[iid].next=hhead[u];</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x] = low[x] = ++tot;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    S.push(x);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            w[tag]++;</div><div class="line">            <span class="keyword">if</span>(now == x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[x];i!=<span class="number">-1</span>;i=e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=e[i].to;</div><div class="line">        dfs(v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!gone[x]) &#123;</div><div class="line">        ans[cur] += w[x];</div><div class="line">        gone[x] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">1</span>;cas&lt;=p;++cas)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="comment">//建立图内连通。</span></div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            addEdge(u,v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="comment">//建立缩点图跑最长路用。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u = flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v) &#123;</div><div class="line">                addEdge2(v, u);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> most=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            <span class="built_in">memset</span>(gone,<span class="number">0</span>,<span class="keyword">sizeof</span> gone);</div><div class="line">            gone[i]=<span class="number">1</span>;</div><div class="line">            ans[i]+=w[i];</div><div class="line">            cur=i;</div><div class="line">            dfs(i);</div><div class="line">            most=max(most,ans[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(ans[i]==most) &#123;</div><div class="line">                mark[++cnt]=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas,most<span class="number">-1</span>);</div><div class="line">        <span class="keyword">int</span> first=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j)&#123;</div><div class="line">                <span class="keyword">if</span>(flag[i]==mark[j]) &#123;</div><div class="line">                   <span class="keyword">if</span>(first) &#123;</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</div><div class="line">                       first = <span class="number">0</span>;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">else</span></div><div class="line">                       <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3639&quot; targe
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>HDU1009 FatMouse&#39; Trade - 贪心</title>
    <link href="http://yoursite.com/2017/04/21/HDU1009/"/>
    <id>http://yoursite.com/2017/04/21/HDU1009/</id>
    <published>2017-04-21T04:26:55.000Z</published>
    <updated>2017-04-21T04:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1009</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<br>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]<em> a% pounds of JavaBeans if he pays F[i]</em> a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1’s. All integers are not greater than 1000.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5 3<br>7 2<br>4 3<br>5 2<br>20 3<br>25 18<br>24 15<br>15 10<br>-1 -1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>13.333<br>31.500</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>老鼠有M磅猫粮，现在想找猫换豆子，每个猫舍有Ji磅豆子，而且价值Pi磅的猫粮，老鼠每次都可以按百分比只买其中的一部分。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>基础的完全背包问题，按照J[i]/P[i]的大小进行排序，然后钱不够不能全部买走的时候只买一部分花光剩余的猫粮即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">double</span> f,p,w;</div><div class="line">&#125;point[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.w&gt;b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n))&#123;</div><div class="line">		<span class="keyword">if</span>(m==<span class="number">-1</span> || n==<span class="number">-1</span>)&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;point[i].f,&amp;point[i].p);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			point[i].w = point[i].f/point[i].p;</div><div class="line">		&#125;</div><div class="line">		sort(point,point+n,cmp);</div><div class="line">		<span class="keyword">double</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">			<span class="keyword">if</span>(m-point[i].p&gt;=<span class="number">0</span>)&#123;</div><div class="line">			  ans+=point[i].f;</div><div class="line">			  m-=point[i].p;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">			  ans+=(m/point[i].p)*point[i].f;</div><div class="line">			  <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1009&quot; targe
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="完全背包" scheme="http://yoursite.com/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>POJ3114 Countries in War - Tarjan缩点+堆优化Dijkstra</title>
    <link href="http://yoursite.com/2017/04/20/POJ3114/"/>
    <id>http://yoursite.com/2017/04/20/POJ3114/</id>
    <published>2017-04-20T05:10:24.000Z</published>
    <updated>2017-04-20T10:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=3119" target="_blank" rel="external">http://poj.org/problem?id=3119</a></p>
<font size="4">Description</font>

<p>In the year 2050, after different attempts of the UN to maintain peace in the world, the third world war broke out. The importance of industrial, commercial and military secrets obliges all the countries to use extremely sophisticated espionage services, so that each city in the world has at least one spy of each country. These spies need to communicate with other spies, informers as well as their headquarters during their actions. Unluckily there doesn’t exist a secure way for a spy to communicate during the war period, therefore the messages are always sent in code so that only the addressee is able to read the message and understand its meaning.</p>
<p>The spies use the only service that functions during the war period, the post. Each city has a postal agency where the letters are sent. The letters can be sent directly to their destination or to other postal agencies, until the letter arrives at the postal agency of the destination city, if possible.</p>
<p>The postal agency in city A can send a printed letter to the postal agency in city B if there is an agreement on sending letters, which determines the time, in hours, that a letter takes to reach city B from city A (and not necessarily the opposite). If there is no agreement between the agencies A and B, the agency A can try to send the letter to any agency so that the letter can reach its destination as early as possible</p>
<p>Some agencies are connected with electronic communication media, such as satellites and optical fibers. Before the war, these connections could reach all the agencies, making that a letter could be sent instantly. But during the period of hostilities every country starts to control electronic communication and an agency can only send a letter to another agency by electronic media (or instantly) if they are in the same country. Two agencies, A and B, are in the same country if a printed letter sent from any one of the agencies can be delivered to the other one.</p>
<p>The espionage service of your country has managed to obtain the content of all the agreements on sending messages existing in the world and desires to find out the minimum time to send a letter between different pairs of cities. Are you capable of helping them?</p>
<font size="4">Input</font>

<p>The input contains several test cases. The first line of each test case contains two integer separated by a space, N (1 ≤ N ≤ 500) and E (0 ≤ E ≤ N2), indicating the numbers of cities (numbered from 1 to N) and of agreements on sending messages, respectively. Following them, then, E lines, each containing three integers separated by spaces, X, Y and H (1 ≤ X, Y ≤ N, 1 ≤ H ≤ 1000), indicating that there exist an agreement to send a printed letter from city X to city Y, and that such a letter will be delivered in H hours.</p>
<p>After that, there will be a line with an integer K (0 ≤ K ≤ 100), the number of queries. Finally, there will be K lines, each representing a query and containing two integers separated by a space, O and D (1 ≤ O, D ≤ N). You must determine the minimum time to send a letter from city O to city D.</p>
<p>The end of the input is indicated by N = 0.</p>
<font size="4">Output</font>

<p>For each test case your program should produce K lines of output. The I-th line should contain an integer M, the minimum time, in hours, to send a letter in the I-th query. If there aren’t communication media between the cities of the query, you should print “Nao e possivel entregar a carta” (“It’s impossible to deliver the letter”).</p>
<p>Print a blank line after each test case.</p>
<font size="4">Sample Input</font>

<p>4 5<br>1 2 5<br>2 1 10<br>3 4 8<br>4 3 7<br>2 3 6<br>5<br>1 2<br>1 3<br>1 4<br>4 3<br>4 1<br>3 3<br>1 2 10<br>2 3 1<br>3 2 1<br>3<br>1 3<br>3 1<br>3 2<br>0 0</p>
<font size="4">Sample Output</font>

<p>0<br>6<br>6<br>0<br>Nao e possivel entregar a carta</p>
<p>10<br>Nao e possivel entregar a carta<br>0</p>
<p><strong>题意</strong><br>第三次世界大战爆发，现在每个城市的间谍都通过邮局进行通信交流，A、B两个点发送邮件能立刻完成当且仅当其在同一个城市中，即两个点在同一个城市当中。询问任意两点间发送邮件所需要的最短时间。</p>
<p><strong>题解</strong></p>
<p>缩点成为DAG图之后跑Dijkstra即可，白书上的模板用了很多次但是有几次包括这次WA掉了果断换模板AC之。原本以为跑Floyd能过，但要查询的重复点似乎不多，Floyd反而爆掉了，这一点比较坑。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = INT_MAX;</div><div class="line"><span class="keyword">int</span> n,m,id,head[maxn],flag[maxn],tot,tag,dfn[maxn],low[maxn],vis[maxn],gone[maxn];</div><div class="line"><span class="keyword">int</span> iid,hhead[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,to,next,h;</div><div class="line">&#125;E[maxn*maxn],e[maxn*maxn];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node&#123;</div><div class="line">    <span class="keyword">int</span> dis,id;</div><div class="line">    <span class="keyword">friend</span>  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node A,Node B)&#123;</div><div class="line">        <span class="keyword">return</span> A.dis &gt; B.dis;</div><div class="line">    &#125;</div><div class="line">&#125;ans[maxn];</div><div class="line"></div><div class="line">priority_queue&lt;Node&gt; que;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=tag=tot=iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    E[id].from = u;</div><div class="line">    E[id].to = v;</div><div class="line">    E[id].next = head[u];</div><div class="line">    E[id].h = h;</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">    e[iid].from = u;</div><div class="line">    e[iid].to = v;</div><div class="line">    e[iid].next = hhead[u];</div><div class="line">    e[iid].h = h;</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x]=low[x]=++tot;</div><div class="line">    S.push(x);</div><div class="line">    vis[x]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            <span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//书本上没有加gone标记的模板会WA,故换此模板。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!que.empty()) que.pop();</div><div class="line">    <span class="comment">//记得清空访问标记。</span></div><div class="line">    <span class="built_in">memset</span>(gone,<span class="number">0</span>,<span class="keyword">sizeof</span> gone);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)&#123;</div><div class="line">        ans[i].dis=inf;</div><div class="line">        ans[i].id=i;</div><div class="line">    &#125;</div><div class="line">    ans[x].dis = <span class="number">0</span>;</div><div class="line">    que.push(ans[x]);</div><div class="line">    <span class="keyword">while</span>(!que.empty())&#123;</div><div class="line">        Node u = que.top();</div><div class="line">        que.pop();</div><div class="line">        <span class="comment">//若当前点u松弛过了直接continue,不加这个会WA,同时未访问就标记。</span></div><div class="line">        <span class="keyword">if</span>(gone[u.id]) <span class="keyword">continue</span>;</div><div class="line">        gone[u.id] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[u.id];i!=<span class="number">-1</span>;i=e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> v=e[i].to;</div><div class="line">            <span class="comment">//这里的工作就是通过u可以用的边松弛它到其他各个点的距离。</span></div><div class="line">            ans[v].dis = min(ans[v].dis,u.dis+e[i].h);</div><div class="line">            <span class="comment">//松弛完之后加入队列。</span></div><div class="line">            que.push(ans[v]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span> &amp;&amp; m==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        init();</div><div class="line">        <span class="keyword">int</span> u,v,h;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;h);</div><div class="line">            addEdge(u,v,h);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u=flag[E[i].from],v=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=v)&#123;</div><div class="line">                addEdge2(u,v,E[i].h);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">        <span class="keyword">int</span> o,d;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;o,&amp;d);</div><div class="line">            <span class="keyword">if</span>(flag[o]==flag[d])</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                Dijkstra(flag[o]);</div><div class="line">                <span class="keyword">if</span>(ans[flag[d]].dis!=inf)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[flag[d]].dis);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Nao e possivel entregar a carta\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3119&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3119&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ3592 Instantaneous Transference - Tarjan缩点+DP</title>
    <link href="http://yoursite.com/2017/04/20/POJ3592/"/>
    <id>http://yoursite.com/2017/04/20/POJ3592/</id>
    <published>2017-04-20T04:39:47.000Z</published>
    <updated>2017-04-20T10:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=3592" target="_blank" rel="external">http://poj.org/problem?id=3592</a></p>
<font size="4">Description</font>

<p>It was long ago when we played the game Red Alert. There is a magic function for the game objects which is called instantaneous transfer. When an object uses this magic function, it will be transferred to the specified point immediately, regardless of how far it is.</p>
<p>Now there is a mining area, and you are driving an ore-miner truck. Your mission is to take the maximum ores in the field.</p>
<p>The ore area is a rectangle region which is composed by n × m small squares, some of the squares have numbers of ores, while some do not. The ores can’t be regenerated after taken.</p>
<p>The starting position of the ore-miner truck is the northwest corner of the field. It must move to the eastern or southern adjacent square, while it can not move to the northern or western adjacent square. And some squares have magic power that can instantaneously transfer the truck to a certain square specified. However, as the captain of the ore-miner truck, you can decide whether to use this magic power or to stay still. One magic power square will never lose its magic power; you can use the magic power whenever you get there.</p>
<font size="4">Input</font>

<p>The first line of the input is an integer T which indicates the number of test cases.</p>
<p>For each of the test case, the first will be two integers N, M (2 ≤ N, M ≤ 40).</p>
<p>The next N lines will describe the map of the mine field. Each of the N lines will be a string that contains M characters. Each character will be an integer X (0 ≤ X ≤ 9) or a ‘<em>‘ or a ‘#’. The integer X indicates that square has X units of ores, which your truck could get them all. The ‘</em>‘ indicates this square has a magic power which can transfer truck within an instant. The ‘#’ indicates this square is full of rock and the truck can’t move on this square. You can assume that the starting position of the truck will never be a ‘#’ square.</p>
<p>As the map indicates, there are K ‘*‘ on the map. Then there follows K lines after the map. The next K lines describe the specified target coordinates for the squares with ‘*‘, in the order from north to south then west to east. (the original point is the northwest corner, the coordinate is formatted as north-south, west-east, all from 0 to N - 1,M - 1).</p>
<font size="4">Output</font>

<p>For each test case output the maximum units of ores you can take. 　</p>
<p>Sample Input</p>
<p>1<br>2 2<br>11<br>1*<br>0 0<br>Sample Output</p>
<p>3</p>
<p><strong>题意</strong></p>
<p>采矿车只能向右或者向下移动，在传送点的时候可以进行瞬间移动到地图上的某一点，传送点可以用无数次，并且采矿车不能进入到山区，问你最大采矿量是多少。</p>
<p><strong>题解</strong></p>
<p>开始的时候以为矿车不会被传送到山区，连边的时候就没有多想什么，给山区也连了出边WA了一发，果然还是太年轻。</p>
<p>建边有两种可行的方式：</p>
<p>1.对点跑DFS跑到的点全部与DFS起点连单向边（只能右、下移动），连过边的做标记，最后给传送点连边即可。</p>
<p>2.N^连边，枚举每个点可走的点直接连边即可。</p>
<p>首先将地图染色，标记不同的连通分量，每个分量的矿产总量作为缩点后SCC图的权，而且由于传送无限次，必定可以都采完。那么现在只有对SCC图跑一次最大权路就可以了。题目没有规定终点，而且SCC图是简单无环图（DAG），所以我们只要重新建图后跑一边记忆化搜索记录根（起点所在的连通分量）到叶子结点路劲的权值和，DP出最大值就可以了。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2500</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> id,n,m,G[<span class="number">45</span>][<span class="number">45</span>],head[maxn],transnum[maxn],iid,hhead[maxn];</div><div class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],flag[maxn],tot,vis[maxn],tag,w[maxn],dp[maxn];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> from,next,to;</div><div class="line">&#125;E[maxn&lt;&lt;<span class="number">2</span>],e[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    id=<span class="number">0</span>,tag=<span class="number">0</span>,tot=<span class="number">0</span>,iid=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</div><div class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(hhead,<span class="number">-1</span>,<span class="keyword">sizeof</span> hhead);</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</div><div class="line">    <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span> flag);</div><div class="line">    <span class="built_in">memset</span>(transnum,<span class="number">0</span>,<span class="keyword">sizeof</span> transnum);</div><div class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span> w);</div><div class="line">    <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x*m + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; G[x][y]!=<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    E[id].from=u;</div><div class="line">    E[id].to=v;</div><div class="line">    E[id].next=head[u];</div><div class="line">    head[u]=id++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    e[iid].from=u;</div><div class="line">    e[iid].to=v;</div><div class="line">    e[iid].next=hhead[u];</div><div class="line">    hhead[u]=iid++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askw</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> y = num % m ;</div><div class="line">    <span class="keyword">int</span> x = (num-y)/m ;</div><div class="line">    <span class="keyword">if</span>(G[x][y]&gt;<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> G[x][y];</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfn[x] = low[x] = ++tot;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    S.push(x);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i!=<span class="number">-1</span>;i=E[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> v=E[i].to;</div><div class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</div><div class="line">            tarjan(v);</div><div class="line">            low[x] = min(low[x], low[v]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">            low[x]=min(low[x],dfn[v]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</div><div class="line">        ++tag;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> now=S.top();</div><div class="line">            S.pop();</div><div class="line">            vis[now]=<span class="number">0</span>;</div><div class="line">            flag[now]=tag;</div><div class="line">            w[tag] += askw(now);</div><div class="line">            <span class="keyword">if</span>(now == x) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//记忆化DFS跑最短路用的</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[x]&gt;<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> dp[x];</div><div class="line">    dp[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hhead[x];i!=<span class="number">-1</span>;i=e[i].next)</div><div class="line">        dp[x]=max(dp[x],dfs(e[i].to));</div><div class="line">    dp[x]+=w[x];</div><div class="line">    <span class="keyword">return</span> dp[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">0</span>;cas&lt;v;++cas)&#123;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">char</span> temp[maxn];</div><div class="line">        <span class="keyword">int</span> num,transcnt=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s\n"</span>,temp);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</div><div class="line">                <span class="keyword">if</span>(temp[j]==<span class="string">'#'</span>)</div><div class="line">                    G[i][j]=<span class="number">-1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(temp[j] == <span class="string">'*'</span>)&#123;</div><div class="line">                    transcnt++;</div><div class="line">                    G[i][j]=<span class="number">0</span>;</div><div class="line">                    transnum[transcnt]=point(i,j);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    num=temp[j]-<span class="string">'0'</span>;</div><div class="line">                    G[i][j]=num;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//建立图内连通。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;++x)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;++y) &#123;</div><div class="line">                <span class="keyword">if</span>(G[x][y]!=<span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</div><div class="line">                        <span class="keyword">int</span> tx = x + dx[k], ty = y + dy[k];</div><div class="line">                        <span class="keyword">if</span> (judge(tx, ty) &amp;&amp; G[tx][ty] != <span class="number">-1</span>) &#123;</div><div class="line">                            addEdge(point(x, y), point(tx, ty));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="comment">//建立传送门。</span></div><div class="line">        <span class="keyword">int</span> u,r,pnum;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=transcnt;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;r);</div><div class="line">            pnum = point(u,r);</div><div class="line">            addEdge(transnum[i],pnum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> total = maxn;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;++i)</div><div class="line">            <span class="keyword">if</span>(!dfn[i])</div><div class="line">                tarjan(i);</div><div class="line">        <span class="comment">//建立缩点图跑最长路用。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;++i)&#123;</div><div class="line">            u = flag[E[i].from],r=flag[E[i].to];</div><div class="line">            <span class="keyword">if</span>(u!=r)</div><div class="line">                addEdge2(u,r);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//记忆化DFS跑DAG最短路（DP）。</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tag;++i)</div><div class="line">            dp[i]=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> ans = dfs(flag[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=3592&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ2186 Popular Cow - Tarjan染色缩点</title>
    <link href="http://yoursite.com/2017/04/20/POJ2186/"/>
    <id>http://yoursite.com/2017/04/20/POJ2186/</id>
    <published>2017-04-20T04:09:45.000Z</published>
    <updated>2017-04-20T10:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4">题目连接</font>

<p><a href="http://poj.org/problem?id=2186" target="_blank" rel="external">http://poj.org/problem?id=2186</a></p>
<font size="4">Description</font>

<p>Every cow’s dream is to become the most popular cow in the herd. In a herd of N (1 &lt;= N &lt;= 10,000) cows, you are given up to M (1 &lt;= M &lt;= 50,000) ordered pairs of the form (A, B) that tell you that cow A thinks that cow B is popular. Since popularity is transitive, if A thinks B is popular and B thinks C is popular, then A will also think that C is<br>popular, even if this is not explicitly specified by an ordered pair in the input. Your task is to compute the number of cows that are considered popular by every other cow. </p>
<font size="4">Input</font>

<ul>
<li><p>Line 1: Two space-separated integers, N and M </p>
</li>
<li><p>Lines 2..1+M: Two space-separated numbers A and B, meaning that A thinks B is popular.<br>Output</p>
</li>
<li><p>Line 1: A single integer that is the number of cows who are considered popular by every other cow.<br>Sample Input</p>
</li>
</ul>
<p>3 3<br>1 2<br>2 1<br>2 3</p>
<font size="4">Sample Output</font>

<p>1</p>
<font size="4">Hint</font>

<p>Cow 3 is the only cow of high popularity. </p>
<p><strong>题意</strong></p>
<p>草原上有一群牛，相互之前都存在着崇拜单向的崇拜关系，这种崇拜存在着传递性即A崇拜B且B崇拜C的时候A也崇拜C，现在要你求出那些牛是被所有的牛崇拜的。</p>
<p><strong>题解</strong></p>
<p>由题意可以知道当成为环的时候环内所有牛都是相互崇拜的，那么被所有牛崇拜的牛必定在一个最大的联通分量里面，并且出度为0。因为缩点后，如果出度为0的点的数目大于1的时候必定存在出度等于0的任意二者不能被对方所崇拜，与题意“被所有其他牛崇拜”不符合。同时，由于缩点后形成具有简单有向无环图，所以可以知道这个出度为0的唯一点必定可以由其他所有点得到，满足题意所述的“被所有其他牛崇拜”。所以只要输出这个出度为0的连通分量中牛的数目就可以了。</p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; E[maxn],e[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"><span class="keyword">int</span> n,m,tag=<span class="number">1</span>;  <span class="comment">//tag用来记录当前编号到哪里。</span></div><div class="line"><span class="keyword">int</span> vis[maxn],dfn[maxn],low[maxn],tot,flag[maxn],out[maxn]; <span class="comment">//flag[i]=点编号，用于缩图,w[maxn]用于记录缩图后的点权。</span></div><div class="line"><span class="keyword">int</span> found[maxn]; <span class="comment">//用来在寻找答案时标记已经寻找过的flag</span></div><div class="line"></div><div class="line"><span class="comment">//利用tarjan进行染色处理。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	dfn[x]=low[x]=++tot;</div><div class="line">	vis[x]=<span class="number">1</span>;</div><div class="line">	S.push(x);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E[x].size();++i)&#123;</div><div class="line">		<span class="keyword">int</span> v=E[x][i];</div><div class="line">		<span class="keyword">if</span>(!dfn[v])&#123;</div><div class="line">			tarjan(v);	</div><div class="line">		    low[x]=min(low[v],low[x]);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//访问过了不在栈中的要继续维护,即是返回边。</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</div><div class="line">		  low[x]=min(low[v],dfn[x]);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//弹到最后自己出来就已经确定好了一个连通分量。</span></div><div class="line">	<span class="keyword">if</span>(low[x]==dfn[x])&#123;</div><div class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> now = S.top();</div><div class="line">			++cnt;</div><div class="line">			vis[now]=<span class="number">0</span>;</div><div class="line">			S.pop();</div><div class="line">			flag[now]=tag;</div><div class="line">			<span class="keyword">if</span>(now==x) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		++tag;	<span class="comment">//继续下一个点编号。</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">	<span class="keyword">int</span> a,b;</div><div class="line">	<span class="comment">//建立两个单向图比较快，一个记录它崇拜谁，一个是谁崇拜它(处理后找最大点)。</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">		E[a].push_back(b);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!dfn[i])</div><div class="line">		  tarjan(i);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//Tarjan染色后进行统计操作。</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;E[i].size();++j)&#123;</div><div class="line">			<span class="keyword">int</span> v=E[i][j];</div><div class="line">			<span class="keyword">if</span>(flag[i]!=flag[v])</div><div class="line">				++out[flag[i]];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mark,num=<span class="number">0</span>,ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tag;++i)</div><div class="line">	  <span class="keyword">if</span>(out[i]==<span class="number">0</span>)</div><div class="line">		++num,mark=i;</div><div class="line">    <span class="comment">//如果只有一个联通分量出度为0，这里面的所有牛肯定都被其他所有牛崇拜。</span></div><div class="line">	<span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">			<span class="keyword">if</span>(flag[i]==num)</div><div class="line">			  ++ans;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;题目连接&lt;/font&gt;

&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2186&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://poj.org/problem?id=2186&lt;/a&gt;&lt;/p
    
    </summary>
    
      <category term="图论 Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA-Tarjan/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ3279（位运算，枚举）</title>
    <link href="http://yoursite.com/2017/02/15/POJ3279/"/>
    <id>http://yoursite.com/2017/02/15/POJ3279/</id>
    <published>2017-02-15T06:29:46.000Z</published>
    <updated>2017-04-20T10:56:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本题可以归类为一个开关灯的问题，给定一张地图，选择一个点可以关掉这一点的灯，同时被关闭的还有上下左右四个位置的登，现在要求的是最小操作次数的时候具体是操作了哪几个点的位置。</p>
<p>一开始的时候联想到了之前那道Flip game，无脑用DFS进行了枚举每一个位置的情况，果断TLE，想想不对啊，之前是4*4的规格，枚举一点问题没有，这里最大可以达到16*16,好吧，只能采用另一种办法了。</p>
<p>现在知道如果第一行的开灯的位置是确定的，那么之后必须只能由第下一行的该个位置关掉这个灯，所以现在我们只需要对第一行的情况进行枚举就可以了,题意要求字典序的最小，那么根据枚举的性质，只要我们第一行从右到左开始枚举第一个能够把所有灯都关掉的情况必定就是要求的最优解。</p>
<p>第一行的情况可以由一个二进制数字来表示，这样就压缩了状态，当第一行操作过后下面几行根据第一行的情况来进行操作再判断最后一行的情况即可。复杂度可以变为O（2^n*(m*n)),对于题目的m，n≤16的情况，算是可以接受的。</p>
<p>给出代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">15</span>;</div><div class="line"><span class="keyword">int</span> m,n;</div><div class="line"><span class="keyword">int</span> ans=INF;</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">18</span>][<span class="number">18</span>];</div><div class="line"><span class="keyword">int</span> state[<span class="number">18</span>][<span class="number">18</span>];</div><div class="line"><span class="keyword">int</span> temp[<span class="number">18</span>][<span class="number">18</span>];</div><div class="line"><span class="keyword">int</span> rec[<span class="number">18</span>][<span class="number">18</span>];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> flag;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    temp[x][y]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> nx,ny;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)&#123;</div><div class="line">        nx=x+dx[i],ny=y+dy[i];</div><div class="line">        state[nx][ny]=!state[nx][ny];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(state[m][i]==<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> st)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memcpy</span>(state,<span class="built_in">map</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</div><div class="line">    <span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="keyword">sizeof</span>(temp));</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</div><div class="line">        <span class="keyword">if</span>((st&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</div><div class="line">            flip(<span class="number">1</span>,i+<span class="number">1</span>);</div><div class="line">            ++cnt;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</div><div class="line">            <span class="keyword">if</span>(state[i<span class="number">-1</span>][j]==<span class="number">1</span>)&#123;</div><div class="line">                flip(i,j);</div><div class="line">                ++cnt;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(check())&#123;</div><div class="line">        flag=<span class="number">1</span>;</div><div class="line">        <span class="built_in">memcpy</span>(rec,temp,<span class="keyword">sizeof</span>(temp));</div><div class="line">        ans=cnt;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</div><div class="line">        <span class="keyword">int</span> end=<span class="number">1</span>&lt;&lt;n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> st=<span class="number">0</span>;st&lt;end;++st) &#123;</div><div class="line">            solve(st);</div><div class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans!=INF)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>, rec[i][j]);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题可以归类为一个开关灯的问题，给定一张地图，选择一个点可以关掉这一点的灯，同时被关闭的还有上下左右四个位置的登，现在要求的是最小操作次数的时候具体是操作了哪几个点的位置。&lt;/p&gt;
&lt;p&gt;一开始的时候联想到了之前那道Flip game，无脑用DFS进行了枚举每一个位置的情况
    
    </summary>
    
      <category term="搜索 DFS" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2-DFS/"/>
    
    
  </entry>
  
  <entry>
    <title>Nim博弈变式（一）阶梯博弈</title>
    <link href="http://yoursite.com/2017/02/11/StaircaseNim/"/>
    <id>http://yoursite.com/2017/02/11/StaircaseNim/</id>
    <published>2017-02-11T05:55:11.000Z</published>
    <updated>2017-04-20T10:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，Nim博弈存在着多种变形，但是万变不离其宗，这里分析的是变形之一的阶梯博弈，研究怎么用Nim博弈的思想去解决这一类问题。</p>
<h2 id="什么是阶梯博弈？"><a href="#什么是阶梯博弈？" class="headerlink" title="什么是阶梯博弈？"></a>什么是阶梯博弈？</h2><p>阶梯博弈（Staircase Nim）描述的是类似如下的一种问题：<br>一个阶梯有n阶，每一阶上面都可以存放个数不限的硬币。现在我们用n元组(x1,x2,…,xn) 来代表第 i (1 ≤ i ≤ n)个硬币存放在第xi个阶梯上面。阶梯博弈中的一次移动可以把任意正整数个的硬币从某一阶移动到下面的一阶，也即是从第 j 阶移动到第j - 1阶。当硬币到达地面（第0阶）时，这个硬币就不可再移动了。双方轮流落子，直到有一方不能再落子。<br><strong>下面直接给出一个结论：</strong><br><strong>N元组(x1,x2,…,xn) 代表一个P-position 当且仅当它奇数步数位置上面的Nim数之和（异或）等于0。</strong></p>
<h2 id="为什么能够把阶梯博弈转化为Nim博弈处理？"><a href="#为什么能够把阶梯博弈转化为Nim博弈处理？" class="headerlink" title="为什么能够把阶梯博弈转化为Nim博弈处理？"></a>为什么能够把阶梯博弈转化为Nim博弈处理？</h2><p>我们试着回想之前介绍的Nim博弈的内容，双方轮流进行，每次进行处于P-position的一方进行任意减石子的操作都将把这个情况转化为一个N-position。<br>我们再看看阶梯博弈，能不能存在一种策略，使它与Nim博弈成为同一类型的博弈呢？答案是肯定的。<br>假定我们此时把奇数堆看做Nim游戏的石堆，此时你是N-position，根据Nim博弈的必胜策略，你可以通过一次操作使奇数堆的硬币数目变为一个安全的组合，此时你处于必胜态。那么接下来我们就知道怎么应对对方的决策了：<br>（1）如果对方选择在奇数堆中移动n个硬币到一个偶数堆，那么就相当于Nim博弈中把n个石子从某个堆中移走，那么此时你就可以继续根据Nim博弈的必胜决策使奇数堆中的硬币维持在一个必胜态。<br>（2）如果对方选择从偶数堆中移动了n个硬币到一个奇数堆，那么我们此时可以把这n个硬币再次移动到一个偶数堆，相当于次数奇数堆的硬币数目没有发生任何改变，只是把硬币从上一个偶数堆移动到了下一个偶数堆，你依然处在一个必胜态。<br>游戏进行到后面，只剩下奇数堆的石子，就是一个纯粹的Nim博弈了，我们只要根据必胜决策进行，最后肯定是把最后一堆移动到终点（Terminal-position）的，所以整个游戏其实就是一个抽象的Nim博弈。</p>
<h2 id="几道阶梯博弈习题"><a href="#几道阶梯博弈习题" class="headerlink" title="几道阶梯博弈习题"></a>几道阶梯博弈习题</h2><h3 id="POJ1704-Georgia-and-Bob"><a href="#POJ1704-Georgia-and-Bob" class="headerlink" title="POJ1704 Georgia and Bob"></a>POJ1704 Georgia and Bob</h3><p>这是一道典型的阶梯博弈，题意是Georgia和Bob轮流进行博弈，初始状态下给定的n个位置上面都含有一个石子，我们可以对任意一个石子移动k个位置，但是这个石子不能超过前面的石子，不能在进行任何移动的人输掉比赛。<br>显然我们可以根据前面介绍过的思想把这个游戏化为纯粹的Nim博弈。<br>我们可以把石子两两绑定，那么每一对就可以看成一个Nim石堆，注意，如果此时的石子数目是奇数的话，第一个石子就需要和边界进行绑定。<br>这样处理之后，只要我们把初始状态进行Nim数的求和就可以判断它处于什么状态进而知道谁是必胜的了。<br>这里还有一个问题要注意，为什么两两绑定而不考虑石子之间的间隙呢？这是因为如果对手移动了前一个石子到前面，那么我们总是可以移动与之匹配的另一个石子到前面，这样做就相当于Nim堆的数目是不变的，我们总是可以维持自己的必胜态。</p>
<p><strong>给出代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> pos[<span class="number">1010</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> q;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">    <span class="keyword">while</span>(q--)&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        pos[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pos[i]);</div><div class="line">        &#125;</div><div class="line">        sort(pos,pos+n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i-=<span class="number">2</span>)</div><div class="line">            ans^=(pos[i]-pos[i<span class="number">-1</span>]<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(!ans) <span class="built_in">puts</span>(<span class="string">"Bob will win"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Georgia will win"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="HDU4315-Climbing-the-Hill"><a href="#HDU4315-Climbing-the-Hill" class="headerlink" title="HDU4315 Climbing the Hill"></a>HDU4315 Climbing the Hill</h3><p>这题比上一题多了一个King要处理，首先把King移动到终点的人获胜，但其实仔细分析会发现本质上和上一题是一样的，我们只要把King看成是普通人即可，但是在决策中多了几个限制，需要我们加以特判，因为他们破坏了Nim游戏的结构：<br>（1）如果k=1，那么只要Alice直接把他移动到终点就可以了。<br>（2）如果k=2，那么显然谁也不愿意把第一个棋子移动到终点，因为这样一来第二个人就可以直接把king移动到终点直接赢得比赛。既然不能处理，那么我们就只能把第一堆无视处理，无视的方法是第一堆的大小减去1，代表可以移动的位置减少了1（不能把第一个移动到终点），我们可以知道这样根本不影响Nim博弈的结果，此时的胜负决定于后面余下堆的Nim博弈。</p>
<p><strong>给出代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">int</span> pos[<span class="number">1010</span>];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos[i]);</div><div class="line">        &#125;</div><div class="line">        sort(pos,pos+n);</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = pos[<span class="number">0</span>] -(k==<span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(n&amp;<span class="number">1</span>);i&lt;n<span class="number">-1</span>;i+=<span class="number">2</span>)&#123;</div><div class="line">            ans^=(pos[i+<span class="number">1</span>]-pos[i]<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans || k==<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="HDU3389-Game"><a href="#HDU3389-Game" class="headerlink" title="HDU3389 Game"></a>HDU3389 Game</h3><p>这题就是一个裸的阶梯博弈啊，只是移动范围减少了，有些地方不能走，如果你接触过离散化的思想你就会知道这并没有什么影响，首先老规矩分析一下Terminal-position究竟有哪些，显然的我们可以找出1、3、4这几个位置是不能再进行任何移动了，接下来打表，找出哪些点对应一个奇数的步数，哪一些点对应一个偶数的步数，可以发现的是对6取模余0、2、5的位置对应的都是一个奇数的步数，其他位置都是一个偶数的步数，值得一提的是，无论你是一步到位，还是经过偶步数再经过奇步数到某一个位置，都不会影响该个位置的奇偶性（这不是废话嘛！不然我打表观察做什么）</p>
<p><strong>给出代码如下：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> table[<span class="number">101</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    int mark=3;</div><div class="line">    int count=3;</div><div class="line">    for(int i=3;i&lt;=10010;++i)&#123;</div><div class="line">        if((mark+i)%3==0 &amp;&amp; (mark+i)%2==1) &#123;</div><div class="line">            table[i] = count%2;</div><div class="line">            ++count;</div><div class="line">            mark = i;</div><div class="line">        &#125;a</div><div class="line">        else</div><div class="line">            table[i]=2;</div><div class="line">    &#125;</div><div class="line">    for(int i=1;i&lt;=101;++i)&#123;</div><div class="line">        cout&lt;&lt;"CASE "&lt;&lt;i&lt;&lt;":"&lt;&lt;table[i]&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> q;</div><div class="line">    <span class="keyword">int</span> qnum=<span class="number">1</span>;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;q;</div><div class="line">    <span class="keyword">while</span>(q--)&#123;</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</div><div class="line">            <span class="keyword">if</span>(i%<span class="number">6</span>==<span class="number">0</span> || i%<span class="number">6</span>==<span class="number">2</span> || i%<span class="number">6</span>==<span class="number">5</span>)</div><div class="line">                ans^=temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans) <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,qnum,<span class="string">"Alice"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,qnum,<span class="string">"Bob"</span>);</div><div class="line">        qnum++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是那句话吧，永远不要以为自己懂的足够多，特别在ACM赛场上，题目千变万化，就一个Nim博弈的变形就有很多种，不要以为自己掌握了一个取石子就天下无敌了，这是我始终在警醒自己的。最近还在看<br>《GAME THEORY》 By Thomas S.Ferguson，受益良多，每天都有新的收获，我会很乐意继续更新这部分的内容分享给大家，也请大家对我说的不对或者不好的地方进行批评和指正，不胜感激。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，Nim博弈存在着多种变形，但是万变不离其宗，这里分析的是变形之一的阶梯博弈，研究怎么用Nim博弈的思想去解决这一类问题。&lt;/p&gt;
&lt;h2 id=&quot;什么是阶梯博弈？&quot;&gt;&lt;a href=&quot;#什么是阶梯博弈？&quot; class=&quot;headerlink&quot; title=&quot;什么是
    
    </summary>
    
      <category term="数学 博弈论" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ2505 (简单博弈，二分，打表）</title>
    <link href="http://yoursite.com/2017/02/07/POJ2505/"/>
    <id>http://yoursite.com/2017/02/07/POJ2505/</id>
    <published>2017-02-07T09:10:03.000Z</published>
    <updated>2017-04-20T10:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意：Stan和Ollie在玩一个乘法游戏，每一局他们都指定一个n，Stan每次都从p=1开始，乘上一个2-9的数字后轮到Ollie对Stan得到的结果做相同的操作，直到p>=n的时候该轮的玩家取得胜利。</p>
<p>这题虽然比较水，但是如果对博弈论中N-p、P-p状态的性质不了解的话可能不能很快地归纳出必胜的结论。<br>首先我们可以很简单地得到当2≤n≤9的时候，Stan是必胜的，因为他可以操作一次得到这里的任意数。而当10≤n≤18的时候，Ollie是必胜的，因为他可以从Stan的任意一种操作中再操作一次得到这个区间中的任何数字。<br>接下来我们分析n=19，如果双方足够聪明，那么Stan第一局必出一个2，然后Ollie无论做出什么操作，都不可能得到19，而下一轮Stan可以轻松地乘上一个数字超过19，这里便可以确定19是Stan的下一个必胜区间的下限。这里要强调的是，<strong>对于一个必胜决策，一旦某一方处于必败态，那么无论他做出什么操作，之后都不可能取得胜利</strong>，基于这一点对于我们推出之后的获胜区间很关键。为了使Ollie做出什么操作都不可能胜利，我们可以推倒出下一个Stan的必胜区间上限应该为9*2*9,因为为了得到162，知道Ollie会尽可能阻止他，Stan唯一的方案就是第一回合出9，否则第二回合Ollie只要出2，那么Stan便无论做什么也得不到162了，这个决策就不属于一个必胜的决策。<strong>必胜区间的上线必须基于最坏的情况考虑，然后基于最坏的情况作出下一回合的最有决策。</strong><br>基于上述的思路，我们就可以继续推倒出Stan的必胜区间为[9^n+2^(n-1)+1,9^n+2^n],而Ollie的必胜区间则为[9^n+2^n+1,9^(n+1)+2^n]。<br>根据区间打表之后再进行二分搜索所在区间究竟是谁必胜，我们就可以得到问题的解了。</p>
<hr>
<p>给出代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">int</span> i;  </div><div class="line"><span class="keyword">struct</span> node  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> lower;  </div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> upper;  </div><div class="line">    <span class="keyword">int</span> swin;  </div><div class="line">&#125;table[<span class="number">16</span>];  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inittable</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    table[<span class="number">1</span>].lower=<span class="number">2</span>;  </div><div class="line">    table[<span class="number">1</span>].upper=<span class="number">9</span>;  </div><div class="line">    table[<span class="number">1</span>].swin=<span class="number">1</span>;  </div><div class="line">    table[<span class="number">2</span>].lower=<span class="number">10</span>;  </div><div class="line">    table[<span class="number">2</span>].upper=<span class="number">18</span>;  </div><div class="line">    table[<span class="number">2</span>].swin=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;;++i)&#123;  </div><div class="line">        table[i].lower=table[i<span class="number">-1</span>].upper+<span class="number">1</span>;  </div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>) &#123;  </div><div class="line">            table[i].swin = <span class="number">1</span>;  </div><div class="line">            table[i].upper = table[i<span class="number">-1</span>].upper * <span class="number">9</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span> &#123;  </div><div class="line">            table[i].swin = <span class="number">0</span>;  </div><div class="line">            table[i].upper = table[i<span class="number">-1</span>].upper * <span class="number">2</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(table[i].upper&gt;=<span class="number">4294967295</span>)  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binsearch</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> l=<span class="number">1</span>;  </div><div class="line">    <span class="keyword">int</span> r=i;  </div><div class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;  </div><div class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;  </div><div class="line">        <span class="keyword">if</span>(table[mid].lower&lt;=n &amp;&amp; n&lt;=table[mid].upper)  </div><div class="line">            <span class="keyword">return</span> table[mid].swin;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n&lt;table[mid].lower) r=mid<span class="number">-1</span>;  </div><div class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;  </div><div class="line">    inittable();  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;  </div><div class="line">        <span class="keyword">if</span>(binsearch(n))  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Stan wins."</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Ollie wins."</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果为：<br><img src="https://hyson666.github.io/picture/POJ2505.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题意：Stan和Ollie在玩一个乘法游戏，每一局他们都指定一个n，Stan每次都从p=1开始，乘上一个2-9的数字后轮到Ollie对Stan得到的结果做相同的操作，直到p&gt;=n的时候该轮的玩家取得胜利。&lt;/p&gt;
&lt;p&gt;这题虽然比较水，但是如果对博弈论中N-p、P-p状态的
    
    </summary>
    
      <category term="数学 博弈论" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>博弈论基础学习（一）Nim游戏</title>
    <link href="http://yoursite.com/2017/02/05/Nim/"/>
    <id>http://yoursite.com/2017/02/05/Nim/</id>
    <published>2017-02-05T09:03:07.000Z</published>
    <updated>2017-04-20T10:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天翻看了一些国内博主写的关于Nim游戏的解析，依旧不是特别理解Nim游戏的内涵，今天翻阅论文的时候发现了一篇哈佛教授很久之前写的论文，如醍醐灌顶，由于文章比较长，就不做翻译，文章的原文地址如下：<br><a href="http://www.jstor.org/stable/pdf/1967631.pdf" target="_blank" rel="external">http://www.jstor.org/stable/pdf/1967631.pdf</a><br>感兴趣的可以看原文，如果没有时间的也可以直接看我的文章，本文将提炼该论文的观点，结合之前所看的文章给出Nim游戏的必胜思路，然后附上两道Nim游戏的例题。</p>
<h2 id="Nim游戏理论部分"><a href="#Nim游戏理论部分" class="headerlink" title="Nim游戏理论部分"></a>Nim游戏理论部分</h2><p>首先我们定义一下Nim游戏是什么：</p>
<blockquote>
<p>  有若干堆石子，每堆石子的数量都是有限的，合法的移动是“选择一堆石子并拿走若干颗（不能不拿）”，如果轮到某个人时所有的石子堆都已经被拿空了，则判负（因为他此刻没有任何合法的移动）。</p>
</blockquote>
<p>下面定义安全组合与不安全组合：<br><strong>安全组合</strong>：先手进行完后留给后手，后手的人无论如何做出改变，都将改变这个状态到一个不安全的状态，而回到先手的人总能将这个情况再次变成一个安全的状态，如此下去，先手的人是必胜的。满足这个性质的组合我们叫做安全组合。<br><strong>不安全组合</strong>：由这个状态无论如何改变都无法变为一个安全的组合，即如果某一次改变之后该玩家得到的是一个不安全组合，那么如果双方是足够聪明的，之后的每次改变，该玩家都不可能再得到一个安全的组合，即他是必败的。满足这个性质的组合我们叫做不安全组合。<br>下面我们引入一条关于Nim游戏的已知结论，并给出P-position和N-position的定义：<br>给出若干组二进制数，其二进制位对齐排列，把各列相加，如果各列得到的数字都能被2整除，那么它就是一个安全的组合。以这个情况开局，或者在之后的某一手中，当前是一个安全组合，先手的人无论作出什么改变，都将使这个组合变为一个不安全的组合，而后手的人又总能由不安全的组合拼凑出一个安全的组合，我们称此时先手必败（后手必胜），这个局面称之为<strong>P-position</strong>，反之，若面临的是一个不安全组合，则其总有办法变为一个安全的组合，到下一个人进行时无论怎么改变都将成为一个不安全组合，此时后手必败（先手必胜），这个局面称之为<strong>N-position</strong>。<br>用数学公式表达的话，可以知道，假设每一堆所含石子的个数为a1,a2,a3…an，若当前情况满足：<br>a1^a2^…^an!=0,则属于N-position，此时先手必胜，反之为P-position，后手必胜。<br>给出一组安全组合为a1,a2,a3=9，5，12，其二进制位对齐后如下：<br><img src="https://hyson666.github.io/picture/game1.png" alt=""><br>其第一列相加为2，第二列相加为2，第三列为0，第四列相加为2，则又上面的定义可以知道，它是一个安全组合，此时先手必败。若二人足够聪明，我们可以知道总有一堆先减少为0，则只要处于必胜状态的人保证剩下两堆是相等的，他就是必胜的。（可以从XOR=0来解释两堆的情况）<br>此时显然有：<br>a1^a2^a3 = 0成立。<br>此时归纳Nim游戏的必胜原理：如果二者足够聪明，那么第一个修改当前组合得到安全组合的人最终必将保持每一次修改得到的都是安全组合，而另一个人永远得不到安全组合，则这个人就处在一个必胜态（N-position），另一个人处在一个必败态（P-position）。如果已经明白了这点，那我们判断出一个游戏属于Nim游戏时，便可以定义安全组合与不安全组合，然后推出当前情况究竟是N-position还是P-position。</p>
<h2 id="Nim游戏例题"><a href="#Nim游戏例题" class="headerlink" title="Nim游戏例题"></a>Nim游戏例题</h2><h3 id="POJ2234-Matches-Game-（最基本的Nim游戏模板）"><a href="#POJ2234-Matches-Game-（最基本的Nim游戏模板）" class="headerlink" title="POJ2234 Matches Game （最基本的Nim游戏模板）"></a>POJ2234 Matches Game （最基本的Nim游戏模板）</h3><p>此题目为Nim游戏的原型，即我们可以每次从某一堆中取走任意多的石子（取走个数小于当前堆个数），最终取完的人取得胜利。</p>
<p>下面给出代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">int</span> a[<span class="number">30</span>];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) &#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  </div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]());  </div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  </div><div class="line">            res ^= a[i]();  </div><div class="line">        <span class="keyword">if</span> (res) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="POJ2975-Nim"><a href="#POJ2975-Nim" class="headerlink" title="POJ2975 Nim"></a>POJ2975 Nim</h3><p>本题也是基本的Nim游戏，从某一堆中取走m个石子，要我们计算出先手必胜的有几种取法。<br>我们已经知道得到安全组合的条件为改变后满足a1^a2^a3 = 0，题目若给出的初始状态为不安全组合，那我们必可以修改某一堆使之满足这个条件，否则输出为0。<br>所以我们现在可以知道我们取得必胜的条件为(ak-m)^(XOR^ak)=0<br>XOR^ak=0代表从XOR中剔除ak这一项，而又它们的异或等于0我们可以将这个式子转化为ak-m = XOR^ak，即m = ak - XOR^ak<br>而已经知道1\&lt;=m\&lt;=ak,所以只有当ak > XOR^ak的时候才为一个可行解。公式已经得到了，我们便可以轻松地根据式子写出代码。<br>下面给出代码如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">int</span> a[<span class="number">1010</span>];  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ai);</div><div class="line">            res^=ai;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(ai&gt;(res^ai))</div><div class="line">                ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nim游戏虽然道理简单，但却是博弈论的一个绝佳的入门点，如果我们仅仅记住结论，那么只要题目发生了变化，我们就会觉得无从下手，只有对Nim游戏有真正深入的了解，我们接下来的学习才能得心应手，这也是我翻阅论文后写下这篇Blog 的目的，之后还会继续更新几篇关于ACM中博弈论应用的文章，水平有限，希望各位看客能够多多指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天翻看了一些国内博主写的关于Nim游戏的解析，依旧不是特别理解Nim游戏的内涵，今天翻阅论文的时候发现了一篇哈佛教授很久之前写的论文，如醍醐灌顶，由于文章比较长，就不做翻译，文章的原文地址如下：&lt;br&gt;&lt;a href=&quot;http://www.jstor.org/stabl
    
    </summary>
    
      <category term="数学 博弈论" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>线段树单点更新</title>
    <link href="http://yoursite.com/2017/01/26/segtree/"/>
    <id>http://yoursite.com/2017/01/26/segtree/</id>
    <published>2017-01-26T09:32:07.000Z</published>
    <updated>2017-04-20T10:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  这几天刷了几道关于线段树单点更新的题目，发现单点更新并不像想象中那么简单，有些题目也设计到了数论的知识，本篇文章首先给出模板，然后每道题给出详细的题解（包括一些补充的知识），附有适量的标注。</p>
</blockquote>
<a id="more"></a>
<h2 id="首先给出一个个人认为比较好改的线段树的模板-基于线段和）"><a href="#首先给出一个个人认为比较好改的线段树的模板-基于线段和）" class="headerlink" title="首先给出一个个人认为比较好改的线段树的模板(基于线段和）"></a>首先给出一个个人认为比较好改的线段树的模板(基于线段和）</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先定义线段树的结构体。</span></div><div class="line"><span class="keyword">struct</span> segTree     </div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;             <span class="comment">//每个tree[k]对应一个节点,其中l,r就是左右区间。</span></div><div class="line">    <span class="keyword">int</span> sum;         <span class="comment">//每个结点包含的数据是可以根据需要自由定义的,在之后的实现 </span></div><div class="line">                         过程中的区别仅仅是运算方式的不同。</div><div class="line">&#125;tree[<span class="number">4</span>*MAXN];    <span class="comment">//绝对安全的情况是建议开四倍数据量的大小，当然发现在白书</span></div><div class="line">                    中的结论是两倍大小（可以举出不安全的例子），在实际运行 </div><div class="line">                                 中大多数情况三倍也就够了。</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    tree[k].l=l;</div><div class="line">    tree[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r)&#123;</div><div class="line">        tree[k].sum=A[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;   <span class="comment">//可根据题目要求对结点值进    </span></div><div class="line">                                                                           运算结点值。</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)</div><div class="line">    &#123;</div><div class="line">        tree[k].sum=val;     <span class="comment">//这里把最底层叶子结点的值更改为修改后的值,在递归的</span></div><div class="line">                     过程中会把叶子结点的值自下而上地更新。</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(pos&lt;mid)</div><div class="line">      updata(k&lt;&lt;<span class="number">1</span>,pos,val);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      updata(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,val);</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(l&lt;=tree[k].l &amp;&amp; r&gt;=tree[k].r)</div><div class="line">        <span class="keyword">return</span> tree[k].sum;</div><div class="line">    <span class="keyword">int</span> m=(tree[k].l+tree[k].r)/<span class="number">2</span>,ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(l&lt;=m)</div><div class="line">      ret+=query(k&lt;&lt;<span class="number">1</span>,l,m);</div><div class="line">    <span class="keyword">if</span>(r&gt;m)</div><div class="line">      ret+=query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,m,r);</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>  其他的模板还有基于RMQ的，还有记录区间空余位置的（后面的POJ2828与POJ2886），这里不予给出，因为这些都是容易修改得到的。</p>
<hr>
<h2 id="接下来是个人认为几道不错的例题"><a href="#接下来是个人认为几道不错的例题" class="headerlink" title="接下来是个人认为几道不错的例题"></a>接下来是个人认为几道不错的例题</h2><h4 id="SPOJ1043-Can-you-answer-these-queries-I（利用线段树快速查询字段和）"><a href="#SPOJ1043-Can-you-answer-these-queries-I（利用线段树快速查询字段和）" class="headerlink" title="SPOJ1043 Can you answer these queries I（利用线段树快速查询字段和）"></a>SPOJ1043 Can you answer these queries I（利用线段树快速查询字段和）</h4><p>  题意只需要我们查询最大字段和，不涉及查询的操作，所以只需要对我们的updata操作做一些修改，而不需要使用query操作。<br>  最朴素的最大字段和问题大家都用DP做过，但是如果每次操作都进行一次DP的话，因为很多查询的时候涉及重复的区间，其代价的惊人的，大概为O(mn)，在以本体的输入量来看是不允许的。<br>  由于最大字段和也是关于区间的题目，学习线段树之后我们自然就会联想到能否应用线段树的特性来解决这道问题呢？<br>  我们可以观察知道如果利用线段树把区间分为若干子区间，假设现在查询的是区间[a,b],其左右孩子结点就是[a,m]和[m+1,b]那么最大子段和便存在以下的几种情况:</p>
<ol>
<li>在左孩子结点代表的区间中取到最大值。</li>
<li>在右孩子结点代表的区间中取得最大值。</li>
<li>跨越分界点m取得最大值。（又分为左起最大值，右起最大值）</li>
</ol>
<p>针对这三种情况，我们可以给线段树结点定义这几个数据：</p>
<ol>
<li>该段所有数之和sum，参与到左起最大值、右起最大值的计算当中。</li>
<li>左起最大值lmax。</li>
<li>右起最大值rmax。</li>
<li>该段的最大值mmax。<br>在计算得出这些值之后，我们便可以根据上面所列的几种情况列式比较递归得出索要查询区间的最大字段和。<br>给出代码如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> A[<span class="number">50010</span>];</div><div class="line"><span class="keyword">struct</span> segTree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum,lmax,rmax,mmax;</div><div class="line">&#125;tree[<span class="number">50010</span>*<span class="number">4</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    tree[k].l=l;</div><div class="line">    tree[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r)&#123;</div><div class="line">        tree[k].lmax=tree[k].rmax=tree[k].sum=tree[k].mmax=A[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">    tree[k].lmax=max(tree[k&lt;&lt;<span class="number">1</span>].lmax,tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</div><div class="line">    tree[k].rmax=max(tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax,tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>].rmax);</div><div class="line">    tree[k].mmax=max(tree[k&lt;&lt;<span class="number">1</span>].mmax,tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mmax);</div><div class="line">    tree[k].mmax=max(tree[k].mmax,tree[k&lt;&lt;<span class="number">1</span>].rmax+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmax);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">askr</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[k].l==l)</div><div class="line">        <span class="keyword">return</span> tree[k].rmax;</div><div class="line">    <span class="keyword">if</span>(l&gt;=tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l)</div><div class="line">        <span class="keyword">return</span> askr(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l);</div><div class="line">    <span class="keyword">return</span> max(tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmax,tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+askr(k&lt;&lt;<span class="number">1</span>,l));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">askl</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[k].r==r)</div><div class="line">        <span class="keyword">return</span> tree[k].lmax;</div><div class="line">    <span class="keyword">if</span>(r&lt;=tree[k&lt;&lt;<span class="number">1</span>].r)</div><div class="line">        <span class="keyword">return</span> askl(k&lt;&lt;<span class="number">1</span>,r);</div><div class="line">    <span class="keyword">return</span> max(tree[k&lt;&lt;<span class="number">1</span>].sum+askl(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,r),tree[k&lt;&lt;<span class="number">1</span>].lmax);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(l==tree[k].l &amp;&amp; r==tree[k].r)   <span class="comment">//这里的query求出来的是在区间中的最大和</span></div><div class="line">        <span class="keyword">return</span> tree[k].mmax;</div><div class="line">    <span class="keyword">if</span>(l&gt;tree[k&lt;&lt;<span class="number">1</span>].r)</div><div class="line">        <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</div><div class="line">    <span class="keyword">if</span>(r&lt;tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l)</div><div class="line">        <span class="keyword">return</span> query(k&lt;&lt;<span class="number">1</span>,l,r);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=max(query(k&lt;&lt;<span class="number">1</span>,l,tree[k&lt;&lt;<span class="number">1</span>].r),query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l,r));   <span class="comment">//这里求的是左右起的最大和,</span></div><div class="line">                                                                                    <span class="comment">//和build是一致的</span></div><div class="line">    ret=max(ret,askl(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,r)+askr(k&lt;&lt;<span class="number">1</span>,l));</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;num) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">        &#125;</div><div class="line">        build(<span class="number">1</span>, <span class="number">1</span>, num);</div><div class="line">        <span class="keyword">int</span> m;</div><div class="line">        <span class="keyword">int</span> ll, rr;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; m;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;ll, &amp;rr);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, ll, rr));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行的结果：<br><img src="https://hyson666.github.io/picture/SPOJ1043.png" alt=""></p>
<hr>
<h4 id="POJ2828-插队"><a href="#POJ2828-插队" class="headerlink" title="POJ2828 插队"></a>POJ2828 插队</h4><p>  一开始看见这道题的时候有点懵，为什么适合用线段树做？后来到发现到一个规律，最后一个人插入的次序一定就是他的最终次序，那么就可以利用这点反向推出整个队伍最终的情况，那被挤走的那个人会去哪里呢？题目中我们已经可以知道每个人都会最终插入到一个位置，这个位置必然是他能够插入的第一个空位，正好线段树就可以很方便地查询第k个位置前面的空位数，从而实现插入队列后插入位置的快速决策，所以这道题就转化成为了线段树问题。<br>  比较难处理的一个点就是线段树由上到下的过程中如何转移。一个人插入的时候可以分为几种情况：如果前面的空位数（即左孩子的值）大于他要插入的位置，则可以说明前面存在空位，所以可以向左转移，否则不能满足插入位置pos前面的空位数=pos-1，容易知道这样前面是插入不下他的位置的则pos-左孩子结点的值，继续向下进行直到找到第一个能够插入的空位递归更新线段树即可。<br>  贴代码：<br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> que[<span class="number">2000010</span>];</div><div class="line"><span class="keyword">int</span> pos[<span class="number">2000010</span>],val[<span class="number">2000010</span>];</div><div class="line"><span class="keyword">int</span> id;</div><div class="line"><span class="keyword">struct</span> segTree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">&#125;tree[<span class="number">200010</span>*<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    tree[k].l=l;</div><div class="line">    tree[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r)&#123;</div><div class="line">        tree[k].sum=<span class="number">1</span>;  <span class="comment">//对应到最小的叶子结点代表的就是一个空位。</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)</div><div class="line">    &#123;</div><div class="line">        id=tree[k].l;</div><div class="line">        tree[k].sum--;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pos&lt;=tree[k&lt;&lt;<span class="number">1</span>].sum)</div><div class="line">        updata(k&lt;&lt;<span class="number">1</span>,pos);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        pos-=tree[k&lt;&lt;<span class="number">1</span>].sum; <span class="comment">//向左时直接插入,向右边的时候就要保证前面留有pos-1个空位,所以要减去前面的空位数.</span></div><div class="line">        updata(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos);</div><div class="line">    &#125;</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;num)&#123;</div><div class="line">        build(<span class="number">1</span>,<span class="number">1</span>,num);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pos[i],&amp;val[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=num;i&gt;=<span class="number">1</span>;--i)&#123;</div><div class="line">            updata(<span class="number">1</span>,pos[i]+<span class="number">1</span>);</div><div class="line">            que[id]=val[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,que[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=num;++i)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,que[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://hyson666.github.io/picture/POJ2886.png" alt=""></p>
<hr>
<h4 id="POJ2828-熊孩子游戏（快速求因子数）"><a href="#POJ2828-熊孩子游戏（快速求因子数）" class="headerlink" title="POJ2828 熊孩子游戏（快速求因子数）"></a>POJ2828 熊孩子游戏（快速求因子数）</h4><p>  这道题目的题意是每个孩子依次顺时针围成一圈，他们手上都有一张小卡片，从第k个孩子开始出列，出列后亮牌，牌是正数则顺时针（这个时候孩子已经出圈）第k个孩子出列，如果是负数则逆时针第k个孩子出列，游戏直到所有孩子都出圈结束，第K个出队的孩子能够得到F（K）个糖果，F（X）代表这个数的因子数目，那么谁的到的糖果最多？<br>  容易知道的是，出队的操作也涉及区间内空位的快速查询，完全可以照搬上一题的做法，但是困难的地方在于，我们如何快速求出每个数的因子数，而且怎么确定下一个出队的孩子是当前（上一个孩子出队后）第几个孩子呢？<br>  首先引入数论中的一个定理：<br>  对于任意的整型N，分解质因数得到N= P1^x1* P2^x2* …… * Pn^xn;<br>则N的因子个数M为 M=（x1+1） * （x2+1） * …… *（xn+1）。（Xn为质因子）<br>  由这个定理我们就可以通过一个算法快速地求出x1,x2,…xn的值分别是什么,再相乘我们就可以得到数的因子数表了,下面给出这个算法如下:<br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init_factor_table</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line">     fill(factor_table,factor_table+n+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</div><div class="line">     &#123;</div><div class="line">          <span class="keyword">if</span>(factor_table[i]==<span class="number">1</span>)</div><div class="line">          &#123;</div><div class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=n ;j+=i)</div><div class="line">               &#123;</div><div class="line">                    <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> m=j;m%i==<span class="number">0</span>;m/=i,++k);</div><div class="line">                    factor_table[j]*=k+<span class="number">1</span>;</div><div class="line">               &#125;</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  接下来我们不再关心孩子的分数，因为它只和他出队的次序有关，而且我们可以做一个预处理来加快程序运行的速度：先对这张表预处理前num（孩子个数）个数，求出最大值是第一个，则我们的updata函数执行几次，记这个最大数对应为第extimes个，如此便可以省去大量不用的updata操作。<br>  那么如何求出当前要出队的孩子是队列中的第几个呢？我们可以推出公式如下：  若是顺时针进行的，则有<br>  k=((k+val[id]-2)%num+num)%num+1;<br>反之则有:<br>  k=((k+val[id]-2)%num+num)%num+1;<br>  根据C语言的特性,我们可以知道一个数加上模数再取模可以保证最后出来的结果是在正数范围内的,这是一个常用的写法。接下来我们只要进行extimes次updata操作来求出第extimes次执行后出队的孩子是谁即可。<br>  给出代码如下：<br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> name[<span class="number">5000010</span>][<span class="number">16</span>];</div><div class="line"><span class="keyword">int</span> val[<span class="number">5000010</span>];</div><div class="line"><span class="keyword">int</span> id;</div><div class="line"><span class="keyword">int</span> factor_table[<span class="number">5000010</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_factor_table</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    fill(factor_table,factor_table+n+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(factor_table[i]==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;=n ;j+=i)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=j;m%i==<span class="number">0</span>;m/=i,++k);</div><div class="line">                factor_table[j]*= k+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> segTree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">&#125;tree[<span class="number">500010</span>*<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    tree[k].l=l;</div><div class="line">    tree[k].r=r;</div><div class="line">    <span class="keyword">if</span>(l==r)&#123;</div><div class="line">        tree[k].sum=<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</div><div class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> pos)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[k].l==tree[k].r)</div><div class="line">    &#123;</div><div class="line">        id=tree[k].l;</div><div class="line">        tree[k].sum--;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pos&lt;=tree[k&lt;&lt;<span class="number">1</span>].sum)</div><div class="line">        updata(k&lt;&lt;<span class="number">1</span>,pos);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        pos-=tree[k&lt;&lt;<span class="number">1</span>].sum;</div><div class="line">        updata(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos);</div><div class="line">    &#125;</div><div class="line">    tree[k].sum=tree[k&lt;&lt;<span class="number">1</span>].sum+tree[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num,k;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;num&gt;&gt;k)&#123;</div><div class="line">        init_factor_table(num);</div><div class="line">        build(<span class="number">1</span>,<span class="number">1</span>,num);</div><div class="line">        <span class="keyword">int</span> extimes=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(factor_table[i]&gt;temp)&#123;</div><div class="line">                extimes=i;</div><div class="line">                temp=factor_table[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,name[i],&amp;val[i]);</div><div class="line">        &#125;</div><div class="line">        id=<span class="number">0</span>;</div><div class="line">        val[id]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=extimes;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(val[id]&gt;<span class="number">0</span>)</div><div class="line">                k=((k+val[id]<span class="number">-2</span>)%num+num)%num+<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                k=((k+val[id]<span class="number">-1</span>)%num+num)%num+<span class="number">1</span>;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            updata(<span class="number">1</span>,k);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;name[id]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            num--;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;name[id]&lt;&lt;<span class="string">" "</span>&lt;&lt;factor_table[extimes]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="https://hyson666.github.io/picture/POJ2828.png" alt=""></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  线段树是竞赛中常用的数据结构，熟练运用模板并修改在限时的比赛中尤为重要，刚开始做的时候我确实不怎么熟练，所以在草稿纸上模拟了每一步的过程都画出了线段树图，研究线段树转移结点的方向，反复做多了几次空间思维能力有了一定的长进便可以比较轻松地修改线段树的模板了，最近都在刷数据结构的题目，之后碰到经典的题目我还会再更新的，感谢你能够耐心看到这里，欢迎给我留言，指出我写得不好或者不对的地方。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  这几天刷了几道关于线段树单点更新的题目，发现单点更新并不像想象中那么简单，有些题目也设计到了数论的知识，本篇文章首先给出模板，然后每道题给出详细的题解（包括一些补充的知识），附有适量的标注。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构 线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello, my friend</title>
    <link href="http://yoursite.com/2017/01/24/Hello/"/>
    <id>http://yoursite.com/2017/01/24/Hello/</id>
    <published>2017-01-23T16:32:23.000Z</published>
    <updated>2017-01-26T09:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>你好，这是Hyson的个人博客，这是他的第一篇Blog，以后他会在这里更新他的生活点滴和成长，希望你能够喜欢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，这是Hyson的个人博客，这是他的第一篇Blog，以后他会在这里更新他的生活点滴和成长，希望你能够喜欢。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
