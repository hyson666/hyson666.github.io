<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HysonQAQ</title>
  <subtitle>很卑微，不努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-05T06:17:25.789Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hyson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Generative Adversarial Nets 论文解读与翻译</title>
    <link href="http://yoursite.com/2017/11/05/gan1/"/>
    <id>http://yoursite.com/2017/11/05/gan1/</id>
    <published>2017-11-05T05:15:48.000Z</published>
    <updated>2017-11-05T06:17:25.789Z</updated>
    
    <content type="html"><![CDATA[<p>这是GAN网络的开山之作，一开始只是想看一看，写写心得，但不知怎么的就把翻译给写下来了（一部分摘自其他Blog），贴上来也方便以后查阅。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>得益于反向传播算法和Dropout算法，使用线性分段单元的判别模型往往能够获得很好的梯度，而深度生成模型则没有很好地从深度学习网络之中获得利好，因为在极大似然估计以及相关策略上面会碰到很多复杂顽固的概率计算，而且把piecewise linear units（分段线性单元）用在生成模型上面比较困难。在这个背景之下lan J.Goodfellow等人提出了一种新的生成模型评价方法来解决这个难题。</p>
<p>在文章提出的对抗网络框架当中，生成模型和他的对手进行对抗：一个判别模型，他可以判断一个样本是数据集中的样本亦或是由生成模型产生的伪样本。可以将生成模型来比作一个造假币的团伙，尝试制造出不能被检测出来的假币，而判别模型就是将这些假币识别出来的警察。这场博弈里面不断驱使着造价团伙造出更加真实的假币，也驱使这警察的判别手段更加高明。</p>
<p>这个框架可以应用很多其他模型的训练和优化方法。在本文中将探索一种特别的情况，生成模型由一种在随机噪音的驱使之下通过多重感知器产生样本。把这种特殊的情况称为对抗网络。在这个情况下，我们可以用目前高度成功的反向传播算法和Drop算法来对两个模型来进行训练，而对于生成网络仅仅采用正向传播算法。并不涉及到马尔科夫（Markov）链。</p>
<h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>含有隐变量的有向图模型可以由含有隐藏的无向图模型来替代，例如受限的波兹曼机（RBM），深度波兹曼机（DBM）和它们很多的变种。这些模型之间的相互影响可以被表达为非标准化的势函数的乘积，再通过随机变量的非标准化的势函数的乘积，再通过随机变量的所有状态的全局整合来标准化。这个数量（配分函数）和他的梯度是很棘手的，尽管他们可以通过马尔卡夫链和蒙特卡洛算法来进行估计，但是依靠蒙特卡洛方法的混合也会带严重的问题。</p>
<p>深度信念网络（DBN）是一个包含一个无向层和若干有向层的混合模型。当使用一个快速逐层训练法则时，DBNS 会引发无向模型和有向模型相关的计算难题。</p>
<p>不是利用似然函数的估计或约数的选择准则已经被提出来了，例如分数匹配和噪音压缩评估（NCE）。他们都需要知道先验概率密度知识用来分析指定一个规范化的常量。请注意,许多有趣的带有一些隐层变量的生成模型（如DBN和DBM），它们甚至不需要一些难以处理的非标准化的概率密度先验知识。一些模型如自动编码降噪机和压缩编码的学习准则与分数匹配在RBM上的应用非常相似。在NCE中，使用一个判别训练准则来拟合一个生成模型。然而,生成模型常常被用来判别从一个固定噪音分布中抽样生成的数据，而不是拟合一个独立的判别模型。由于NCE使用一个固定的噪音分布，仅仅是从观测变量的一个小子集中学习到一个大致正确的分布后，模型的学习便急剧减慢。 </p>
<p>最后，一些技术并没有用来明确定义概率分布，而是用来训练一个生成器来从期望的分布中拟合出样本。这个方法优势在于这些机器学习算法能够设计使用反向传播算法训练。这个领域最近比较突出的工作包含生成随机网络（GSN），它扩展了广义的除噪自动编码器:两者都可以看作是定义了一个参数化的马尔可夫链，即一个通过执行生成马尔科夫链的一个步骤来学习机器参数的算法。同GSNs相比，对抗网络不需要使用马尔可夫链来采样。由于对抗网络在生成阶段不需要循环反馈信息，它们能够更好的利用分段线性单元，这可以提高反向传播的效率。大部分利用反向传播算法来训练生成器的例子包括变分贝叶斯自动编码和随机反向传播。</p>
<h2 id="对抗网络"><a href="#对抗网络" class="headerlink" title="对抗网络"></a>对抗网络</h2><p>当模型都是多层感知器时，对抗模型框架是最直接应用的。为了解释生成器在关于数据x上的分布 <script type="math/tex">p_g</script> ，我们定义了一个预先输入的噪声变量 <script type="math/tex">p_z(z)</script> ，然后使用 <script type="math/tex">G(x;\theta_g)</script> 来代表数据空间的映射。在这里的 <script type="math/tex">G</script> 是一个由含有参数 <script type="math/tex">\theta_g</script> 的多重感知机表示的可微函数。我们也定义了另一个输出单独标量的多重感知机 <script type="math/tex">D(x;\theta_d)</script> 。<script type="math/tex">D(x)</script> 代表了x来自于真实的数据分布而不是 <script type="math/tex">p_g</script> 的概率。我们训练D来最大化其分配正确的标签给来自训练样例与生成器的样本的概率。我们同时训练G来最小化<script type="math/tex">log(1-D(G(Z)))</script>。换句话说，D和G的训练是一个关于价函数 <script type="math/tex">V(G,D)</script> 来进行极小化极大的二人博弈问题：</p>
<script type="math/tex; mode=display">
\underset{G}{min} \; \underset{D}{max} \; V(G,D) = \mathbb{E}_{x\sim p_{data}(x)}[logD(x)]\,+\mathbb{E}_{z\sim p_{data}(x)}[log(1\,-D(G(z)))]</script><p>在下一节中，我们提出了对抗网络的理论分析，基本上表明了训练准则可以恢复数据生成分布，因为 <script type="math/tex">G</script> 和 <script type="math/tex">D</script> 给予了足够的容量，也即在非参数限制情况。如题 1 展示了一个不那么正式，更加直观的对该方法的解释。实际上，我们必须使用迭代数值的方法来实现这个过程。在训练的内部循环中优化 <script type="math/tex">D</script> 直到完成训练的计算是禁止的，同时有限的数据集将导致结果的过拟合。相反，我们在优化 <script type="math/tex">D</script> 的 <script type="math/tex">k</script> 个步骤和优化 <script type="math/tex">G</script> 的一个步骤之间进行交题。这导致只要 <script type="math/tex">G</script> 变化的足够慢， <script type="math/tex">D</script> 总可以保持在它的最优解附近，该过程的正式表示如算法 1 所示。</p>
<p>实际上，方程 1 可能不会提供足够的梯度给 <script type="math/tex">G</script> 很好地学习。训练初期，当 <script type="math/tex">G</script> 的省城效果还很差的时候 <script type="math/tex">D</script> 可以以很高的置信度来拒绝生成的样本，因为他们明显和训练集中的数据不一样。在这种情况下，<script type="math/tex">log(1\,-\,D(G(z)))</script> 是饱和的（此时对应的梯度非常非常小）。因此我们选择最大化 <script type="math/tex">logD(G(z))</script> 而不是最小化 <script type="math/tex">log(1\,-\,D(G(z)))</script> 来对模型 <script type="math/tex">G</script> 进行训练。该目标函数使得 <script type="math/tex">G</script> 和 <script type="math/tex">D</script> 的动力学稳定点相同，并且可以提供更强的梯度给早期的训练。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl69c4ghggj30eh04njs2.jpg" alt="算法执行示意图"></p>
<p>图1：训练生成对抗网络的时候，同时更新判别分布（<script type="math/tex">D</script> ，蓝色虚线），使其能够把数据生成分布中的样本（黑色点线）<script type="math/tex">p_x</script> 从生成分布 <script type="math/tex">p_g(G)</script>（绿色实线）中的样本区分出来。下面的水平线是 <script type="math/tex">z</script> 的均匀采样区域。在水平线的上方为 <script type="math/tex">x</script> 的部分区域。向上的箭头展示了映射 <script type="math/tex">x = G(z)</script> 如何将非均匀分布 <script type="math/tex">p_g</script> 作用在转换后的样本上。 <script type="math/tex">G</script> 在 <script type="math/tex">p_g</script> 的高密度区域收缩，在 <script type="math/tex">p_g</script> 的低密度区域扩散。(a)考虑一个接近收敛的对抗的模型对 <script type="math/tex">p_g</script> 与 <script type="math/tex">p_data</script> 相似，且 <script type="math/tex">D</script> 是个部分准确的分类器。(b)算法的内循环中，训练 <script type="math/tex">D</script> 来判别数据中的样本，收敛到：<script type="math/tex">D^{*}(x)=p_data(x)p_data(x)\,+\,p_g(x)</script> 。(c)在 <script type="math/tex">G</script> 的1次更新后，<script type="math/tex">D</script> 的梯度引导G(z)流向更可能分类为数据的区域。(d)训练若干步后，如果G和D性能足够，它们接近某个稳定点并都无法继续提高性能，因为此时 <script type="math/tex">p_g=p_data</script> 。判别器将无法区分训练数据分布和生成数据分布，即 <script type="math/tex">D(x)=\frac{1}{2}</script>。</p>
<h2 id="理论结果"><a href="#理论结果" class="headerlink" title="理论结果"></a>理论结果</h2><p>当 <script type="math/tex">z\,~\,p_z</script> 时，生成器 <script type="math/tex">G</script> 隐式定义了一个概率分布 <script type="math/tex">p_g</script> 作为 <script type="math/tex">G(z)</script> 获得的概率分布。因此，我们希望在容量和训练时间足够的情况下，算法 <script type="math/tex">1</script> 能够收敛到 <script type="math/tex">p_data</script> 的一个良好估计值。这一节的结果是在非参数设置下完成的，例如，我们通过研究概率密度函数空间中的收敛来表示具有无限容量的模型。</p>
<p>我们会在 <script type="math/tex">4.1</script> 节中展示这个极小化极大问题的全局最优解为 <script type="math/tex">p_g\,=p_data</script>。我们会在 <script type="math/tex">4.2</script>节中优化式 <script type="math/tex">1</script> ,由此获得一个期望的结果。</p>
<p><strong>算法1.</strong>生成对抗网络的Minibatch随机梯度下降训练。判别器的训练步数step，k，是一个超参数。在试验中我们使用最小化消耗的选择，令<script type="math/tex">k\,=1\,</script>。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl6zzh3igxj30jn0ajtau.jpg" alt="算法1图"></p>
<h3 id="p-g-p-data-的全局最优解"><a href="#p-g-p-data-的全局最优解" class="headerlink" title="p_g\,=p_{data} 的全局最优解"></a><script type="math/tex">p_g\,=p_{data}</script> 的全局最优解</h3><p>我们首先考虑对任意给定生成器 <script type="math/tex">G</script> 的全局最优解。</p>
<p><strong>命题 1.</strong> 对于给定不变的 <script type="math/tex">G</script>，判别器 <script type="math/tex">D</script> 的最优解为：</p>
<script type="math/tex; mode=display">
D^{*}_G\,=\,\frac{p_{data}(X)}{p_{data}(x)+p_g(x)}</script><p><strong>证明.</strong> 给定任意生成器G，判别器D的训练标准为最大化目标函数 <script type="math/tex">V(G,D)</script>：</p>
<script type="math/tex; mode=display">
\begin{align}
V(G, D) = \int_{x} p_\text{data}(x) \log(D(x)) dx + \int_z p_{z}(z) \log(1 - D(g(z))) dz \nonumber \\
%\label{eq:cost-for-D}
        = \int_{x} p_\text{data}(x) \log(D(x)) + p_g(x) \log(1 - D({x})) dx
\end{align}</script><p>对任意 <script type="math/tex">(a,b) \in \mathbb{R}^2 \setminus \{0, 0\}</script> ，函数 <script type="math/tex">y \rightarrow a \log (y) + b \log (1-y)</script> 在 <script type="math/tex">[0,1]</script> 中的 <script type="math/tex">\frac{a}{a+b}</script> 处达到最大值。无需在 <script type="math/tex">Supp(p_\text{data}) \cup Supp(p_g)</script> 外部定义判别器，证毕。</p>
<p>注意到，判别器D的训练目标可以看作为条件概率 <script type="math/tex">P(Y=y|x)</script>的最大似然估计，当y=1时，x来自于<script type="math/tex">p_data</script>；当y=0时，x来自 <script type="math/tex">p_g</script>。公式1中的极小化极大问题可以变形为： </p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl71lp9wufj30hj04p3zq.jpg" alt=""></p>
<p><strong>定理1.</strong> 当且仅当 <script type="math/tex">pg=pdata</script> 时，C(G)达到全局最小。此时，<script type="math/tex">C(G)</script> 的值为<script type="math/tex">−log4</script>。</p>
<p><strong>证明.</strong> <script type="math/tex">p_g=p_data</script> 时，D∗G(x)=12（公式<script type="math/tex">2</script>）。再根据公式 <script type="math/tex">4</script> 可得，<script type="math/tex">C(G)=log12\,+\,log12\,=\,−log4</script>。为了看仅当pg=pdata时C(G)是否是最优的，观测：</p>
<script type="math/tex; mode=display">
\begin{equation}
 \mathbb{E}_{x \sim p_\text{data}} \left[ - \log 2 \right] + \mathbb{E}_{x \sim p_g} \left[ - \log 2 \right] = -\log 4
\end{equation}</script><p>然后从<script type="math/tex">C(G)=V(D∗G,G)</script>减去上式，可得： </p>
<script type="math/tex; mode=display">
\begin{equation}
%\label{eq:sym-KL}
C(G) = -\log(4) + KL \left(p_\text{data} \left \| \frac{p_\text{data} + p_g}{2} \right. \right) + KL \left(p_g \left \| \frac{p_\text{data} + p_g}{2} \right. \right)
\end{equation}</script><p>其中KL为Kullback–Leibler散度。我们在表达式中识别出了模型判别和数据生成过程之间的Jensen–Shannon散度： </p>
<script type="math/tex; mode=display">
\begin{equation}
%\label{eq:sym-KL}
C(G) = - \log(4) + 2 \cdot JSD \left(p_\text{data} \left \| p_g \right. \right)
\end{equation}</script><p>由于两个分布之间的Jensen–Shannon散度总是非负的，并且当两个分布相等时，值为0。因此 <script type="math/tex">C_*\,=−log(4)</script> 为 <script type="math/tex">C(G)</script> 的全局极小值，并且唯一解为<script type="math/tex">p_g\,=\,p_data</script>，即生成模型能够完美的复制数据的生成过程。</p>
<h3 id="算法1的收敛性"><a href="#算法1的收敛性" class="headerlink" title="算法1的收敛性"></a>算法1的收敛性</h3><p><strong>命题2.</strong> 如果G和D有足够的性能，对于算法1中的每一步，给定G时，判别器能够达到它的最优，并且通过更新pg来提高这个判别准则。 </p>
<script type="math/tex; mode=display">
\mathbb{E}_{x \sim p_\text{data}}\,\,[\log D^*_G(x)] + \mathbb{E}_{x \sim p_g}[\log (1 - D^*_G(x))]</script><p>则 <script type="math/tex">p_g</script> 收敛为 <script type="math/tex">p_data</script>。</p>
<p><strong>证明.</strong> 如上述准则，考虑 <script type="math/tex">V(G,D)=U(pg,D)</script> 为关于 <script type="math/tex">p_g</script> 的函数。注意到 <script type="math/tex">U(pg,D)</script><br>为 <script type="math/tex">p_g</script> 的凸函数。该凸函数上确界的一次导数包括达到最大值处的该函数的导数。换句话说，如果 <script type="math/tex">f(x) = \sup_{\alpha \in \cal{A}} f_\alpha(x)</script> 且对于每一个 <script type="math/tex">\alpha</script> ，<script type="math/tex">f_\alpha(x)</script>是关于x的凸函数，那么如果 <script type="math/tex">\beta = \arg \sup_{\alpha \in \cal{A}} f_\alpha(x)</script>，则 <script type="math/tex">\partial f_\beta(x) \in \partial f</script> 。这等价于给定对应的 <script type="math/tex">G</script> 和最优的 <script type="math/tex">D</script> ，计算 <script type="math/tex">p_g</script> 的梯度更新。如定理 <script type="math/tex">1</script> 所证明，<script type="math/tex">\sup_D U(p_g,D)</script>是关于 <script type="math/tex">p_g</script> 的凸函数且有唯一的全局最优解，因此，当pg的更新足够小时，<script type="math/tex">p_g</script> 收敛到 <script type="math/tex">p_x</script> ，证毕。</p>
<p>实际上，对抗的网络通过函数G(z;θg)表示pg分布的有限簇，并且我们优化θg而不是pg本身。使用一个多层感知机来定义G在参数空间引入了多个临界点。然而，尽管缺乏理论证明，但在实际中多层感知机的优良性能表明了这是一个合理的模型。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>我们在一系列数据集上，包括MNIST、多伦多面数据库（TFD）和CIFAR-10，来训练对抗网络。生成器的激活函数包括修正线性激活（ReLU）和sigmoid 激活，而判别器使用maxout激活。Dropout被用于判别器网络的训练。虽然理论框架可以在生成器的中间层使用Dropout和其他噪声，但是这里仅在生成网络的最底层使用噪声输入。</p>
<p>我们通过对G生成的样本应用高斯Parzen窗口并计算此分布下的对数似然，来估计测试集数据的概率。高斯的 <script type="math/tex">\sigma</script> 参数通过对验证集的交叉验证获得。Breuleux等人引入该过程且用于不同的似然难解的生成模型上。结果报告在表 <script type="math/tex">1</script> 中。该方法估计似然的方差较大且高维空间中表现不好，但确实目前我们认为最好的方法。生成模型的优点是可采样而不直接估计似然，从而促进了该模型评估的进一步研究。 </p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl728584ddj30af039aav.jpg" alt=""></p>
<p>表1.基于Parzen窗口的对数似然估计。MNIST上报告的数字是测试集上的平均对数似然以及在样本上平均计算的标准误差。在TFD上，我们计算数据集的不同折之间的标准误差，在每个折的验证集上选择不同的σ。在TFD上，在每一个折上对σ进行交叉验证并计算平均对数似然函数。对于MNIST，我们与真实值（而不是二进制）版本的数据集的其他模型进行比较。</p>
<p>训练后的生成样本如下图2、图3所示。虽然未声明该方法生成的样本由于其它方法生成的样本，但我们相信这些样本至少和文献中更好的生成模型相比依然有竞争力，也突出了对抗的框架的潜力。 </p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl74nbapzqj30ez0aun3d.jpg" alt=""></p>
<p>图2：来自模型的样本的可视化。最右边的列示出了相邻样本的最近训练示例，以便证明该模型没有记住训练集。样品是完全随机抽取，而不是精心挑选。与其他大多数深度生成模型的可视化不同，这些图像显示来自模型分布的实际样本。此外，这些样本是完全不相关的，因为，采样过程并不依赖马尔科夫链混合。a) MNIST；b) TFD；c) CIFAR-10（全连接模型）；d) CIFAR-10（卷积判别器和“解卷积”生成器）</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl74o5h12rj30d7013mx9.jpg" alt=""></p>
<p>图3：通过在完整模型的z空间的坐标之间进行线性内插获得的数字。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl74qdflpbj30j20ahjxe.jpg" alt=""></p>
<p>表2：生成建模中的挑战：对涉及模型的每个主要操作的深度生成建模的不同方法遇到的困难的总结。</p>
<h2 id="优势和劣势"><a href="#优势和劣势" class="headerlink" title="优势和劣势"></a>优势和劣势</h2><p>新框架相比以前的模型框架有其优缺点。缺点主要为 <script type="math/tex">p_g(x)</script> 的隐式表示，且训练期间，<script type="math/tex">D</script> 和 <script type="math/tex">G</script> 必须很好地同步（尤其，不更新 <script type="math/tex">D</script> 时 <script type="math/tex">G</script> 不必过度训练，为避免“Helvetica情景”。否则，x值相同时G丢失过多z值以至于模型 <script type="math/tex">p_\text{data}</script> 多样性不足），正如Boltzmann机在学习步间的不断更新。其优点是无需马尔科夫链，仅用反向传播来获得梯度，学习间无需推理，且模型中可融入多种函数。表2总结了生成对抗网络与其他生成模型方法的比较。 </p>
<p>前面所列优势主要在计算上。对抗的模型也可能用数据实例，仅用流过判别器的梯度，从间接更新的生成模型中获得一些统计优势。这意味输入部分未直接复制进生成器的参数。对抗的网络的另一优点是可表示很尖，甚至退化的分布，而基于马尔科夫链的方法为混合模式而要求模糊的分布。</p>
<h2 id="结论和未来研究方向"><a href="#结论和未来研究方向" class="headerlink" title="结论和未来研究方向"></a>结论和未来研究方向</h2><p>该框架允许许多直接的扩展：</p>
<p>条件生成模型 <script type="math/tex">p(x∣c)</script>可以通过将 <script type="math/tex">c</script> 作为 <script type="math/tex">G</script> 和 <script type="math/tex">D</script> 的输入来获得。<br>给定 <script type="math/tex">x</script>，可以通过训练一个任意的模型来学习近似推理，以预测 <script type="math/tex">z</script>。这和wake-sleep算法训练出的推理网络类似，但是它具有一个优势，就是在生成器训练完成后，这个推理网络可以针对固定的生成器进行训练。<br>能够用来近似模型所有的条件概率 <script type="math/tex">p({x}_S \mid {x}_{\not S})</script>，其中 <script type="math/tex">S</script> 通过训练共享参数的条件模型簇的关于x索引的一个子集。本质上，可以使用生成对抗网络来随机拓展MP-DBM。<br>半监督学习：当标签数据有限时，判别网络或推理网络的特征不会提高分类器效果。<br>效率改善：为协调 <script type="math/tex">G</script> 和 <script type="math/tex">D</script> 设计更好的方法，或训练期间确定更好的分布来采样 <script type="math/tex">z</script> ，能够极大的加速训练。</p>
<p>本文已经展示了对抗模型框架的可行性，表明这些研究方向是有用的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是GAN网络的开山之作，一开始只是想看一看，写写心得，但不知怎么的就把翻译给写下来了（一部分摘自其他Blog），贴上来也方便以后查阅。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="生成对抗网络" scheme="http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>再探常用激活函数</title>
    <link href="http://yoursite.com/2017/10/31/activationfunction/"/>
    <id>http://yoursite.com/2017/10/31/activationfunction/</id>
    <published>2017-10-31T11:04:01.000Z</published>
    <updated>2017-10-31T11:13:14.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是激励函数"><a href="#什么是激励函数" class="headerlink" title="什么是激励函数"></a>什么是激励函数</h2><p>在计算神经网络输出的时候，往往加权求和之后还需要使用一个函数对这个结果进行非线性化的处理，这个函数称之为激活函数，单个神经元的计算与激活函数的使用图如下：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl1l86izgoj30br07n0td.jpg" alt=""></p>
<h2 id="为什么要用激活函数"><a href="#为什么要用激活函数" class="headerlink" title="为什么要用激活函数"></a>为什么要用激活函数</h2><p>如果不使用激活函数的话，就是令 <script type="math/tex">a^{[i]}=z^{[i]}</script> ,称之为线性激活函数或者恒等激活函数，这样神经网络的输出就仅仅是输入函数的线性变化，不管神经网络有多少层，它所做的仅仅就是计算线性激活函数，这样显然违背了增加网络层的初衷，还不如去除所有的隐藏层，因为使用线性激活函数的隐藏层对提高训练效果几乎没有作用。所以使用线性组合函数（结果仍然是线性函数）没有任何作用。所以在隐藏层中永远不要使用线性激活函数（除非必要）。唯一能够使用线性激活函数的地方通常是输出层。</p>
<h2 id="几大常用激活函数"><a href="#几大常用激活函数" class="headerlink" title="几大常用激活函数"></a>几大常用激活函数</h2><h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><script type="math/tex; mode=display">
f(z)=\frac{1}{1+e^{-z}}</script><p>曲线：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl1mrzxy69j308w04wt8r.jpg" alt=""></p>
<p>Sigmoid是最早开始学习的激励函数之一，但是现今已经很少使用了，因为其计算量是在是过大，主要应用在二分类，目前也只有二分类的时候会使用它。它主要的缺点：</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h5 id="函数饱和使梯度消失"><a href="#函数饱和使梯度消失" class="headerlink" title="函数饱和使梯度消失"></a>函数饱和使梯度消失</h5><p>Sigmoid函数神经元在值为 0 或 1 的时候接近饱和，这些区域，梯度几乎为 0。因此在反向传播时，这个局部梯度会与整个代价函数关于该单元输出的梯度相乘，结果也会接近为 0 ，训练的速率大大下降。</p>
<p>因为几乎就没有信号通过神经元传到权重再到数据了，因此这时梯度就对模型的更新没有任何贡献。</p>
<p>除此之外，为了防止饱和，必须对于权重矩阵的初始化特别留意。比如，如果初始化权重过大，那么大多数神经元将会饱和，导致网络就几乎不学习。</p>
<h5 id="函数不是关于原点中心对称的"><a href="#函数不是关于原点中心对称的" class="headerlink" title="函数不是关于原点中心对称的"></a>函数不是关于原点中心对称的</h5><p>这个特性会导致后面网络层的输入也不是零中心的，进而影响梯度下降的运作。因为如果输入都是正数的话，那么梯度在反向传播过程中，要么全是正数，要么全是负数，这将会导致梯度下降权重更新时出现 z 字型的下降。</p>
<h3 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h3><p>公式：</p>
<script type="math/tex; mode=display">
f(z)=\frac{e^{z}-e^{-z}}{e{z}+e{-z}}</script><script type="math/tex; mode=display">
tanh(x) = 2sigmoid(2x)-1</script><p>曲线：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl1msd19ywj309a05zmx8.jpg" alt=""></p>
<p>这个函数是今天新接触的函数之一，其也被称为双正切函数,通过一定的变化把Simoid函数线性变换到 [-1,1] 的区间上，所以其实0均值的，实际应用中的效果比Sigmoid函数好。</p>
<h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>即Rectified Linear Unit，线性整流函数。<br>公式：</p>
<script type="math/tex; mode=display">
a=max(0,z)</script><p>曲线：</p>
<p>特点是当输入信号<0的时候输出都是0，>0的时候输出等于输入，是目前最常用的激活函数之一。</0的时候输出都是0，></p>
<p>其效果如图：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl1mt49fayj308w058aa3.jpg" alt=""></p>
<h4 id="ReLU的优点："><a href="#ReLU的优点：" class="headerlink" title="ReLU的优点："></a>ReLU的优点：</h4><p>1.相对与 Simoid 和 Tanh 函数，ReLU 对于 SGD 有巨大的加速作用，根据论文<br><a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf" target="_blank" rel="external">Alex Krizhevsky </a>指出其加速作用有六倍之多。</p>
<p>2.相比于 Sigmoid/tanh，ReLU 只需要一个阈值就可以得到激活值，而不用去算一大堆复杂的（指数）运算。</p>
<h4 id="ReLU的缺点："><a href="#ReLU的缺点：" class="headerlink" title="ReLU的缺点："></a>ReLU的缺点：</h4><p>它在训练时比较脆弱并且可能“死掉”。</p>
<p>举例来说：一个非常大的梯度经过一个 ReLU 神经元，更新过参数之后，这个神经元再也不会对任何数据有激活现象了。如果这种情况发生，那么从此所有流过这个神经元的梯度将都变成 0。</p>
<p>也就是说，这个 ReLU 单元在训练中将不可逆转的死亡，导致了数据多样化的丢失。实际中，如果学习率设置得太高，可能会发现网络中 40% 的神经元都会死掉（在整个训练集中这些神经元都不会被激活）。</p>
<p>合理设置学习率，会降低这种情况的发生概率。</p>
<h4 id="Leaky-ReLU"><a href="#Leaky-ReLU" class="headerlink" title="Leaky ReLU"></a>Leaky ReLU</h4><p>公式：</p>
<script type="math/tex; mode=display">
a=max(0.01z,z)</script><p>曲线：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl1mtq541yj30920523yk.jpg" alt=""></p>
<p>Leaky ReLU 是为解决“ ReLU 死亡”问题的尝试，有些研究者的论文指出这个激活函数表现很不错，但是其效果并不是很稳定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是激励函数&quot;&gt;&lt;a href=&quot;#什么是激励函数&quot; class=&quot;headerlink&quot; title=&quot;什么是激励函数&quot;&gt;&lt;/a&gt;什么是激励函数&lt;/h2&gt;&lt;p&gt;在计算神经网络输出的时候，往往加权求和之后还需要使用一个函数对这个结果进行非线性化的处理，这个函数称
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="激活函数" scheme="http://yoursite.com/tags/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达深度学习作业（一）单层神经网络实现</title>
    <link href="http://yoursite.com/2017/09/27/adlh1/"/>
    <id>http://yoursite.com/2017/09/27/adlh1/</id>
    <published>2017-09-27T03:27:57.000Z</published>
    <updated>2017-09-28T04:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用两天时间看完了这两周的课程内容，顺手把作业写完了。本周的作业比较简单，这里使用逻辑回归构建的神经网络实现了图片是否为猫的判断，由于神经网络层数不高（单层隐藏层），出现了过拟合的现象，训练集上的准确率接近高达99%，而在测试集中只有70%。在这里贴上Python代码方便自己复习以及交流，本周课程页面：<a href="https://www.coursera.org/learn/neural-networks-deep-learning/home/week/2" target="_blank" rel="external">Neural Networks Basics</a>，如有疑问可以留言，抽空回复。</p>
<h2 id="库的加载"><a href="#库的加载" class="headerlink" title="库的加载"></a>库的加载</h2><p>这里加载的几个库都是常用于机器学习模型训练的库之一，把功能解释一下：</p>
<ul>
<li><a href="www.numpy.org">numpy</a>是基础的Python科学计算库，带有很多经过SIMD优化的矩阵计算方法。</li>
<li><a href="http://www.h5py.org" target="_blank" rel="external">h5py</a>是一个常见的与使用H5文件存储的数据交互的库。</li>
<li><a href="http://matplotlib.org" target="_blank" rel="external">matplotlib</a>是一个知名的数据可视化的库。</li>
<li><a href="http://www.pythonware.com/products/pil/" target="_blank" rel="external">PIL</a> 和<a href="https://www.scipy.org/" target="_blank" rel="external">scipy</a>用来加载我们自己的图片以测试我们的模型。</li>
</ul>
<h2 id="查看问题集合"><a href="#查看问题集合" class="headerlink" title="查看问题集合"></a>查看问题集合</h2><p>在这个数据包里面包含了如下的内容：</p>
<ul>
<li>带有m_train个样本的数据集，并且利用y=1或者y=0来标记这个样本是否是一只猫。</li>
<li>一组同样带有标记的m_test个样本的测试集。</li>
<li>每组图片采用RGB矩阵来存储，其大小是（num_px, num_px, 3)，前两个代表分辨率，最后一个分别是代表R、G、B深度的矩阵。</li>
</ul>
<p>首先加载数据集：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Loading the data (cat/non-cat)</span></div><div class="line">train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()</div></pre></td></tr></table></figure></p>
<p>用orig来命名是因为在后面还要对RGB图像矩阵进行线性向量化的操作。<br>可以用下面的命令来查看数据代表的图片：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Example of a picture</span></div><div class="line">index = <span class="number">25</span></div><div class="line">plt.imshow(train_set_x_orig[index])</div><div class="line"><span class="keyword">print</span> (<span class="string">"y = "</span> + str(train_set_y[:, index]) + <span class="string">", it's a '"</span> + classes[np.squeeze(train_set_y[:, index])].decode(<span class="string">"utf-8"</span>)</div></pre></td></tr></table></figure></p>
<p>输出如下：<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjxzcl4csaj30a00apgp8.jpg" alt=""></p>
<p>对于向量化，一定要了解每个维度代表什么，对于你不清楚数据集具体情况的情况下最好shape属性查看一下各个矩阵的维度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### START CODE HERE ### (≈ 3 lines of code)</span></div><div class="line">m_train = train_set_x_orig.shape[<span class="number">0</span>]</div><div class="line">m_test = test_set_x_orig.shape[<span class="number">0</span>]</div><div class="line">num_px = train_set_x_orig.shape[<span class="number">1</span>]</div><div class="line"><span class="comment">### END CODE HERE ###</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"Number of training examples: m_train = "</span> + str(m_train))</div><div class="line"><span class="keyword">print</span> (<span class="string">"Number of testing examples: m_test = "</span> + str(m_test))</div><div class="line"><span class="keyword">print</span> (<span class="string">"Height/Width of each image: num_px = "</span> + str(num_px))</div><div class="line"><span class="keyword">print</span> (<span class="string">"Each image is of size: ("</span> + str(num_px) + <span class="string">", "</span> + str(num_px) + <span class="string">", 3)"</span>)</div><div class="line"><span class="keyword">print</span> (<span class="string">"train_set_x shape: "</span> + str(train_set_x_orig.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"train_set_y shape: "</span> + str(train_set_y.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"test_set_x shape: "</span> + str(test_set_x_orig.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"test_set_y shape: "</span> + str(test_set_y.shape))</div></pre></td></tr></table></figure></p>
<p>确定之后我们使用reshape来吧各个数据集线性化，这里利用了一个优雅小技巧省略了乘法的计算，直接把(a,b,c,d)矩阵转换为(b<em>c</em>d,a)的矩阵：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Reshape the training and test examples</span></div><div class="line"></div><div class="line"><span class="comment">### START CODE HERE ### (≈ 2 lines of code)</span></div><div class="line">train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[<span class="number">0</span>],<span class="number">-1</span>).T</div><div class="line">test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[<span class="number">0</span>],<span class="number">-1</span>).T</div><div class="line"><span class="comment">### END CODE HERE ###</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> (<span class="string">"train_set_x_flatten shape: "</span> + str(train_set_x_flatten.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"train_set_y shape: "</span> + str(train_set_y.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"test_set_x_flatten shape: "</span> + str(test_set_x_flatten.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"test_set_y shape: "</span> + str(test_set_y.shape))</div><div class="line"><span class="keyword">print</span> (<span class="string">"sanity check after reshaping: "</span> + str(train_set_x_flatten[<span class="number">0</span>:<span class="number">5</span>,<span class="number">0</span>]))</div></pre></td></tr></table></figure></p>
<p>接下来把训练集的数据标准化到0-1这个区间中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train_set_x = train_set_x_flatten/<span class="number">255.</span></div><div class="line">test_set_x = test_set_x_flatten/<span class="number">255.</span></div></pre></td></tr></table></figure></p>
<h2 id="神经网络结构"><a href="#神经网络结构" class="headerlink" title="神经网络结构"></a>神经网络结构</h2><p>本次作业要实现的是一个单层（隐藏层）神经网络，相关公式在本文中省略，其基本结构如下：<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fjz59py3okj30i40b7wgj.jpg" alt=""></p>
<h2 id="构造算法部分函数代码"><a href="#构造算法部分函数代码" class="headerlink" title="构造算法部分函数代码"></a>构造算法部分函数代码</h2><p>代码均采用向量化实现，保证算法的高效运行。</p>
<h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><p>首先定义sigmoid函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Compute the sigmoid of z</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">    z -- A scalar or numpy array of any size.</div><div class="line"></div><div class="line">    Return:</div><div class="line">    s -- sigmoid(z)</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment">### START CODE HERE ### (≈ 1 line of code)</span></div><div class="line">    s = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</div><div class="line">    <span class="comment">### END CODE HERE ###</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure></p>
<h3 id="初始化函数"><a href="#初始化函数" class="headerlink" title="初始化函数"></a>初始化函数</h3><p>然后是对参数进行初始化的函数，由于可以b是偏置量，所以处处都是相等的，利用广播特性，将其赋为常数即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_with_zeros</span><span class="params">(dim)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.</div><div class="line">    </div><div class="line">    Argument:</div><div class="line">    dim -- size of the w vector we want (or number of parameters in this case)</div><div class="line">    </div><div class="line">    Returns:</div><div class="line">    w -- initialized vector of shape (dim, 1)</div><div class="line">    b -- initialized scalar (corresponds to the bias)</div><div class="line">    """</div><div class="line">    </div><div class="line">    <span class="comment">### START CODE HERE ### (≈ 1 line of code)</span></div><div class="line">    w = np.zeros((dim, <span class="number">1</span>))</div><div class="line">    b = <span class="number">0</span></div><div class="line">    <span class="comment">### END CODE HERE ###</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span>(w.shape == (dim, <span class="number">1</span>))</div><div class="line">    <span class="keyword">assert</span>(isinstance(b, float) <span class="keyword">or</span> isinstance(b, int))</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> w, b</div></pre></td></tr></table></figure></p>
<h3 id="向前传播FP算法以及反向传播BP算法"><a href="#向前传播FP算法以及反向传播BP算法" class="headerlink" title="向前传播FP算法以及反向传播BP算法"></a>向前传播FP算法以及反向传播BP算法</h3><p>通过先前传播计算代价的值，然后利用反向传播算法计算各个参数的导数值（w和b分离），这里定义的是一次向前推进以及一次向后推进的操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">propagate</span><span class="params">(w, b, X, Y)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Implement the cost function and its gradient for the propagation explained above</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">    w -- weights, a numpy array of size (num_px * num_px * 3, 1)</div><div class="line">    b -- bias, a scalar</div><div class="line">    X -- data of size (num_px * num_px * 3, number of examples)</div><div class="line">    Y -- true "label" vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)</div><div class="line"></div><div class="line">    Return:</div><div class="line">    cost -- negative log-likelihood cost for logistic regression</div><div class="line">    dw -- gradient of the loss with respect to w, thus same shape as w</div><div class="line">    db -- gradient of the loss with respect to b, thus same shape as b</div><div class="line">    </div><div class="line">    Tips:</div><div class="line">    - Write your code step by step for the propagation. np.log(), np.dot()</div><div class="line">    """</div><div class="line">    </div><div class="line">    m = X.shape[<span class="number">1</span>]</div><div class="line">    </div><div class="line">    <span class="comment"># FORWARD PROPAGATION (FROM X TO COST)</span></div><div class="line">    <span class="comment">### START CODE HERE ### (≈ 2 lines of code)</span></div><div class="line">    A = sigmoid(np.dot(w.T,X)+b)                <span class="comment"># compute activation</span></div><div class="line">    cost = (np.dot(-Y , np.log(A.T)) - np.dot((<span class="number">1</span>-Y) , np.log((<span class="number">1</span>-A).T)))/m    <span class="comment"># compute cost</span></div><div class="line">    <span class="comment">### END CODE HERE ###</span></div><div class="line">    </div><div class="line">    <span class="comment"># BACKWARD PROPAGATION (TO FIND GRAD)</span></div><div class="line">    <span class="comment">### START CODE HERE ### (≈ 2 lines of code)</span></div><div class="line">    dw =  np.dot(X, (A-Y).T) / m</div><div class="line">    db = np.sum(A-Y) / m</div><div class="line">    <span class="comment">### END CODE HERE ###</span></div><div class="line"></div><div class="line">    <span class="keyword">assert</span>(dw.shape == w.shape)</div><div class="line">    <span class="keyword">assert</span>(db.dtype == float)</div><div class="line">    cost = np.squeeze(cost)</div><div class="line">    <span class="keyword">assert</span>(cost.shape == ())</div><div class="line">    </div><div class="line">    grads = &#123;<span class="string">"dw"</span>: dw,</div><div class="line">             <span class="string">"db"</span>: db&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> grads, cost</div></pre></td></tr></table></figure></p>
<p>对每次操作进行循环迭代得到最优化算法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># GRADED FUNCTION: optimize</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(w, b, X, Y, num_iterations, learning_rate, print_cost = False)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    This function optimizes w and b by running a gradient descent algorithm</div><div class="line">    </div><div class="line">    Arguments:</div><div class="line">    w -- weights, a numpy array of size (num_px * num_px * 3, 1)</div><div class="line">    b -- bias, a scalar</div><div class="line">    X -- data of shape (num_px * num_px * 3, number of examples)</div><div class="line">    Y -- true "label" vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)</div><div class="line">    num_iterations -- number of iterations of the optimization loop</div><div class="line">    learning_rate -- learning rate of the gradient descent update rule</div><div class="line">    print_cost -- True to print the loss every 100 steps</div><div class="line">    </div><div class="line">    Returns:</div><div class="line">    params -- dictionary containing the weights w and bias b</div><div class="line">    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function</div><div class="line">    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.</div><div class="line">    </div><div class="line">    Tips:</div><div class="line">    You basically need to write down two steps and iterate through them:</div><div class="line">        1) Calculate the cost and the gradient for the current parameters. Use propagate().</div><div class="line">        2) Update the parameters using gradient descent rule for w and b.</div><div class="line">    """</div><div class="line">    </div><div class="line">    costs = []</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iterations):</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment"># Cost and gradient calculation (≈ 1-4 lines of code)</span></div><div class="line">        <span class="comment">### START CODE HERE ### </span></div><div class="line">        grads, cost = propagate(w, b, X, Y)</div><div class="line">        <span class="comment">### END CODE HERE ###</span></div><div class="line">        </div><div class="line">        <span class="comment"># Retrieve derivatives from grads</span></div><div class="line">        dw = grads[<span class="string">"dw"</span>]</div><div class="line">        db = grads[<span class="string">"db"</span>]</div><div class="line">        </div><div class="line">        <span class="comment"># update rule (≈ 2 lines of code)</span></div><div class="line">        <span class="comment">### START CODE HERE ###</span></div><div class="line">        w = w - learning_rate * dw</div><div class="line">        b = b - learning_rate * db</div><div class="line">        <span class="comment">### END CODE HERE ###</span></div><div class="line">        </div><div class="line">        <span class="comment"># Record the costs</span></div><div class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">            costs.append(cost)</div><div class="line">        </div><div class="line">        <span class="comment"># Print the cost every 100 training examples</span></div><div class="line">        <span class="keyword">if</span> print_cost <span class="keyword">and</span> i % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">"Cost after iteration %i: %f"</span> %(i, cost))</div><div class="line">    </div><div class="line">    params = &#123;<span class="string">"w"</span>: w,</div><div class="line">              <span class="string">"b"</span>: b&#125;</div><div class="line">    </div><div class="line">    grads = &#123;<span class="string">"dw"</span>: dw,</div><div class="line">             <span class="string">"db"</span>: db&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> params, grads, costs</div></pre></td></tr></table></figure></p>
<p>在迭代结束之后就得到了我们要的参数了，利用参数构造预测函数如下：<br>def predict(w, b, X):<br>    ‘’’<br>    Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)</p>
<pre><code>Arguments:
w -- weights, a numpy array of size (num_px * num_px * 3, 1)
b -- bias, a scalar
X -- data of size (num_px * num_px * 3, number of examples)

Returns:
Y_prediction -- a numpy array (vector) containing all predictions (0/1) for the examples in X
&#39;&#39;&#39;

m = X.shape[1]
Y_prediction = np.zeros((1,m))
w = w.reshape(X.shape[0], 1)

# Compute vector &quot;A&quot; predicting the probabilities of a cat being present in the picture
### START CODE HERE ### (≈ 1 line of code)
# 在本课程中，全部向量都按列组织，得到横向预测值，Python矩阵从0开始计数，和Octave不一样
A = sigmoid(np.dot(w.T,X)+b)
### END CODE HERE ###

for i in range(A.shape[1]):

    # Convert probabilities A[0,i] to actual predictions p[0,i]
    ### START CODE HERE ### (≈ 4 lines of code)
    if(A[0][i] &gt; 0.5):
        Y_prediction[0][i] = 1
    else:
        Y_prediction[0][i] = 0
    ### END CODE HERE ###

assert(Y_prediction.shape == (1, m))

return Y_prediction
</code></pre><h2 id="综合所有部分得到模型"><a href="#综合所有部分得到模型" class="headerlink" title="综合所有部分得到模型"></a>综合所有部分得到模型</h2><p>把前面的所有算法综合起来就是我们的单层神经网络模型了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(X_train, Y_train, X_test, Y_test, num_iterations = <span class="number">2000</span>, learning_rate = <span class="number">0.5</span>, print_cost = False)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Builds the logistic regression model by calling the function you've implemented previously</div><div class="line">    </div><div class="line">    Arguments:</div><div class="line">    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)</div><div class="line">    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)</div><div class="line">    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)</div><div class="line">    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)</div><div class="line">    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters</div><div class="line">    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()</div><div class="line">    print_cost -- Set to true to print the cost every 100 iterations</div><div class="line">    </div><div class="line">    Returns:</div><div class="line">    d -- dictionary containing information about the model.</div><div class="line">    """</div><div class="line">    </div><div class="line">    <span class="comment">### START CODE HERE ###</span></div><div class="line">    </div><div class="line">    <span class="comment"># initialize parameters with zeros (≈ 1 line of code)</span></div><div class="line">    w, b = initialize_with_zeros(X_train.shape[<span class="number">0</span>])</div><div class="line"></div><div class="line">    <span class="comment"># Gradient descent (≈ 1 line of code)</span></div><div class="line">    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)</div><div class="line">    </div><div class="line">    <span class="comment"># Retrieve parameters w and b from dictionary "parameters"</span></div><div class="line">    w = parameters[<span class="string">"w"</span>]</div><div class="line">    b = parameters[<span class="string">"b"</span>]</div><div class="line">    </div><div class="line">    <span class="comment"># Predict test/train set examples (≈ 2 lines of code)</span></div><div class="line">    Y_prediction_test = predict(w, b, X_test)</div><div class="line">    Y_prediction_train = predict(w, b, X_train)</div><div class="line"></div><div class="line">    <span class="comment">### END CODE HERE ###</span></div><div class="line"></div><div class="line">    <span class="comment"># Print train/test Errors</span></div><div class="line">    print(<span class="string">"train accuracy: &#123;&#125; %"</span>.format(<span class="number">100</span> - np.mean(np.abs(Y_prediction_train - Y_train)) * <span class="number">100</span>))</div><div class="line">    print(<span class="string">"test accuracy: &#123;&#125; %"</span>.format(<span class="number">100</span> - np.mean(np.abs(Y_prediction_test - Y_test)) * <span class="number">100</span>))</div><div class="line"></div><div class="line">    </div><div class="line">    d = &#123;<span class="string">"costs"</span>: costs,</div><div class="line">         <span class="string">"Y_prediction_test"</span>: Y_prediction_test, </div><div class="line">         <span class="string">"Y_prediction_train"</span> : Y_prediction_train, </div><div class="line">         <span class="string">"w"</span> : w, </div><div class="line">         <span class="string">"b"</span> : b,</div><div class="line">         <span class="string">"learning_rate"</span> : learning_rate,</div><div class="line">         <span class="string">"num_iterations"</span>: num_iterations&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> d</div></pre></td></tr></table></figure></p>
<p>其训练集上的准确率为99%，测试集上的准确率仅为70%，显然出现了过拟合。</p>
<h2 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h2><p>可以通过查看不同学习速率的图形来确定学习速率的选取（当然是用高级优化函数的时候不用考虑这个问题，这次作业并没有采用）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">learning_rates = [<span class="number">0.01</span>, <span class="number">0.001</span>, <span class="number">0.0001</span>]</div><div class="line">models = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> learning_rates:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"learning rate is: "</span> + str(i))</div><div class="line">    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = <span class="number">1500</span>, learning_rate = i, print_cost = <span class="keyword">False</span>)</div><div class="line">    <span class="keyword">print</span> (<span class="string">'\n'</span> + <span class="string">"-------------------------------------------------------"</span> + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> learning_rates:</div><div class="line">    plt.plot(np.squeeze(models[str(i)][<span class="string">"costs"</span>]), label= str(models[str(i)][<span class="string">"learning_rate"</span>]))</div><div class="line"></div><div class="line">plt.ylabel(<span class="string">'cost'</span>)</div><div class="line">plt.xlabel(<span class="string">'iterations'</span>)</div><div class="line"></div><div class="line">legend = plt.legend(loc=<span class="string">'upper center'</span>, shadow=<span class="keyword">True</span>)</div><div class="line">frame = legend.get_frame()</div><div class="line">frame.set_facecolor(<span class="string">'0.90'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>可以看到如下图，显然选取0.01是最好的：<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fjz5sc5x0ej30eq0a4752.jpg" alt=""><br>我们还可以选取其他图片来进行测试，其代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## START CODE HERE ## (PUT YOUR IMAGE NAME) </span></div><div class="line">my_image = <span class="string">"tiger.jpg"</span>   <span class="comment"># change this to the name of your image file </span></div><div class="line"><span class="comment">## END CODE HERE ##</span></div><div class="line"></div><div class="line"><span class="comment"># We preprocess the image to fit your algorithm.</span></div><div class="line">fname = <span class="string">"images/"</span> + my_image</div><div class="line">image = np.array(ndimage.imread(fname, flatten=<span class="keyword">False</span>))</div><div class="line">my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((<span class="number">1</span>, num_px*num_px*<span class="number">3</span>)).T</div><div class="line">my_predicted_image = predict(d[<span class="string">"w"</span>], d[<span class="string">"b"</span>], my_image)</div><div class="line"></div><div class="line">plt.imshow(image)</div><div class="line">print(<span class="string">"y = "</span> + str(np.squeeze(my_predicted_image)) + <span class="string">", your algorithm predicts a \""</span> + classes[int(np.squeeze(my_predicted_image)),].decode(<span class="string">"utf-8"</span>) +  <span class="string">"\" picture."</span>)</div></pre></td></tr></table></figure></p>
<p>在网上随便找了张RGB格式的老虎的图片进行测试：<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fjz6icjl5gj30ey09btj1.jpg" alt=""><br>大概是因为都是猫科动物？模型判断图中的老虎为猫..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用两天时间看完了这两周的课程内容，顺手把作业写完了。本周的作业比较简单，这里使用逻辑回归构建的神经网络实现了图片是否为猫的判断，由于神经网络层数不高（单层隐藏层），出现了过拟合的现象，训练集上的准确率接近高达99%，而在测试集中只有70%。在这里贴上Python代码方便自
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Pandas学习笔记（一）十分钟入门</title>
    <link href="http://yoursite.com/2017/09/19/pandas1/"/>
    <id>http://yoursite.com/2017/09/19/pandas1/</id>
    <published>2017-09-19T10:21:09.000Z</published>
    <updated>2017-09-20T07:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas是一个开源的且巨大的Python数据处理库。本文作为学习Pandas所做的笔记，并对官方文档做了部分翻译。在使用Pandas之前请确保能够使用以下的库：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure>
<p>本文中使用的数据结构在<a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dsintro" target="_blank" rel="external">Pandas数据结构</a>中都有详细的介绍。</p>
<h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>创建一个Series对象并显示（命令行模式）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">4</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">8</span>])</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: s</div><div class="line">Out[<span class="number">5</span>]: </div><div class="line"><span class="number">0</span>    <span class="number">1.0</span></div><div class="line"><span class="number">1</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2</span>    <span class="number">5.0</span></div><div class="line"><span class="number">3</span>    NaN</div><div class="line"><span class="number">4</span>    <span class="number">6.0</span></div><div class="line"><span class="number">5</span>    <span class="number">8.0</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<p>通过传送一个numpy数组以及使用日期作为数据名，字符列表作为特征名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">6</span>]: dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: dates</div><div class="line">Out[<span class="number">7</span>]: </div><div class="line">DatetimeIndex([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</div><div class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list(<span class="string">'ABCD'</span>))</div><div class="line"></div><div class="line">In [<span class="number">9</span>]: df</div><div class="line">Out[<span class="number">9</span>]: </div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></div></pre></td></tr></table></figure>
<p>查看每个变量的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: df2.dtypes</div><div class="line">Out[<span class="number">12</span>]: </div><div class="line">A           float64</div><div class="line">B    datetime64[ns]</div><div class="line">C           float32</div><div class="line">D             int32</div><div class="line">E          category</div><div class="line">F            object</div><div class="line">dtype: object</div></pre></td></tr></table></figure></p>
<h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p>使用head()方法查看头部的五个数据以及tail()方法查看尾部五个数据（对于DataFrame类型的数据来说也可用）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">5</span>]: long_series = pd.Series(np.random.randn(<span class="number">1000</span>))</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: long_series.head()</div><div class="line">Out[<span class="number">6</span>]: </div><div class="line"><span class="number">0</span>    <span class="number">0.229453</span></div><div class="line"><span class="number">1</span>    <span class="number">0.304418</span></div><div class="line"><span class="number">2</span>    <span class="number">0.736135</span></div><div class="line"><span class="number">3</span>   <span class="number">-0.859631</span></div><div class="line"><span class="number">4</span>   <span class="number">-0.424100</span></div><div class="line">dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: long_series.tail(<span class="number">3</span>)</div><div class="line">Out[<span class="number">7</span>]: </div><div class="line"><span class="number">997</span>   <span class="number">-0.351587</span></div><div class="line"><span class="number">998</span>    <span class="number">1.136249</span></div><div class="line"><span class="number">999</span>   <span class="number">-0.448789</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<p>访问数据的行标以及列标：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">16</span>]: df.index</div><div class="line">Out[<span class="number">16</span>]: </div><div class="line">DatetimeIndex([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</div><div class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line">In [<span class="number">17</span>]: df.columns</div><div class="line">Out[<span class="number">17</span>]: Index([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>], dtype=<span class="string">'object'</span>)</div><div class="line"></div><div class="line">In [<span class="number">18</span>]: df.values</div><div class="line">Out[<span class="number">18</span>]: </div><div class="line">array([[ <span class="number">0.4691</span>, <span class="number">-0.2829</span>, <span class="number">-1.5091</span>, <span class="number">-1.1356</span>],</div><div class="line">       [ <span class="number">1.2121</span>, <span class="number">-0.1732</span>,  <span class="number">0.1192</span>, <span class="number">-1.0442</span>],</div><div class="line">       [<span class="number">-0.8618</span>, <span class="number">-2.1046</span>, <span class="number">-0.4949</span>,  <span class="number">1.0718</span>],</div><div class="line">       [ <span class="number">0.7216</span>, <span class="number">-0.7068</span>, <span class="number">-1.0396</span>,  <span class="number">0.2719</span>],</div><div class="line">       [<span class="number">-0.425</span> ,  <span class="number">0.567</span> ,  <span class="number">0.2762</span>, <span class="number">-1.0874</span>],</div><div class="line">       [<span class="number">-0.6737</span>,  <span class="number">0.1136</span>, <span class="number">-1.4784</span>,  <span class="number">0.525</span> ]])</div></pre></td></tr></table></figure>
<p>通过describe()方法快速查看每个特征的大致统计数据，包含个数、平均值、标准差、最小值、25%位置数据、50%位置数据、75%位置数据、最大值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">19</span>]: df.describe()</div><div class="line">Out[<span class="number">19</span>]: </div><div class="line">              A         B         C         D</div><div class="line">count  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span></div><div class="line">mean   <span class="number">0.073711</span> <span class="number">-0.431125</span> <span class="number">-0.687758</span> <span class="number">-0.233103</span></div><div class="line">std    <span class="number">0.843157</span>  <span class="number">0.922818</span>  <span class="number">0.779887</span>  <span class="number">0.973118</span></div><div class="line">min   <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></div><div class="line"><span class="number">25</span>%   <span class="number">-0.611510</span> <span class="number">-0.600794</span> <span class="number">-1.368714</span> <span class="number">-1.076610</span></div><div class="line"><span class="number">50</span>%    <span class="number">0.022070</span> <span class="number">-0.228039</span> <span class="number">-0.767252</span> <span class="number">-0.386188</span></div><div class="line"><span class="number">75</span>%    <span class="number">0.658444</span>  <span class="number">0.041933</span> <span class="number">-0.034326</span>  <span class="number">0.461706</span></div><div class="line">max    <span class="number">1.212112</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">1.071804</span></div></pre></td></tr></table></figure>
<p>转置数据矩阵：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">20</span>]: df.T</div><div class="line">Out[<span class="number">20</span>]: </div><div class="line">   <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">2013</span><span class="number">-01</span><span class="number">-06</span></div><div class="line">A    <span class="number">0.469112</span>    <span class="number">1.212112</span>   <span class="number">-0.861849</span>    <span class="number">0.721555</span>   <span class="number">-0.424972</span>   <span class="number">-0.673690</span></div><div class="line">B   <span class="number">-0.282863</span>   <span class="number">-0.173215</span>   <span class="number">-2.104569</span>   <span class="number">-0.706771</span>    <span class="number">0.567020</span>    <span class="number">0.113648</span></div><div class="line">C   <span class="number">-1.509059</span>    <span class="number">0.119209</span>   <span class="number">-0.494929</span>   <span class="number">-1.039575</span>    <span class="number">0.276232</span>   <span class="number">-1.478427</span></div><div class="line">D   <span class="number">-1.135632</span>   <span class="number">-1.044236</span>    <span class="number">1.071804</span>    <span class="number">0.271860</span>   <span class="number">-1.087401</span>    <span class="number">0.524988</span></div></pre></td></tr></table></figure>
<p>使用sort_index()方法，不改变data[]索引，利用axis指定排序维度(0为1维，1为2维），ascending指定升降序，对数据进行排序（以字典序降序为例）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">21</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</div><div class="line">Out[<span class="number">21</span>]: </div><div class="line">                   D         C         B         A</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-1.135632</span> <span class="number">-1.509059</span> <span class="number">-0.282863</span>  <span class="number">0.469112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-1.044236</span>  <span class="number">0.119209</span> <span class="number">-0.173215</span>  <span class="number">1.212112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">1.071804</span> <span class="number">-0.494929</span> <span class="number">-2.104569</span> <span class="number">-0.861849</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.271860</span> <span class="number">-1.039575</span> <span class="number">-0.706771</span>  <span class="number">0.721555</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-1.087401</span>  <span class="number">0.276232</span>  <span class="number">0.567020</span> <span class="number">-0.424972</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.524988</span> <span class="number">-1.478427</span>  <span class="number">0.113648</span> <span class="number">-0.673690</span></div></pre></td></tr></table></figure>
<p>根据值来进行排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">22</span>]: df.sort_values(by=<span class="string">'B'</span>)</div><div class="line">Out[<span class="number">22</span>]: </div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span></div></pre></td></tr></table></figure>
<h2 id="数据筛选与处理"><a href="#数据筛选与处理" class="headerlink" title="数据筛选与处理"></a>数据筛选与处理</h2><p>查看<a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing" target="_blank" rel="external">Indexing and Selecting Data</a>与<a href="http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced" target="_blank" rel="external">MultiIndex / Advanced Indexing</a>两篇文章里面有更加详细的信息，以下只讲部分重常用内容。</p>
<h3 id="获取数据值"><a href="#获取数据值" class="headerlink" title="获取数据值"></a>获取数据值</h3><p>利用列标作为键值来访问，返回一个Series实例，等效于df.A:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">23</span>]: df[<span class="string">'A'</span>]</div><div class="line">Out[<span class="number">23</span>]: </div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.469112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.212112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>   <span class="number">-0.861849</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">0.721555</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.424972</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">-0.673690</span></div><div class="line">Freq: D, Name: A, dtype: float64</div></pre></td></tr></table></figure>
<p>通过[]来指定数据范围进行选择，取出切片，列标index为通过序号序号，行标为通过字符串访问：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">23</span>]: df[<span class="string">'A'</span>]</div><div class="line">Out[<span class="number">23</span>]: </div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.469112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.212112</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>   <span class="number">-0.861849</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">0.721555</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.424972</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">-0.673690</span></div><div class="line">Freq: D, Name: A, dtype: float64</div></pre></td></tr></table></figure>
<h3 id="通过字符标签来选择"><a href="#通过字符标签来选择" class="headerlink" title="通过字符标签来选择"></a>通过字符标签来选择</h3><p>通过data[k]来指定数据（index从0开始），通过loc属性来显示第k个元素的所有特征值（包含特征名）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">26</span>]: df.loc[dates[<span class="number">0</span>]]</div><div class="line">Out[<span class="number">26</span>]: </div><div class="line">A    <span class="number">0.469112</span></div><div class="line">B   <span class="number">-0.282863</span></div><div class="line">C   <span class="number">-1.509059</span></div><div class="line">D   <span class="number">-1.135632</span></div><div class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</div></pre></td></tr></table></figure>
<p>如果要所有样本指定特征的值：，则选取所有样本，并指定显示哪个特征来进行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">27</span>]: df.loc[:,[<span class="string">'A'</span>,<span class="string">'B'</span>]]</div><div class="line">Out[<span class="number">27</span>]: </div><div class="line">                   A         B</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span></div></pre></td></tr></table></figure>
<p>如果只显示部分样本，则通过行标字符串来指定范围：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">28</span>]: df.loc[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>,[<span class="string">'A'</span>,<span class="string">'B'</span>]]</div><div class="line">Out[<span class="number">28</span>]: </div><div class="line">                   A         B</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></div></pre></td></tr></table></figure>
<p>利用loc或者at（快速访问）获得样本某个特征的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">31</span>]: df.at[dates[<span class="number">0</span>],<span class="string">'A'</span>]</div><div class="line">Out[<span class="number">31</span>]: <span class="number">0.46911229990718628</span></div></pre></td></tr></table></figure>
<h3 id="通过位置标号来选择"><a href="#通过位置标号来选择" class="headerlink" title="通过位置标号来选择"></a>通过位置标号来选择</h3><p>使用iloc属性来定位第k个数据，等价于df.loc[dates[0]]:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">32</span>]: df.iloc[<span class="number">3</span>]</div><div class="line">Out[<span class="number">32</span>]: </div><div class="line">A    <span class="number">0.721555</span></div><div class="line">B   <span class="number">-0.706771</span></div><div class="line">C   <span class="number">-1.039575</span></div><div class="line">D    <span class="number">0.271860</span></div><div class="line">Name: <span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</div></pre></td></tr></table></figure>
<p>这里和matlab很相似，可以通过列表的标号来选择：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">33</span>]: df.iloc[<span class="number">3</span>:<span class="number">5</span>,<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">Out[<span class="number">33</span>]: </div><div class="line">                   A         B</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span></div></pre></td></tr></table></figure>
<p>通过数组指定行列来选择：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">34</span>]: df.iloc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">2</span>]]</div><div class="line">Out[<span class="number">34</span>]: </div><div class="line">                   A         C</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span>  <span class="number">0.119209</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-0.494929</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.276232</span></div></pre></td></tr></table></figure>
<p>显示所有列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">35</span>]: df.iloc[<span class="number">1</span>:<span class="number">3</span>,:]</div><div class="line">Out[<span class="number">35</span>]: </div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span></div></pre></td></tr></table></figure>
<p>显示所有行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">36</span>]: df.iloc[:,<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">Out[<span class="number">36</span>]: </div><div class="line">                   B         C</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span></div></pre></td></tr></table></figure>
<p>定位具体位置的一个值（用iat也是等价的）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">37</span>]: df.iloc[<span class="number">1</span>,<span class="number">1</span>]</div><div class="line">Out[<span class="number">37</span>]: <span class="number">-0.17321464905330858</span></div></pre></td></tr></table></figure>
<h3 id="不等式选择"><a href="#不等式选择" class="headerlink" title="不等式选择"></a>不等式选择</h3><p>通过判断单列值是否满足条件来选取：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">39</span>]: df[df.A &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">39</span>]: </div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span></div></pre></td></tr></table></figure>
<p>仅仅显示满足条件的值(全局有效）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">40</span>]: df[df &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">40</span>]: </div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span>       NaN       NaN       NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span>       NaN  <span class="number">0.119209</span>       NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>       NaN       NaN       NaN  <span class="number">1.071804</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span>       NaN       NaN  <span class="number">0.271860</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>       NaN  <span class="number">0.567020</span>  <span class="number">0.276232</span>       NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>       NaN  <span class="number">0.113648</span>       NaN  <span class="number">0.524988</span></div></pre></td></tr></table></figure>
<p>指定列，通过isin()方法来过滤出指定的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">41</span>]: df2 = df.copy()</div><div class="line"></div><div class="line">In [<span class="number">42</span>]: df2[<span class="string">'E'</span>] = [<span class="string">'one'</span>, <span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>,<span class="string">'three'</span>]</div><div class="line"></div><div class="line">In [<span class="number">43</span>]: df2</div><div class="line">Out[<span class="number">43</span>]: </div><div class="line">                   A         B         C         D      E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span>    one</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span>    one</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span>    two</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span>  three</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span>   four</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span>  three</div><div class="line"></div><div class="line">In [<span class="number">44</span>]: df2[df2[<span class="string">'E'</span>].isin([<span class="string">'two'</span>,<span class="string">'four'</span>])]</div><div class="line">Out[<span class="number">44</span>]: </div><div class="line">                   A         B         C         D     E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span>   two</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span>  four</div></pre></td></tr></table></figure>
<h3 id="设定矩阵值"><a href="#设定矩阵值" class="headerlink" title="设定矩阵值"></a>设定矩阵值</h3><p>将要增添的列组织成带有与要增加列的矩阵具有相同行标的Series结构，通过对一个不存在的特征名（列标）进行赋值，根据index是否一致来匹配增加新列，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">45</span>]: s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">'20130102'</span>, periods=<span class="number">6</span>))</div><div class="line"></div><div class="line">In [<span class="number">46</span>]: s1</div><div class="line">Out[<span class="number">46</span>]: </div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">2</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">3</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>    <span class="number">4</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>    <span class="number">5</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-07</span>    <span class="number">6</span></div><div class="line">Freq: D, dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">47</span>]: df[<span class="string">'F'</span>] = s1</div></pre></td></tr></table></figure>
<p>先选择data[k]，通过标签来设定具体某个特征的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">48</span>]: df.at[dates[<span class="number">0</span>],<span class="string">'A'</span>] = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>通过numpy数组来指定某一列的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">50</span>]: df.loc[:,<span class="string">'D'</span>] = np.array([<span class="number">5</span>] * len(df))</div><div class="line"></div><div class="line">In [<span class="number">51</span>]: df</div><div class="line">Out[<span class="number">51</span>]: </div><div class="line">                   A         B         C  D    F</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span>  <span class="number">5</span>  NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">5</span>  <span class="number">4.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">5</span>  <span class="number">5.0</span></div></pre></td></tr></table></figure>
<h2 id="遗失数据"><a href="#遗失数据" class="headerlink" title="遗失数据"></a>遗失数据</h2><p>通过reindex（）方法来指定行列（原基础上调整）增加新的列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">55</span>]: df1 = df.reindex(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=list(df.columns) + [<span class="string">'E'</span>])</div><div class="line"></div><div class="line">In [<span class="number">56</span>]: df1.loc[dates[<span class="number">0</span>]:dates[<span class="number">1</span>],<span class="string">'E'</span>] = <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">57</span>]: df1</div><div class="line">Out[<span class="number">57</span>]: </div><div class="line">                   A         B         C  D    F    E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span>  <span class="number">5</span>  NaN  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span>  NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span>  NaN</div></pre></td></tr></table></figure>
<p>通过dropna()方法丢弃丢失了某个特征的数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">58</span>]: df1.dropna(how=<span class="string">'any'</span>)</div><div class="line">Out[<span class="number">58</span>]: </div><div class="line">                   A         B         C  D    F    E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></div></pre></td></tr></table></figure>
<p>通过fillna()方法来填充丢失的值为指定值，要指定value参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">59</span>]: df1.fillna(value=<span class="number">5</span>)</div><div class="line">Out[<span class="number">59</span>]: </div><div class="line">                   A         B         C  D    F    E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span>  <span class="number">5</span>  <span class="number">5.0</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span>  <span class="number">5.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span>  <span class="number">5.0</span></div></pre></td></tr></table></figure>
<p>通过isnull()方法，获得表明该位置有丢失数据的布尔矩阵，其中丢失的值处为True:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">60</span>]: pd.isnull(df1)</div><div class="line">Out[<span class="number">60</span>]: </div><div class="line">                A      B      C      D      F      E</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>更多详细内容可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-binop" target="_blank" rel="external">Basic section on Binary Ops</a>。</p>
<h3 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h3><p>通过mean()方法来计算平均值,可以指定参数为维度，默认为0（第一维度）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">61</span>]: df.mean()</div><div class="line">Out[<span class="number">61</span>]: </div><div class="line">A   <span class="number">-0.004474</span></div><div class="line">B   <span class="number">-0.383981</span></div><div class="line">C   <span class="number">-0.687758</span></div><div class="line">D    <span class="number">5.000000</span></div><div class="line">F    <span class="number">3.000000</span></div><div class="line">dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">62</span>]: df.mean(<span class="number">1</span>)</div><div class="line">Out[<span class="number">62</span>]: </div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.872735</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.431621</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">0.707731</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">1.395042</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>    <span class="number">1.883656</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>    <span class="number">1.592306</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure>
<p>通过shift()方法将数据往下移动若干行，通过sub减去Series结构内列向量的值（对所有对应样本），如果用NaN减去，任何数字都会变成NaN,利用sub的时候一定要指定对应轴的位置，这里以index从而进行一一对应：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">63</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">8</span>], index=dates).shift(<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">64</span>]: s</div><div class="line">Out[<span class="number">64</span>]: </div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>    NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>    <span class="number">5.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>    NaN</div><div class="line">Freq: D, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">65</span>]: df.sub(s, axis=<span class="string">'index'</span>)</div><div class="line">Out[<span class="number">65</span>]: </div><div class="line">                   A         B         C    D    F</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>       NaN       NaN       NaN  NaN  NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>       NaN       NaN       NaN  NaN  NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-1.861849</span> <span class="number">-3.104569</span> <span class="number">-1.494929</span>  <span class="number">4.0</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-2.278445</span> <span class="number">-3.706771</span> <span class="number">-4.039575</span>  <span class="number">2.0</span>  <span class="number">0.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-5.424972</span> <span class="number">-4.432980</span> <span class="number">-4.723768</span>  <span class="number">0.0</span> <span class="number">-1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>       NaN       NaN       NaN  NaN  NaN</div></pre></td></tr></table></figure>
<h3 id="Apply数据应用同一处理"><a href="#Apply数据应用同一处理" class="headerlink" title="Apply数据应用同一处理"></a>Apply数据应用同一处理</h3><p>通过apply()方法对数据进行某种操作（可用lambda表达式定义这个操作）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">66</span>]: df.apply(np.cumsum)</div><div class="line">Out[<span class="number">66</span>]: </div><div class="line">                   A         B         C   D     F</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span>   <span class="number">5</span>   NaN</div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span> <span class="number">-1.389850</span>  <span class="number">10</span>   <span class="number">1.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">0.350263</span> <span class="number">-2.277784</span> <span class="number">-1.884779</span>  <span class="number">15</span>   <span class="number">3.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">1.071818</span> <span class="number">-2.984555</span> <span class="number">-2.924354</span>  <span class="number">20</span>   <span class="number">6.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">0.646846</span> <span class="number">-2.417535</span> <span class="number">-2.648122</span>  <span class="number">25</span>  <span class="number">10.0</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.026844</span> <span class="number">-2.303886</span> <span class="number">-4.126549</span>  <span class="number">30</span>  <span class="number">15.0</span></div><div class="line"></div><div class="line">In [<span class="number">67</span>]: df.apply(<span class="keyword">lambda</span> x: x.max() - x.min())</div><div class="line">Out[<span class="number">67</span>]: </div><div class="line">A    <span class="number">2.073961</span></div><div class="line">B    <span class="number">2.671590</span></div><div class="line">C    <span class="number">1.785291</span></div><div class="line">D    <span class="number">0.000000</span></div><div class="line">F    <span class="number">4.000000</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<h3 id="直方图数据"><a href="#直方图数据" class="headerlink" title="直方图数据"></a>直方图数据</h3><p>可以使用value_counts方法统计每一个数据出现的频数，从而为绘制直方图做准备，更多的内容可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-discretization" target="_blank" rel="external">Histogramming and Discretization</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">68</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))</div><div class="line"></div><div class="line">In [<span class="number">69</span>]: s</div><div class="line">Out[<span class="number">69</span>]: </div><div class="line"><span class="number">0</span>    <span class="number">4</span></div><div class="line"><span class="number">1</span>    <span class="number">2</span></div><div class="line"><span class="number">2</span>    <span class="number">1</span></div><div class="line"><span class="number">3</span>    <span class="number">2</span></div><div class="line"><span class="number">4</span>    <span class="number">6</span></div><div class="line"><span class="number">5</span>    <span class="number">4</span></div><div class="line"><span class="number">6</span>    <span class="number">4</span></div><div class="line"><span class="number">7</span>    <span class="number">6</span></div><div class="line"><span class="number">8</span>    <span class="number">4</span></div><div class="line"><span class="number">9</span>    <span class="number">4</span></div><div class="line">dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">70</span>]: s.value_counts()</div><div class="line">Out[<span class="number">70</span>]: </div><div class="line"><span class="number">4</span>    <span class="number">5</span></div><div class="line"><span class="number">6</span>    <span class="number">2</span></div><div class="line"><span class="number">2</span>    <span class="number">2</span></div><div class="line"><span class="number">1</span>    <span class="number">1</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>Series结构的str属性带有了一系列处理字符串的方法，让处理数组中的每一个元素变得简单如下面的片断所示。注意到str的模式匹配一般默认采用正则表达式（很多情况下总是使用它们）。更多的关于Python正则表达式资料可以查看<a href="Histogramming and Discretization">Python正则表达式文档</a>以及更多的字符串处理方法请查看文档<a href="http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods" target="_blank" rel="external">向量化的字符方法</a>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">71</span>]: s = pd.Series([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'Aaba'</span>, <span class="string">'Baca'</span>, np.nan, <span class="string">'CABA'</span>, <span class="string">'dog'</span>, <span class="string">'cat'</span>])</div><div class="line"></div><div class="line">In [<span class="number">72</span>]: s.str.lower()</div><div class="line">Out[<span class="number">72</span>]: </div><div class="line"><span class="number">0</span>       a</div><div class="line"><span class="number">1</span>       b</div><div class="line"><span class="number">2</span>       c</div><div class="line"><span class="number">3</span>    aaba</div><div class="line"><span class="number">4</span>    baca</div><div class="line"><span class="number">5</span>     NaN</div><div class="line"><span class="number">6</span>    caba</div><div class="line"><span class="number">7</span>     dog</div><div class="line"><span class="number">8</span>     cat</div><div class="line">dtype: object</div></pre></td></tr></table></figure>
<h2 id="融合（Merge）"><a href="#融合（Merge）" class="headerlink" title="融合（Merge）"></a>融合（Merge）</h2><h3 id="Concat列的拼接"><a href="#Concat列的拼接" class="headerlink" title="Concat列的拼接"></a>Concat列的拼接</h3><p>把指定的几个片段利用数组的方式装在到pieces中，再用concat()方法拼接成一个完整的个体：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">73</span>]: df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">In [<span class="number">74</span>]: df</div><div class="line">Out[<span class="number">74</span>]: </div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span> <span class="number">-0.548702</span>  <span class="number">1.467327</span> <span class="number">-1.015962</span> <span class="number">-0.483075</span></div><div class="line"><span class="number">1</span>  <span class="number">1.637550</span> <span class="number">-1.217659</span> <span class="number">-0.291519</span> <span class="number">-1.745505</span></div><div class="line"><span class="number">2</span> <span class="number">-0.263952</span>  <span class="number">0.991460</span> <span class="number">-0.919069</span>  <span class="number">0.266046</span></div><div class="line"><span class="number">3</span> <span class="number">-0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> <span class="number">-1.705775</span></div><div class="line"><span class="number">4</span> <span class="number">-0.919854</span> <span class="number">-0.042379</span>  <span class="number">1.247642</span> <span class="number">-0.009920</span></div><div class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></div><div class="line"><span class="number">6</span> <span class="number">-1.131345</span> <span class="number">-0.089329</span>  <span class="number">0.337863</span> <span class="number">-0.945867</span></div><div class="line"><span class="number">7</span> <span class="number">-0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> <span class="number">-0.016692</span></div><div class="line"><span class="number">8</span> <span class="number">-0.575247</span>  <span class="number">0.254161</span> <span class="number">-1.143704</span>  <span class="number">0.215897</span></div><div class="line"><span class="number">9</span>  <span class="number">1.193555</span> <span class="number">-0.077118</span> <span class="number">-0.408530</span> <span class="number">-0.862495</span></div><div class="line"></div><div class="line"><span class="comment"># break it into pieces</span></div><div class="line">In [<span class="number">75</span>]: pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</div><div class="line"></div><div class="line">In [<span class="number">76</span>]: pd.concat(pieces)</div><div class="line">Out[<span class="number">76</span>]: </div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span> <span class="number">-0.548702</span>  <span class="number">1.467327</span> <span class="number">-1.015962</span> <span class="number">-0.483075</span></div><div class="line"><span class="number">1</span>  <span class="number">1.637550</span> <span class="number">-1.217659</span> <span class="number">-0.291519</span> <span class="number">-1.745505</span></div><div class="line"><span class="number">2</span> <span class="number">-0.263952</span>  <span class="number">0.991460</span> <span class="number">-0.919069</span>  <span class="number">0.266046</span></div><div class="line"><span class="number">3</span> <span class="number">-0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> <span class="number">-1.705775</span></div><div class="line"><span class="number">4</span> <span class="number">-0.919854</span> <span class="number">-0.042379</span>  <span class="number">1.247642</span> <span class="number">-0.009920</span></div><div class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></div><div class="line"><span class="number">6</span> <span class="number">-1.131345</span> <span class="number">-0.089329</span>  <span class="number">0.337863</span> <span class="number">-0.945867</span></div><div class="line"><span class="number">7</span> <span class="number">-0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> <span class="number">-0.016692</span></div><div class="line"><span class="number">8</span> <span class="number">-0.575247</span>  <span class="number">0.254161</span> <span class="number">-1.143704</span>  <span class="number">0.215897</span></div><div class="line"><span class="number">9</span>  <span class="number">1.193555</span> <span class="number">-0.077118</span> <span class="number">-0.408530</span> <span class="number">-0.862495</span></div></pre></td></tr></table></figure>
<h3 id="Join拼接"><a href="#Join拼接" class="headerlink" title="Join拼接"></a>Join拼接</h3><p>这是一种SQL风格的拼接，更多的信息可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-join" target="_blank" rel="external">Database style joining</a>。利用merge()方法，提供要拼接的两个矩阵和拼接的根据（如这里的键值），如果键值相同的话，则会枚举出每一种可能的融合的情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">77</span>]: left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">78</span>]: right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">79</span>]: left</div><div class="line">Out[<span class="number">79</span>]: </div><div class="line">   key  lval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">80</span>]: right</div><div class="line">Out[<span class="number">80</span>]: </div><div class="line">   key  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">5</span></div><div class="line"></div><div class="line">In [<span class="number">81</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line">Out[<span class="number">81</span>]: </div><div class="line">   key  lval  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">1</span>     <span class="number">5</span></div><div class="line"><span class="number">2</span>  foo     <span class="number">2</span>     <span class="number">4</span></div><div class="line"><span class="number">3</span>  foo     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure>
<p>更加一般的情况是根据相同相同的键值来进行一一对应的融合：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">82</span>]: left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">83</span>]: right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">84</span>]: left</div><div class="line">Out[<span class="number">84</span>]: </div><div class="line">   key  lval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">85</span>]: right</div><div class="line">Out[<span class="number">85</span>]: </div><div class="line">   key  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">4</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">5</span></div><div class="line"></div><div class="line">In [<span class="number">86</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line">Out[<span class="number">86</span>]: </div><div class="line">   key  lval  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="Append拼接"><a href="#Append拼接" class="headerlink" title="Append拼接"></a>Append拼接</h3><p>利用Append()方法，把一组新的样例拼接到数据集s尾部，同时可以加入参数无视index来进行拼接，否则index将不会重新编号为最新的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">87</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</div><div class="line"></div><div class="line">In [<span class="number">88</span>]: df</div><div class="line">Out[<span class="number">88</span>]: </div><div class="line">          A         B         C         D</div><div class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> <span class="number">-0.990582</span></div><div class="line"><span class="number">1</span> <span class="number">-0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></div><div class="line"><span class="number">2</span> <span class="number">-1.577585</span>  <span class="number">0.396823</span> <span class="number">-0.105381</span> <span class="number">-0.532532</span></div><div class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> <span class="number">-0.080952</span> <span class="number">-0.264610</span></div><div class="line"><span class="number">4</span> <span class="number">-0.727965</span> <span class="number">-0.589346</span>  <span class="number">0.339969</span> <span class="number">-0.693205</span></div><div class="line"><span class="number">5</span> <span class="number">-0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></div><div class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></div><div class="line"><span class="number">7</span> <span class="number">-0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> <span class="number">-0.708758</span></div><div class="line"></div><div class="line">In [<span class="number">89</span>]: s = df.iloc[<span class="number">3</span>]</div><div class="line"></div><div class="line">In [<span class="number">90</span>]: df.append(s, ignore_index=<span class="keyword">True</span>)</div><div class="line">Out[<span class="number">90</span>]: </div><div class="line">          A         B         C         D</div><div class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> <span class="number">-0.990582</span></div><div class="line"><span class="number">1</span> <span class="number">-0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></div><div class="line"><span class="number">2</span> <span class="number">-1.577585</span>  <span class="number">0.396823</span> <span class="number">-0.105381</span> <span class="number">-0.532532</span></div><div class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> <span class="number">-0.080952</span> <span class="number">-0.264610</span></div><div class="line"><span class="number">4</span> <span class="number">-0.727965</span> <span class="number">-0.589346</span>  <span class="number">0.339969</span> <span class="number">-0.693205</span></div><div class="line"><span class="number">5</span> <span class="number">-0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></div><div class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></div><div class="line"><span class="number">7</span> <span class="number">-0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> <span class="number">-0.708758</span></div><div class="line"><span class="number">8</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> <span class="number">-0.080952</span> <span class="number">-0.264610</span></div></pre></td></tr></table></figure>
<h3 id="Group分组操作"><a href="#Group分组操作" class="headerlink" title="Group分组操作"></a>Group分组操作</h3><p>利用强大的Groupby()方法可以把对应列根据相同的类型聚合在一起对数值特征进行操作，如果有多个特征要参与分组，可以利用数组来封装起来进行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">92</span>]: df</div><div class="line">Out[<span class="number">92</span>]: </div><div class="line">     A      B         C         D</div><div class="line"><span class="number">0</span>  foo    one <span class="number">-1.202872</span> <span class="number">-0.055224</span></div><div class="line"><span class="number">1</span>  bar    one <span class="number">-1.814470</span>  <span class="number">2.395985</span></div><div class="line"><span class="number">2</span>  foo    two  <span class="number">1.018601</span>  <span class="number">1.552825</span></div><div class="line"><span class="number">3</span>  bar  three <span class="number">-0.595447</span>  <span class="number">0.166599</span></div><div class="line"><span class="number">4</span>  foo    two  <span class="number">1.395433</span>  <span class="number">0.047609</span></div><div class="line"><span class="number">5</span>  bar    two <span class="number">-0.392670</span> <span class="number">-0.136473</span></div><div class="line"><span class="number">6</span>  foo    one  <span class="number">0.007207</span> <span class="number">-0.561757</span></div><div class="line"><span class="number">7</span>  foo  three  <span class="number">1.928123</span> <span class="number">-1.623033</span></div><div class="line"></div><div class="line">In [<span class="number">93</span>]: df.groupby(<span class="string">'A'</span>).sum()</div><div class="line">Out[<span class="number">93</span>]: </div><div class="line">            C        D</div><div class="line">A                     </div><div class="line">bar <span class="number">-2.802588</span>  <span class="number">2.42611</span></div><div class="line">foo  <span class="number">3.146492</span> <span class="number">-0.63958</span></div><div class="line"></div><div class="line">In [<span class="number">94</span>]: df.groupby([<span class="string">'A'</span>,<span class="string">'B'</span>]).sum()</div><div class="line">Out[<span class="number">94</span>]: </div><div class="line">                  C         D</div><div class="line">A   B                        </div><div class="line">bar one   <span class="number">-1.814470</span>  <span class="number">2.395985</span></div><div class="line">    three <span class="number">-0.595447</span>  <span class="number">0.166599</span></div><div class="line">    two   <span class="number">-0.392670</span> <span class="number">-0.136473</span></div><div class="line">foo one   <span class="number">-1.195665</span> <span class="number">-0.616981</span></div><div class="line">    three  <span class="number">1.928123</span> <span class="number">-1.623033</span></div><div class="line">    two    <span class="number">2.414034</span>  <span class="number">1.600434</span></div></pre></td></tr></table></figure>
<h2 id="矩阵重整"><a href="#矩阵重整" class="headerlink" title="矩阵重整"></a>矩阵重整</h2><p>更多的部分可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced-hierarchical" target="_blank" rel="external">Hierarchical Indexing</a>和<a href="http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-stacking" target="_blank" rel="external">Reshaping</a>。</p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>利用堆栈方法stack()可以把各个数值特征压缩到一起：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Out[<span class="number">99</span>]: </div><div class="line">                     A         B</div><div class="line">first second                    </div><div class="line">bar   one     <span class="number">0.029399</span> <span class="number">-0.542108</span></div><div class="line">      two     <span class="number">0.282696</span> <span class="number">-0.087302</span></div><div class="line">baz   one    <span class="number">-1.575170</span>  <span class="number">1.771208</span></div><div class="line">      two     <span class="number">0.816482</span>  <span class="number">1.100230</span></div><div class="line"></div><div class="line">In [<span class="number">100</span>]: stacked = df2.stack()</div><div class="line"></div><div class="line">In [<span class="number">101</span>]: stacked</div><div class="line">Out[<span class="number">101</span>]: </div><div class="line">first  second   </div><div class="line">bar    one     A    <span class="number">0.029399</span></div><div class="line">               B   <span class="number">-0.542108</span></div><div class="line">       two     A    <span class="number">0.282696</span></div><div class="line">               B   <span class="number">-0.087302</span></div><div class="line">baz    one     A   <span class="number">-1.575170</span></div><div class="line">               B    <span class="number">1.771208</span></div><div class="line">       two     A    <span class="number">0.816482</span></div><div class="line">               B    <span class="number">1.100230</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<p>对于压缩过的数据，可以通过unstack()方法把数据还原，并指定维度（可以看到数据是转置的）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">102</span>]: stacked.unstack()</div><div class="line">Out[<span class="number">102</span>]: </div><div class="line">                     A         B</div><div class="line">first second                    </div><div class="line">bar   one     <span class="number">0.029399</span> <span class="number">-0.542108</span></div><div class="line">      two     <span class="number">0.282696</span> <span class="number">-0.087302</span></div><div class="line">baz   one    <span class="number">-1.575170</span>  <span class="number">1.771208</span></div><div class="line">      two     <span class="number">0.816482</span>  <span class="number">1.100230</span></div><div class="line"></div><div class="line">In [<span class="number">103</span>]: stacked.unstack(<span class="number">1</span>)</div><div class="line">Out[<span class="number">103</span>]: </div><div class="line">second        one       two</div><div class="line">first                      </div><div class="line">bar   A  <span class="number">0.029399</span>  <span class="number">0.282696</span></div><div class="line">      B <span class="number">-0.542108</span> <span class="number">-0.087302</span></div><div class="line">baz   A <span class="number">-1.575170</span>  <span class="number">0.816482</span></div><div class="line">      B  <span class="number">1.771208</span>  <span class="number">1.100230</span></div><div class="line"></div><div class="line">In [<span class="number">104</span>]: stacked.unstack(<span class="number">0</span>)</div><div class="line">Out[<span class="number">104</span>]: </div><div class="line">first          bar       baz</div><div class="line">second                      </div><div class="line">one    A  <span class="number">0.029399</span> <span class="number">-1.575170</span></div><div class="line">       B <span class="number">-0.542108</span>  <span class="number">1.771208</span></div><div class="line">two    A  <span class="number">0.282696</span>  <span class="number">0.816482</span></div><div class="line">       B <span class="number">-0.087302</span>  <span class="number">1.100230</span></div></pre></td></tr></table></figure>
<h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">106</span>]: df</div><div class="line">Out[<span class="number">106</span>]: </div><div class="line">        A  B    C         D         E</div><div class="line"><span class="number">0</span>     one  A  foo  <span class="number">1.418757</span> <span class="number">-0.179666</span></div><div class="line"><span class="number">1</span>     one  B  foo <span class="number">-1.879024</span>  <span class="number">1.291836</span></div><div class="line"><span class="number">2</span>     two  C  foo  <span class="number">0.536826</span> <span class="number">-0.009614</span></div><div class="line"><span class="number">3</span>   three  A  bar  <span class="number">1.006160</span>  <span class="number">0.392149</span></div><div class="line"><span class="number">4</span>     one  B  bar <span class="number">-0.029716</span>  <span class="number">0.264599</span></div><div class="line"><span class="number">5</span>     one  C  bar <span class="number">-1.146178</span> <span class="number">-0.057409</span></div><div class="line"><span class="number">6</span>     two  A  foo  <span class="number">0.100900</span> <span class="number">-1.425638</span></div><div class="line"><span class="number">7</span>   three  B  foo <span class="number">-1.035018</span>  <span class="number">1.024098</span></div><div class="line"><span class="number">8</span>     one  C  foo  <span class="number">0.314665</span> <span class="number">-0.106062</span></div><div class="line"><span class="number">9</span>     one  A  bar <span class="number">-0.773723</span>  <span class="number">1.824375</span></div><div class="line"><span class="number">10</span>    two  B  bar <span class="number">-1.170653</span>  <span class="number">0.595974</span></div><div class="line"><span class="number">11</span>  three  C  bar  <span class="number">0.648740</span>  <span class="number">1.167115</span></div><div class="line"></div><div class="line">In [<span class="number">107</span>]: pd.pivot_table(df, values=<span class="string">'D'</span>, index=[<span class="string">'A'</span>, <span class="string">'B'</span>], columns=[<span class="string">'C'</span>])</div><div class="line">Out[<span class="number">107</span>]: </div><div class="line">C             bar       foo</div><div class="line">A     B                    </div><div class="line">one   A <span class="number">-0.773723</span>  <span class="number">1.418757</span></div><div class="line">      B <span class="number">-0.029716</span> <span class="number">-1.879024</span></div><div class="line">      C <span class="number">-1.146178</span>  <span class="number">0.314665</span></div><div class="line">three A  <span class="number">1.006160</span>       NaN</div><div class="line">      B       NaN <span class="number">-1.035018</span></div><div class="line">      C  <span class="number">0.648740</span>       NaN</div><div class="line">two   A       NaN  <span class="number">0.100900</span></div><div class="line">      B <span class="number">-1.170653</span>       NaN</div><div class="line">      C       NaN  <span class="number">0.536826</span></div></pre></td></tr></table></figure>
<h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><p>Pandas拥有强大的和高效的函数来对数据在会话过程中进行重新取样，比如把每秒钟的数据转换为每五分钟的诗句。这在金融处理中非常常见，更多的可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#timeseries" target="_blank" rel="external">Time Series section</a>,在本文中不再进行展示。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>更多的信息可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/categorical.html#categorical" target="_blank" rel="external">categorical introduction</a>和<a href="http://pandas.pydata.org/pandas-docs/stable/api.html#api-categorical" target="_blank" rel="external">API documentation</a>。</p>
<p>利用astype方法把原始成绩转化为category数据类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">128</span>]: df[<span class="string">"grade"</span>] = df[<span class="string">"raw_grade"</span>].astype(<span class="string">"category"</span>)</div><div class="line"></div><div class="line">In [<span class="number">129</span>]: df[<span class="string">"grade"</span>]</div><div class="line">Out[<span class="number">129</span>]: </div><div class="line"><span class="number">0</span>    a</div><div class="line"><span class="number">1</span>    b</div><div class="line"><span class="number">2</span>    b</div><div class="line"><span class="number">3</span>    a</div><div class="line"><span class="number">4</span>    a</div><div class="line"><span class="number">5</span>    e</div><div class="line">Name: grade, dtype: category</div><div class="line">Categories (<span class="number">3</span>, object): [a, b, e]</div></pre></td></tr></table></figure>
<p>通过cat.set_categories()方法，把数据等级重命名类别为更加有意义的名称：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">130</span>]: df[<span class="string">"grade"</span>].cat.categories = [<span class="string">"very good"</span>, <span class="string">"good"</span>, <span class="string">"very bad"</span>]</div><div class="line"></div><div class="line">In [<span class="number">131</span>]: df[<span class="string">"grade"</span>] = df[<span class="string">"grade"</span>].cat.set_categories([<span class="string">"very bad"</span>, <span class="string">"bad"</span>, <span class="string">"medium"</span>, <span class="string">"good"</span>, <span class="string">"very good"</span>])</div><div class="line"></div><div class="line">In [<span class="number">132</span>]: df[<span class="string">"grade"</span>]</div><div class="line">Out[<span class="number">132</span>]: </div><div class="line"><span class="number">0</span>    very good</div><div class="line"><span class="number">1</span>         good</div><div class="line"><span class="number">2</span>         good</div><div class="line"><span class="number">3</span>    very good</div><div class="line"><span class="number">4</span>    very good</div><div class="line"><span class="number">5</span>     very bad</div><div class="line">Name: grade, dtype: category</div><div class="line">Categories (<span class="number">5</span>, object): [very bad, bad, medium, good, very good]</div></pre></td></tr></table></figure>
<p>利用sort_values()方法根据类别来排序而不是根据字典序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">133</span>]: df.sort_values(by=<span class="string">"grade"</span>)</div><div class="line">Out[<span class="number">133</span>]: </div><div class="line">   id raw_grade      grade</div><div class="line"><span class="number">5</span>   <span class="number">6</span>         e   very bad</div><div class="line"><span class="number">1</span>   <span class="number">2</span>         b       good</div><div class="line"><span class="number">2</span>   <span class="number">3</span>         b       good</div><div class="line"><span class="number">0</span>   <span class="number">1</span>         a  very good</div><div class="line"><span class="number">3</span>   <span class="number">4</span>         a  very good</div><div class="line"><span class="number">4</span>   <span class="number">5</span>         a  very good</div></pre></td></tr></table></figure>
<p>利用groupby().size()来查看每种类型的规模：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">134</span>]: df.groupby(<span class="string">"grade"</span>).size()</div><div class="line">Out[<span class="number">134</span>]: </div><div class="line">grade</div><div class="line">very bad     <span class="number">1</span></div><div class="line">bad          <span class="number">0</span></div><div class="line">medium       <span class="number">0</span></div><div class="line">good         <span class="number">2</span></div><div class="line">very good    <span class="number">3</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>这是个非常重要的部分，更多的信息请查看<a href="http://pandas.pydata.org/pandas-docs/stable/visualization.html#visualization" target="_blank" rel="external">画图</a>文档，这里不再演示和贴图。</p>
<h2 id="从文件中读入数据"><a href="#从文件中读入数据" class="headerlink" title="从文件中读入数据"></a>从文件中读入数据</h2><h3 id="从CSV文件中读写数据："><a href="#从CSV文件中读写数据：" class="headerlink" title="从CSV文件中读写数据："></a>从CSV文件中读写数据：</h3><p>写利用to_csv()方法,读利用read_csv()方法，更多的信息可以查看<a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-store-in-csv" target="_blank" rel="external">在CSV中写入数据</a>和<a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table" target="_blank" rel="external">从CSV中读入数据</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">141</span>]: df.to_csv(<span class="string">'foo.csv'</span>)</div><div class="line"></div><div class="line">In [<span class="number">142</span>]: pd.read_csv(<span class="string">'foo.csv'</span>)</div><div class="line">Out[<span class="number">142</span>]: </div><div class="line">     Unnamed: <span class="number">0</span>          A          B         C          D</div><div class="line"><span class="number">0</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>   <span class="number">0.266457</span>  <span class="number">-0.399641</span> <span class="number">-0.219582</span>   <span class="number">1.186860</span></div><div class="line"><span class="number">1</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">-1.170732</span>  <span class="number">-0.345873</span>  <span class="number">1.653061</span>  <span class="number">-0.282953</span></div><div class="line"><span class="number">2</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">-1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  <span class="number">-0.515536</span></div><div class="line"><span class="number">3</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">-1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  <span class="number">-1.156896</span></div><div class="line"><span class="number">4</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  <span class="number">-2.428202</span></div><div class="line"><span class="number">5</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">0.478344</span>   <span class="number">0.449933</span> <span class="number">-0.741620</span>  <span class="number">-1.962409</span></div><div class="line"><span class="number">6</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-07</span>   <span class="number">1.235339</span>  <span class="number">-0.091757</span> <span class="number">-1.543861</span>  <span class="number">-1.084753</span></div><div class="line">..          ...        ...        ...       ...        ...</div><div class="line"><span class="number">993</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-20</span> <span class="number">-10.628548</span>  <span class="number">-9.153563</span> <span class="number">-7.883146</span>  <span class="number">28.313940</span></div><div class="line"><span class="number">994</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-21</span> <span class="number">-10.390377</span>  <span class="number">-8.727491</span> <span class="number">-6.399645</span>  <span class="number">30.914107</span></div><div class="line"><span class="number">995</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>  <span class="number">-8.985362</span>  <span class="number">-8.485624</span> <span class="number">-4.669462</span>  <span class="number">31.367740</span></div><div class="line"><span class="number">996</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>  <span class="number">-9.558560</span>  <span class="number">-8.781216</span> <span class="number">-4.499815</span>  <span class="number">30.518439</span></div><div class="line"><span class="number">997</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>  <span class="number">-9.902058</span>  <span class="number">-9.340490</span> <span class="number">-4.386639</span>  <span class="number">30.105593</span></div><div class="line"><span class="number">998</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-25</span> <span class="number">-10.216020</span>  <span class="number">-9.480682</span> <span class="number">-3.933802</span>  <span class="number">29.758560</span></div><div class="line"><span class="number">999</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-26</span> <span class="number">-11.856774</span> <span class="number">-10.671012</span> <span class="number">-3.216025</span>  <span class="number">29.369368</span></div><div class="line"></div><div class="line">[<span class="number">1000</span> rows x <span class="number">5</span> columns]</div></pre></td></tr></table></figure>
<h3 id="从Excel文件中读写数据："><a href="#从Excel文件中读写数据：" class="headerlink" title="从Excel文件中读写数据："></a>从Excel文件中读写数据：</h3><p>更多的信息请查看文档<a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-excel" target="_blank" rel="external">MS Excel</a>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">145</span>]: df.to_excel(<span class="string">'foo.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</div><div class="line"></div><div class="line">In [<span class="number">146</span>]: pd.read_excel(<span class="string">'foo.xlsx'</span>, <span class="string">'Sheet1'</span>, index_col=<span class="keyword">None</span>, na_values=[<span class="string">'NA'</span>])</div><div class="line">Out[<span class="number">146</span>]: </div><div class="line">                    A          B         C          D</div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>   <span class="number">0.266457</span>  <span class="number">-0.399641</span> <span class="number">-0.219582</span>   <span class="number">1.186860</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">-1.170732</span>  <span class="number">-0.345873</span>  <span class="number">1.653061</span>  <span class="number">-0.282953</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-03</span>  <span class="number">-1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  <span class="number">-0.515536</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">-1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  <span class="number">-1.156896</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  <span class="number">-2.428202</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-06</span>   <span class="number">0.478344</span>   <span class="number">0.449933</span> <span class="number">-0.741620</span>  <span class="number">-1.962409</span></div><div class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-07</span>   <span class="number">1.235339</span>  <span class="number">-0.091757</span> <span class="number">-1.543861</span>  <span class="number">-1.084753</span></div><div class="line"><span class="meta">... </span>              ...        ...       ...        ...</div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-20</span> <span class="number">-10.628548</span>  <span class="number">-9.153563</span> <span class="number">-7.883146</span>  <span class="number">28.313940</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-21</span> <span class="number">-10.390377</span>  <span class="number">-8.727491</span> <span class="number">-6.399645</span>  <span class="number">30.914107</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>  <span class="number">-8.985362</span>  <span class="number">-8.485624</span> <span class="number">-4.669462</span>  <span class="number">31.367740</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>  <span class="number">-9.558560</span>  <span class="number">-8.781216</span> <span class="number">-4.499815</span>  <span class="number">30.518439</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>  <span class="number">-9.902058</span>  <span class="number">-9.340490</span> <span class="number">-4.386639</span>  <span class="number">30.105593</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-25</span> <span class="number">-10.216020</span>  <span class="number">-9.480682</span> <span class="number">-3.933802</span>  <span class="number">29.758560</span></div><div class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-26</span> <span class="number">-11.856774</span> <span class="number">-10.671012</span> <span class="number">-3.216025</span>  <span class="number">29.369368</span></div><div class="line"></div><div class="line">[<span class="number">1000</span> rows x <span class="number">4</span> columns]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas是一个开源的且巨大的Python数据处理库。本文作为学习Pandas所做的笔记，并对官方文档做了部分翻译。在使用Pandas之前请确保能够使用以下的库：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（四）神经网络</title>
    <link href="http://yoursite.com/2017/08/08/standford4/"/>
    <id>http://yoursite.com/2017/08/08/standford4/</id>
    <published>2017-08-08T14:26:55.000Z</published>
    <updated>2017-08-08T14:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$a^{(j)}_{i}$ —— 第j层第i个单元的激励值<br>$\Theta^{(j)}$ —— 第j层的权重矩阵，对应从第j层到j+1层的变换</p>
<h2 id="为什么要使用神经网络解决非线性回归问题？"><a href="#为什么要使用神经网络解决非线性回归问题？" class="headerlink" title="为什么要使用神经网络解决非线性回归问题？"></a>为什么要使用神经网络解决非线性回归问题？</h2><p>当特征数n很大的时候，我们继续使用一般的逻辑回归就会遇上复杂度上面的障碍，比如我们选择最高次数项次数为2，那么就会有<script type="math/tex">\frac{n^2}{2}</script>项，其复杂度为<script type="math/tex">O(n^2)</script>，而如果你打算使用最高次数项为三次方去拟合的话，这将会达到<script type="math/tex">O(n^3)</script>的复杂度。有一种想法是，仅仅保留高次数项，比方说二次项，这看起来行得通，但在某些需要使用直线的点拟合的却不是特别的好，比如希望拟合如下的图形：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmaoep32j20bf07ya9u.jpg" alt=""><br>得到的可能会变成下面这样的图形：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmamm204j20bg0840si.jpg" alt=""><br>这时欠拟合的。显然我们需要使用一种新算法，当在n特别大的时候依然能够有效率地运行，这就是我们使用神经网络解决问题的原因。</p>
<h2 id="大脑中的简单神经元结构"><a href="#大脑中的简单神经元结构" class="headerlink" title="大脑中的简单神经元结构"></a>大脑中的简单神经元结构</h2><p>大脑神经具有惊人的学习能力，而且这种学习能力具有普适性。所谓普适性，即处理大脑某一特定功能的区域连接到一个不同的地方，如把嗅觉神经区与眼部相连，可以令嗅觉神经区学会观看事物。所以神经网络模型就是一种通过一种算法解决多种学习问题的模型。一个典型的神经元结构如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficmivjmgij20he0amjvw.jpg" alt=""><br>神经元类似一个计算单元，从输入神经，即Dendrite（树突）中接受一定的信息之后，经过一定的计算后通过输出神经Axon（轴突）可以把这些信息传输到其他的节点或者大脑中的其他神经元，神经网络就是通过模拟大脑神经元的这种信息输入输出的特性工作的。</p>
<h2 id="神经网络模型概述"><a href="#神经网络模型概述" class="headerlink" title="神经网络模型概述"></a>神经网络模型概述</h2><p>简单的说，神经元就是一个简单的计算单元，它从输入神经中获取电信号输入后经过计算后到输出神经中输出，所以我们就可以模型拆分为三个层次，分别是输入层、隐藏层与输出层，其中隐藏层之中又可能包含数个不同的层次，模型看起来类似下面这样：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficn61owgfj20iz09ctbv.jpg" alt=""></p>
<h3 id="输入层-Layer-1"><a href="#输入层-Layer-1" class="headerlink" title="输入层(Layer 1)"></a>输入层(Layer 1)</h3><p>输入层对应大脑神经元中的树突结构，它以特征向量的形式即<script type="math/tex">x_1,x_2,...,x_n</script>接受数据的输入，然后以<script type="math/tex">h_{\theta}</script>最为结果在输出层输出。在这个模型当中，当然也包括<script type="math/tex">x_0</script>,我们称其为偏置单元，其值永远等于一，在计算的时候务必记得在每一层中都手动加入它。<br>在神经网络的每一层当中，我们都是用同样的逻辑函数和我们之前的分类问题一样。我们可以把他们封装起来，称为sigmoid(logistic) activation function,即逻辑激励函数，在很多不同的文献当中，我们也会把参数<script type="math/tex">\theta</script>称为weights，即权重。此时的模型可以如下表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline \end{bmatrix}\rightarrow\begin{bmatrix}\ \ \ \newline \end{bmatrix}\rightarrow h_\theta(x)</script><h3 id="隐藏层-Layer-2"><a href="#隐藏层-Layer-2" class="headerlink" title="隐藏层(Layer 2)"></a>隐藏层(Layer 2)</h3><p>一般的神经网络模型中，隐藏层至少拥有一层，而且当预测函数比较复杂的时候可能超过一层而拥有数层。它负责神经元中的计算工作，当只有一层的时候我们可以把公式表示为如下：</p>
<script type="math/tex; mode=display">
\begin{align*} a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3) \newline a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3) \newline a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3) \newline h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)}) \newline \end{align*}</script><p>也就是说我们可以通过一个<script type="math/tex">3\times4</script>的参数矩阵矩阵来就算我们的激励值。<br>推广至多层神经网络，我们用上一层的参数矩阵<script type="math/tex">\Theta^{(i-1)}</script>中每一行的值来计算上一层中获得的的输入值来计算该层的激励值<script type="math/tex">a_i^{(2)}</script>每一层中我们都进行逻辑回归的计算，也即：</p>
<script type="math/tex; mode=display">
\begin{align*}a_1^{(2)} = g(z_1^{(2)}) \newline a_2^{(2)} = g(z_2^{(2)}) \newline a_3^{(2)} = g(z_3^{(2)}) \newline \end{align*}</script><p>其中z的值可以用以下公式进行计算：</p>
<script type="math/tex; mode=display">
z_k^{(2)} = \Theta_{k,0}^{(1)}x_0 + \Theta_{k,1}^{(1)}x_1 + \cdots + \Theta_{k,n}^{(1)}x_n</script><p>此时的模型可以如下表示：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline x_3\end{bmatrix}\rightarrow\begin{bmatrix}a_1^{(2)} \newline a_2^{(2)} \newline a_3^{(2)} \newline \end{bmatrix}\rightarrow h_\theta(x)</script><p>当神经网络有 <script type="math/tex">s_j</script> 个单元于层 $j$ 和 <script type="math/tex">s_{j+1}</script> 个单元于层 <script type="math/tex">j+1</script>, 那么 <script type="math/tex">\Theta^{(j)}</script> 的维度为 <script type="math/tex">s_{j+1} \times (s_j + 1)</script>。</p>
<h3 id="输出层-Layer-3"><a href="#输出层-Layer-3" class="headerlink" title="输出层(Layer 3)"></a>输出层(Layer 3)</h3><p>输出层的计算同隐藏层一致，通过一定的处理之后把所得到的预测值转化为预测矩阵输出。</p>
<h2 id="利用神经网络计算逻辑与"><a href="#利用神经网络计算逻辑与" class="headerlink" title="利用神经网络计算逻辑与"></a>利用神经网络计算逻辑与</h2><p>首先复习一下逻辑函数的图形如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fico2lp6ngj20ci06odgl.jpg" alt=""><br>当x=4.6的时候，可以说函数值约等于1，由对称性，当x=-4.6的时候，可以说函数值约等于0，基于这个特点，我们给权重赋予一定的值就可以进行各种逻辑计算。</p>
<h3 id="利用神经网络计算逻辑与-1"><a href="#利用神经网络计算逻辑与-1" class="headerlink" title="利用神经网络计算逻辑与"></a>利用神经网络计算逻辑与</h3><p>首先给第一个参数矩阵赋值如下：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-30 & 20 & 20\end{bmatrix}</script><p>因为此时<script type="math/tex">x_1、x_2</script>都是二进制数，结合逻辑函数图像，我们可以得到如下的结果：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\Theta(x) = g(-30 + 20x_1 + 20x_2) \newline \newline & x_1 = 0 \ \ and \ \ x_2 = 0 \ \ then \ \ g(-30) \approx 0 \newline & x_1 = 0 \ \ and \ \ x_2 = 1 \ \ then \ \ g(-10) \approx 0 \newline & x_1 = 1 \ \ and \ \ x_2 = 0 \ \ then \ \ g(-10) \approx 0 \newline & x_1 = 1 \ \ and \ \ x_2 = 1 \ \ then \ \ g(10) \approx 1\end{align*}</script><p>一个好的办法是列出真值表如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fico7gpzqqj20gb07raaw.jpg" alt=""><br>这样我们就完成了逻辑与的表示，同样的，把参数赋值为以下值就可以表示逻辑或了：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-10 & 20 & 20\end{bmatrix}</script><h3 id="利用神经网络计算或非"><a href="#利用神经网络计算或非" class="headerlink" title="利用神经网络计算或非"></a>利用神经网络计算或非</h3><p>可以容易把或非拆分为与、与非后再或的形式，由此把与和与非作为隐藏层，再进行一次或到输出层我们就可以表示或非了，每种形式我们赋权值如下：</p>
<script type="math/tex; mode=display">
\begin{align*}AND:\newline\Theta^{(1)} &=\begin{bmatrix}-30 & 20 & 20\end{bmatrix} \newline NOR:\newline\Theta^{(1)} &= \begin{bmatrix}10 & -20 & -20\end{bmatrix} \newline OR:\newline\Theta^{(1)} &= \begin{bmatrix}-10 & 20 & 20\end{bmatrix} \newline\end{align*}</script><p>则第一层参数矩阵如下：</p>
<script type="math/tex; mode=display">
\Theta^{(1)} =\begin{bmatrix}-30 & 20 & 20 \newline 10 & -20 & -20\end{bmatrix}</script><p>第二层参数矩阵如下：</p>
<script type="math/tex; mode=display">
\Theta^{(2)} =\begin{bmatrix}-10 & 20 & 20\end{bmatrix}</script><p>结合起来写就成为如下的形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& a^{(2)} = g(\Theta^{(1)} \cdot x) \newline& a^{(3)} = g(\Theta^{(2)} \cdot a^{(2)}) \newline& h_\Theta(x) = a^{(3)}\end{align*}</script><p>整合起来用表示为如下图：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficodbubwmj20hb09h40o.jpg" alt=""></p>
<h2 id="一对多分类（One-vs-all）的神经网络"><a href="#一对多分类（One-vs-all）的神经网络" class="headerlink" title="一对多分类（One-vs-all）的神经网络"></a>一对多分类（One-vs-all）的神经网络</h2><p>为了把数据分为多个种类，我们的预测函数可以返回一个向量值。现在我们说我们要把一组数据分为四个种类，我们会使用如下这个例子，把图片分为四类：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficog2w1kjj20h309en0f.jpg" alt=""><br>输出y应该具有如下四个类型：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficogyh306j205v02cq2y.jpg" alt=""><br>其中第j个元素值为1则说明预测分类为第j类，而且其他位置应该全部为0。<br>而我们的一对多分类模型可以表示为如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1ficoj0z725j208u02w3yn.jpg" alt=""><br>预测函数为如下向量的时候：</p>
<script type="math/tex; mode=display">
h_\Theta(x) =\begin{bmatrix}0 \newline 0 \newline 1 \newline 0 \newline\end{bmatrix}</script><p>我们就可以判断我们模型推断这张图片是摩托车。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$a^{(j)}_{i}$ —— 第j层第i个单元的激励值&lt;br&gt;$\Theta^{(j)}$ —— 第j层的权重矩阵，对应
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（三）逻辑回归与正则化</title>
    <link href="http://yoursite.com/2017/08/05/standford3/"/>
    <id>http://yoursite.com/2017/08/05/standford3/</id>
    <published>2017-08-05T11:26:51.000Z</published>
    <updated>2017-08-08T14:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提出背景"><a href="#提出背景" class="headerlink" title="提出背景"></a>提出背景</h2><p>现实生活经常会碰到的一种问题就是分类问题，通过机器学习我们可以让机器进行判断某一个事物的好坏或者对事物进行分类。例如判断肿瘤是否为恶性肿瘤，判断葡萄酒属于哪一等级的葡萄酒等。我们很容易想到可以利用线性回归来解决这类问题，通过判断预测值是否大于某一个值来进行对数据的分类，这看起来似乎可行，但实际上是有严重缺陷的,例如下图这种情况：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8vbfl9mvj20og077gmn.jpg" alt=""><br>其试图以预测值是否大于0.5来判断肿瘤是否为恶性肿瘤，但是当加入最右边的样例的时候，预测曲线显然出现了很大的偏置，导致模型不能够很好地拟合数据。<br>所以我们必须找到一种更好的办法来解决这种分类问题，逻辑回归便因此产生。</p>
<h2 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h2><p>逻辑回归模型可以用公式表示如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta (x) = g ( \theta^T x ) \newline \newline& z = \theta^T x \newline& g(z) = \dfrac{1}{1 + e^{-z}}\end{align*}</script><p>可以称之为S型函数（sigmoid function）或者逻辑函数其函数图形如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8vgh2up1j20l703rt8v.jpg" alt=""><br>取值范围为（0,1），通过这种转化，把原来的线性函数转化成为了更佳适用于分类问题的函数取值类型。<br>预测函数<script type="math/tex">h_{\theta}</script>会给出该模型认为其属于某一类型的可能性大小，比如<script type="math/tex">h_{\theta}=0.7</script>代表有70%的可能我们的输出是1，如果这个1是肿瘤是否恶性，那么我们可以说我们有70%的把握说这个肿瘤是恶性肿瘤，同时其为良性肿瘤的概率便是30%，显然满足如下关系：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta(x) = P(y=1 | x ; \theta) = 1 - P(y=0 | x ; \theta) \newline& P(y = 0 | x;\theta) + P(y = 1 | x ; \theta) = 1\end{align*}</script><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>为了把预测函数的值转化为离散的0/1取值，我们可以把预测函数转化为如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& g(z) \geq 0.5 \newline& when \; z \geq 0\end{align*}</script><p>我们根据前面逻辑函数的形式可以知道，当其输入Z≥0的时候，函数g的输出值将会大于或等于0.5，即如下表现形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& g(z) \geq 0.5 \newline& when \; z \geq 0\end{align*}</script><p>而且有如下的性质：</p>
<script type="math/tex; mode=display">
\begin{align*}z=0, e^{0}=1 \Rightarrow g(z)=1/2\newline z \to \infty, e^{-\infty} \to 0 \Rightarrow g(z)=1 \newline z \to -\infty, e^{\infty}\to \infty \Rightarrow g(z)=0 \end{align*}</script><p>如果此时我们把输入Z换成$\theta^TX$输入的话，就意味着：</p>
<script type="math/tex; mode=display">
\begin{align*}& h_\theta(x) = g(\theta^T x) \geq 0.5 \newline& when \; \theta^T x \geq 0\end{align*}</script><p>根据上面的表述，也即可以说：</p>
<script type="math/tex; mode=display">
\begin{align*}& \theta^T x \geq 0 \Rightarrow y = 1 \newline& \theta^T x < 0 \Rightarrow y = 0 \newline\end{align*}</script><p>其图形就是决策边界。决策边界是一条把y=0与y=1区域分开线，它是由预测函数本身参数决定的，是一种属性。<br>当决策边界是直线时表现为如下形式：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8w1lxc0tj20m907f0u0.jpg" alt=""><br>当然它也可能是其他各种非线性的形状如下所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8w30m5j9j20nf07i0u7.jpg" alt=""><br>根据Z的值是否大于零就可以确定区域内与区域外的分类情况。</p>
<h2 id="逻辑回归的代价函数"><a href="#逻辑回归的代价函数" class="headerlink" title="逻辑回归的代价函数"></a>逻辑回归的代价函数</h2><p>线性回归的代价函数看起来似乎也很符合逻辑回归的应用，但是经过实际观察得知其实并不如此。画出图形发现使其用于逻辑回归会成为如下的形状：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zmaz1b1j20a207274d.jpg" alt=""><br>显然函数是非凸的（convex），这样很可能不会得到全局最优解，因此需要找到一种新的代价函数形式专门用于逻辑回归，现在我们把新的形式定义如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& J(\theta) = \dfrac{1}{m} \sum_{i=1}^m \mathrm{Cost}(h_\theta(x^{(i)}),y^{(i)}) \newline & \mathrm{Cost}(h_\theta(x),y) = -\log(h_\theta(x)) \; & \text{if y = 1} \newline & \mathrm{Cost}(h_\theta(x),y) = -\log(1-h_\theta(x)) \; & \text{if y = 0}\end{align*}</script><p>当y=1的时候，代价函数的图像如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zppi64sj208g06tjru.jpg" alt=""><br>其单调递减，且当预测值趋于0时，代价函数的值趋于正无穷，当预测值为1时，代价函数的值为0。<br>当y=0的时候，代价函数的图像如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8zrft0jnj208j07sdg7.jpg" alt=""><br>其单调递增，且当预测值趋于1时，代价函数的值趋于正无穷，当预测值为0时，代价函数的值为0。<br>这很容易理解，当y=1的时候，预测为1当然是百分百准确的，代价必然为0，反之预测为0是一点都不准确的，同理对y=0的时候也是如此。<br>这两个函数都是凸函数，显然可以很好地应用于逻辑回归作为代价函数。</p>
<h2 id="简化代价函数并进行梯度下降"><a href="#简化代价函数并进行梯度下降" class="headerlink" title="简化代价函数并进行梯度下降"></a>简化代价函数并进行梯度下降</h2><p>显然对于两条方程并不能适用于梯度下降，我们必须对其简化，使之化为一条式子才能够进行梯度下降，因此可以写出新的费用形式如下：</p>
<script type="math/tex; mode=display">
\mathrm{Cost}(h_\theta(x),y) = - y \; \log(h_\theta(x)) - (1 - y) \log(1 - h_\theta(x))</script><p>显然其余前面的方程是等价的，由此转化成为了一条式子，并可以据此写出新的代价函数如下：</p>
<script type="math/tex; mode=display">
J(\theta) = - \frac{1}{m} \displaystyle \sum_{i=1}^m [y^{(i)}\log (h_\theta (x^{(i)})) + (1 - y^{(i)})\log (1 - h_\theta(x^{(i)}))]</script><p>可以向量化表示为：</p>
<script type="math/tex; mode=display">
\begin{align*} & h = g(X\theta)\newline & J(\theta) = \frac{1}{m} \cdot \left(-y^{T}\log(h)-(1-y)^{T}\log(1-h)\right) \end{align*}</script><p>由此就可以得到新的梯度下降的形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta) \newline & \rbrace\end{align*}</script><p>对其解出微分后的形式如下：</p>
<script type="math/tex; mode=display">
\begin{align*} & Repeat \; \lbrace \newline & \; \theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \newline & \rbrace \end{align*}</script><p>其形式和之前缩写的代价函数是一致的，并且可以向量化地表述为如下形式：</p>
<script type="math/tex; mode=display">
\theta := \theta - \frac{\alpha}{m} X^{T} (g(X \theta ) - \vec{y})</script><h2 id="高级最优化算法"><a href="#高级最优化算法" class="headerlink" title="高级最优化算法"></a>高级最优化算法</h2><p>比梯度下降法更加高级的算法有共轭梯度法、BFGS、L-BGFS等，这些算法都具有自动选取学习速率$\alpha$等能力，甚至能够在循环进行的过程中自动改变学习速率的值，并通常比梯度下降法快得多。但是多数情况下我们并不需要知道他们具体是怎么实现的，只要掌握运用即可。在Octave已经封装好了用以上几种方法求解最优参数值得函数”fminunc()”,我们只需要提供好参数直接进行调用求解即可。<br>代价函数依照以下形式编写：<br><figure class="highlight m"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function [jVal, gradient] <span class="built_in">=</span> costFunction(theta)</div><div class="line">  jVal <span class="built_in">=</span> [...code to compute J(theta)...];</div><div class="line">  gradient <span class="built_in">=</span> [...code to compute derivative of J(theta)...];</div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>则调用如下：<br><figure class="highlight m"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% GradObj表示是否可以利用梯度下降，MaxIter表示在聚集前最大可以循环的次数</span></div><div class="line"><span class="comment">% 提供给fminunc的参数有代价函数、用以求得最优解值的参数矩阵以及其他可选项。</span></div><div class="line">options <span class="built_in">=</span> optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">100</span>);</div><div class="line">initialTheta <span class="built_in">=</span> zeros(<span class="number">2</span>,<span class="number">1</span>);</div><div class="line">   [optTheta, functionVal, exitFlag] <span class="built_in">=</span> fminunc(@costFunction, initialTheta, options);</div></pre></td></tr></table></figure></p>
<p>运行之后，将会返回最优参数值、函数值以及一个表明是否已经聚集的标志。</p>
<h2 id="多重分类"><a href="#多重分类" class="headerlink" title="多重分类"></a>多重分类</h2><p>多重分类只要把每一组向数据独立出来与其余数据进行逻辑回归求解，得到对每一个类型的预测函数，输出可能性最大那个类型即可，可以列出公式如下：</p>
<script type="math/tex; mode=display">
\begin{align*}& y \in \lbrace0, 1 ... n\rbrace \newline& h_\theta^{(0)}(x) = P(y = 0 | x ; \theta) \newline& h_\theta^{(1)}(x) = P(y = 1 | x ; \theta) \newline& \cdots \newline& h_\theta^{(n)}(x) = P(y = n | x ; \theta) \newline& \mathrm{prediction} = \max_i( h_\theta ^{(i)}(x) )\newline\end{align*}</script><p>当n=2的时候，要进行一次逻辑回归，而当n≥3的时候，要进行n次逻辑回归，其示意图如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91m3vjjmj20d307ggmk.jpg" alt=""></p>
<h2 id="过拟合现象以及其解决方式"><a href="#过拟合现象以及其解决方式" class="headerlink" title="过拟合现象以及其解决方式"></a>过拟合现象以及其解决方式</h2><p>当进行线性回归的时候，待拟合函数的最高次数如果比较低的话，往往拟合效果会非常差。如果待拟合函数的最高次数足越高，一般与现行数据的拟合程度就会越好，但是这并不总是意见好事，有时就会出现一种叫过拟合的现象。一下三幅函数图分别代表了欠拟合、拟合较好、过拟合三种情况：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91qsi0j0j20es03v74c.jpg" alt=""><br>当出现过拟合现象的时候，预测函数能够非常好地拟合用于拟合的数据，但是却不能很好地把这些数据泛化到其他未输入的数据当中，造成高方差的情况，而且函数图像会变得没有规律。其出现的主要原因是因为函数的维度太大、以及训练集的数量太少。<br>为此，要解决过拟合的现象，我们可以人为或者使用特定的某种算法（PAC、因子分析等）去选择保留哪些特征，删掉掉哪些贡献不大的特征，当然这些特征对原函数肯定是有贡献的，删除掉必然导致某些信息的缺失，所以更好的办法是使用正则化处理，这样可以保留所有的特征，但是减少<script type="math/tex">\theta_j</script>的规模与大小，正则化尤其适用于那些贡献不大的特征比较多的场合。</p>
<h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><p>通过正则化可以通过对参数进行“惩罚”，让拟合函数的图形变得更加平滑，其应用于线性回归时候的伪代码如下所示：</p>
<script type="math/tex; mode=display">
\begin{align*} & \text{Repeat}\ \lbrace \newline & \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline & \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2...n\rbrace\newline & \rbrace \end{align*}</script><p>为什么通过加上惩罚可以使函数更加平滑呢？把其展开可以发现正则化其实是做了如下操作：</p>
<script type="math/tex; mode=display">
\theta_j := \theta_j(1 - \alpha\frac{\lambda}{m}) - \alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}</script><p>观察知道，除了$\theta_j$会在每次循环的时候先替换成一个比本身小一点点的值在进行更新，这样循环下来<script type="math/tex">\theta_j</script>的值都会减小一点点，达到了控制进行速度，减小参数值，从而更好地拟合数据的目的。<br>学到这里，我们就可以解决前面正规方程面对奇异矩阵的问题了，通过正则化，可以把矩阵变化成为一个可逆阵，只需要按照以下的公式进行：</p>
<script type="math/tex; mode=display">
\begin{align*}& \theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty \newline& \text{where}\ \ L = \begin{bmatrix} 0 & & & & \newline & 1 & & & \newline & & 1 & & \newline & & & \ddots & \newline & & & & 1 \newline\end{bmatrix}\end{align*}</script><p>即加上了$\lambda·L$,实现了其正则化，可以证明知道这样获得矩阵是可逆的，故正规方程可解。<br>接下来介绍用于逻辑回归的正则化，其能够把决策边界变得更加光滑，从而泛化到更多的数据，效果如下图所示：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi91xnqoy7j20dr07f3zk.jpg" alt=""><br>其正则化的代价函数如下：</p>
<script type="math/tex; mode=display">
J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2</script><p>注意一定要从i=1开始，对应的要把i=0的常数项排除在正则化之外，否则可能会带来不好的影响。所以对逻辑回归进行梯度下降形式如下：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi92h6irgaj20dj06jmy8.jpg" alt=""><br>结合正规化以及之前所学的高级最优化函数，我们已经可以解决绝大部分的线性回归、逻辑回归问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提出背景&quot;&gt;&lt;a href=&quot;#提出背景&quot; class=&quot;headerlink&quot; title=&quot;提出背景&quot;&gt;&lt;/a&gt;提出背景&lt;/h2&gt;&lt;p&gt;现实生活经常会碰到的一种问题就是分类问题，通过机器学习我们可以让机器进行判断某一个事物的好坏或者对事物进行分类。例如判断肿瘤
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="梯度下降法" scheme="http://yoursite.com/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（二）多变量线性回归</title>
    <link href="http://yoursite.com/2017/08/05/standford2/"/>
    <id>http://yoursite.com/2017/08/05/standford2/</id>
    <published>2017-08-05T06:28:36.000Z</published>
    <updated>2017-08-08T14:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$n$ —— 特征数量<br>$x^{(i)}$ —— 第i组训练样例的特征值<br>$x^{(i)}_j$ —— 第i组训练样例的第j个特征值</p>
<h2 id="矩阵向量乘法的应用"><a href="#矩阵向量乘法的应用" class="headerlink" title="矩阵向量乘法的应用"></a>矩阵向量乘法的应用</h2><p>矩阵向量乘法是向量化的基础，给定<script type="math/tex">theta_i</script>的值以及特征向量$X$,利用矩阵向量乘法计算<script type="math/tex">h_{\theta}</script>的公式如下：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}1&a\\1& b\\1 &c \\ 1&d \end{bmatrix} \times \begin{bmatrix}\theta_1\\\theta_2\end{bmatrix}= \begin{bmatrix}h_{\theta}(a)\\ h_{\theta}(b)\\ h_{\theta}(c)\\ h_{\theta}(d)\end{bmatrix}</script><p>即预测值 = 特征矩阵 * 参数矩阵。当参数矩阵为n维的时候，我们可以同时对几组预测函数进行计算。<br>之后的多变量线性回归向量化也依照此形式对$h_{\theta}$的值进行计算，而尽量避免对for循环的使用。</p>
<h2 id="逆矩阵复习"><a href="#逆矩阵复习" class="headerlink" title="逆矩阵复习"></a>逆矩阵复习</h2><p>仅m*m方阵有逆矩阵（只有这种情况相乘可以得到单位矩阵），其他情况利用Octave求得的矩阵均为奇异矩阵（退化矩阵）。<br>用Octave对矩阵A求逆矩阵可以用inv(A)，这个时候必须保证A是方阵，但当不是的时候也可以求得逆矩阵，利用pinv(A)即可，也可以得到一个不错的结果，不过一般不建议这样做。</p>
<h2 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h2><p>多变量线性回归要解决的是如下方程的最优参数值（代价最小）选取问题：</p>
<script type="math/tex; mode=display">
h_\theta(x) = \theta_0+\theta_1x_1+\theta_2x_2+...+\theta_nx_n</script><p>其与单变量线性回归形式非常相似，只需要把其延展到多变量即可。</p>
<h2 id="多变量线性回归的代价函数"><a href="#多变量线性回归的代价函数" class="headerlink" title="多变量线性回归的代价函数"></a>多变量线性回归的代价函数</h2><p>根据已经知道的单变量线性回归的代价函数的定义，延展其为多变量线性回归方程的形式如下：</p>
<script type="math/tex; mode=display">
J(\theta_0,\theta_1,...,\theta_n)=\frac{1}{2m}\sum _{i=1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})^2</script><h2 id="用梯度下降法求多变量线性回归问题"><a href="#用梯度下降法求多变量线性回归问题" class="headerlink" title="用梯度下降法求多变量线性回归问题"></a>用梯度下降法求多变量线性回归问题</h2><p>已经得到多变量线性回归的代价函数，同样是基于同步更新，则进行梯度下降的伪代码可以写成如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& \text{repeat until convergence:} \; \lbrace \newline \; & \theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1,...,\theta_n) & \text{for j := 0...n}\newline \rbrace\end{align*}</script><p>进行微分后就是如下形式：</p>
<script type="math/tex; mode=display">
\begin{align*}& \text{repeat until convergence:} \; \lbrace \newline \; & \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \; & \text{for j := 0...n}\newline \rbrace\end{align*}</script><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>目的：确保变量都在一个相同的规模与比例之内，比如全部缩放为-1~1的范围之内，从而使梯度下降法收敛速度更快。<br>这里介绍特征缩放的其中一个方法就是<strong>均值归一化</strong>，即每个变量减去该变量的平均值，再除以极差或者方差，这样就可以控制变量范围在-1~1之内了。</p>
<p>E.g.房子的尺寸$x_1$变化范围为0~2000$feet^2$，房子的房间数$x_2$的变化范围为1~5，显然他们的规模相差非常大，如果不进行特征缩放就开始跑梯度下降，那么其下降过程的轨迹会变成如下这样：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8t2y2iz0j208v09p3yy.jpg" alt=""><br>可见其要通过比较多次的循环才能够达到全局最优解，通过特征缩放之后轮廓图会比较接近于一个圆形，此时的下降过程就如下图：<br><img src="https://ws1.sinaimg.cn/large/618874b0gy1fi8ta96pyqj209d063dg2.jpg" alt=""><br>显然其收敛速度更快，更快达到了全局最优点。</p>
<h2 id="确保梯度下降法能够正确进行"><a href="#确保梯度下降法能够正确进行" class="headerlink" title="确保梯度下降法能够正确进行"></a>确保梯度下降法能够正确进行</h2><p>为了让梯度下降法能够正确地进行，我们需要选取合适的学习速率$\alpha$，通过观察代价函数随着循环进行的具体走向不失为一个好办法，因为好的曲线应该是每次循环进行代价函数的值都会下降并且具有良好的收敛速度。尝试的时候从小数开始，每次乘10再观察1/3处的值，每次输出图形即可。当然这一部分也不总是通过手动完成，在之后会接触能够自动选取学习速率以及能够随着循环次数改变学习速率，使其收敛更加迅速的高级算法。</p>
<h2 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h2><p>多项式回归即如下的形式：</p>
<script type="math/tex; mode=display">
h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+...+\theta_nx^n</script><p>显然，通过取根，更改变化范围，我们同样可以化成多变量线性回归求解，过程就省略不说了。</p>
<h2 id="正规方程解多变量线性回归"><a href="#正规方程解多变量线性回归" class="headerlink" title="正规方程解多变量线性回归"></a>正规方程解多变量线性回归</h2><p>正规方程求解参数值是利用一种解析性的方法求解参数的选取问题，且可以保证得到全局最优解，且在变量比较少的情况下具有优秀的运行速度。其向量化的表达形式如下：</p>
<script type="math/tex; mode=display">
\theta = (X^TX)^{-1}X^Ty</script><p>利用Octave表示即：pinv(x’*x)*x’*y<br>其证明过程略。相比于梯度下降，其具有不需要选择虚席速率、不需要多次循环且一定能获得全局最优解的优点，但是由于计算逆矩阵的复杂度是$O(n^3)$,一旦n比较大的时候，运行速度就会非常缓慢，而此时的梯度下降法依然能够以比较高的效率继续进行，同时，在某两组变量线性相关，或者样例数少于特征数的时候，会出现逆矩阵奇异的情况，无法使用普通方程，此时可以通过选主元素减少变量或者正则化的方法解决问题，这会在后面有所提及。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$n$ —— 特征数量&lt;br&gt;$x^{(i)}$ —— 第i组训练样例的特征值&lt;br&gt;$x^{(i)}_j$ —— 第i组训
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="正规方程" scheme="http://yoursite.com/tags/%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 三值排序 贪心</title>
    <link href="http://yoursite.com/2017/07/21/triplesort/"/>
    <id>http://yoursite.com/2017/07/21/triplesort/</id>
    <published>2017-07-21T07:06:39.000Z</published>
    <updated>2017-07-21T07:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="https://nanti.jisuanke.com/t/27" target="_blank" rel="external">https://nanti.jisuanke.com/t/27</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>排序是一种很频繁的计算任务。一个实际的例子是，当我们给某项竞赛的优胜者按金银铜牌排序的时候。在这个任务中可能的值只有三种1，2和3。我们用交换的方法把他排成升序的。</p>
<p>写一个程序计算出，计算出的一个包括1、2、3三种值的数字序列，排成升序所需的最少交换次数。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入第1行为类别的数量N（1≤N≤1000）</p>
<p>输入第2行到第N+1行，每行包括一个数字（1或2或3）。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出包含一行，为排成升序所需的最少交换次数。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>9<br>2<br>2<br>1<br>3<br>3<br>3<br>2<br>3<br>1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>4</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>最少交换多少次可以让3值按照升序排序？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>显然要用贪心解决。首先知道的是有三种方式交换是最优的：<br>1.1区中的2和2区中的1交换，一次能让两个数字到达正确位置。<br>2.1区中的3和3区中的2交换，同上。<br>3.2区中的3和3区中的2交换，同上。<br>本体显然有最优解结构，且交换次序不影响最优解结构，那么我们可以换一个角度看，先把1全部归位到1区，然后只要再令2中3和3中2回到正确位置即可，这个次数为max（2中3数目，3中2数目）。加上1归位的操作次数，便是贪心最优解。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        b[i]=a[i];</div><div class="line">    &#125;</div><div class="line">    sort(a,a+n);</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,tempx=<span class="number">0</span>,tempy=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span> &amp;&amp; b[i]!=<span class="number">1</span>)</div><div class="line">            ans++;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">2</span> &amp;&amp; b[i]==<span class="number">3</span>)</div><div class="line">            tempx++;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">3</span> &amp;&amp; b[i]==<span class="number">2</span>)</div><div class="line">            tempy++;</div><div class="line">    &#125;</div><div class="line">    ans+=max(tempx,tempy);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/27&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="三值排序" scheme="http://yoursite.com/tags/%E4%B8%89%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Barn Repair 贪心 牛棚问题</title>
    <link href="http://yoursite.com/2017/07/21/13barn1/"/>
    <id>http://yoursite.com/2017/07/21/13barn1/</id>
    <published>2017-07-21T06:26:15.000Z</published>
    <updated>2017-07-21T06:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;S=barn1" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;S=barn1</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>It was a dark and stormy night that ripped the roof and gates off the stalls that hold Farmer John’s cows. Happily, many of the cows were on vacation, so the barn was not completely full.</p>
<p>The cows spend the night in stalls that are arranged adjacent to each other in a long line. Some stalls have cows in them; some do not. All stalls are the same width.</p>
<p>Farmer John must quickly erect new boards in front of the stalls, since the doors were lost. His new lumber supplier will supply him boards of any length he wishes, but the supplier can only deliver a small number of total boards. Farmer John wishes to minimize the total length of the boards he must purchase.</p>
<p>Given M (1 &lt;= M &lt;= 50), the maximum number of boards that can be purchased; S (1 &lt;= S &lt;= 200), the total number of stalls; C (1 &lt;= C &lt;= S) the number of cows in the stalls, and the C occupied stall numbers (1 &lt;= stall_number &lt;= S), calculate the minimum number of stalls that must be blocked in order to block all the stalls that have cows in them.</p>
<p>Print your answer as the total number of stalls blocked.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    M, S, and C (space separated)<br>Lines 2-C+1:    Each line contains one integer, the number of an occupied stall.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line with one integer that represents the total number of stalls blocked.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4 50 18<br>3<br>4<br>6<br>8<br>14<br>15<br>16<br>17<br>21<br>25<br>26<br>27<br>30<br>31<br>40<br>41<br>42<br>43</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>25</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>可以任意使用任何规格的木板，给出牛棚的位置，用最少长度的m块模板去覆盖所有牛棚。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心之前练得真的不多，本身也不喜欢做贪心，所以水平可能因此提不上去吧。这题的思路比较简单，算一道经典题。先用一块大木板去覆盖整个最左边和最右边的牛棚，容易知道使用所有m块木板是最优策略，因为如果少使用一块的话必定多一块木板覆盖不用覆盖的区间。然后m块木板必定产生m-1个空隙，这个就是我们可以优化掉的空间，每次选取最大的缝隙即可，直到选取到m-1个。最后答案就是总长度减去最左边不用覆盖的区间和最右边不用覆盖的区间，再减去刚才选取的优化区间。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: barn1</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</div><div class="line"><span class="keyword">int</span> m,s,c,board[maxn],pos[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"barn1.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"barn1.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;m,&amp;s,&amp;c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos[i]);</div><div class="line">    sort(pos,pos+c);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c;++i) board[i]=pos[i]-pos[i<span class="number">-1</span>]<span class="number">-1</span>;</div><div class="line">    sort(board+<span class="number">1</span>,board+c,cmp);</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>,ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c &amp;&amp; cnt!=m;++i)&#123;</div><div class="line">        ans+=board[i];</div><div class="line">        ++cnt;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s-ans-(pos[<span class="number">0</span>]<span class="number">-1</span>)-(s-pos[c<span class="number">-1</span>]));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=fnrIvV5X91K&amp;amp;S
    
    </summary>
    
      <category term="其他 贪心" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E8%B4%AA%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Dual Palindromes</title>
    <link href="http://yoursite.com/2017/07/16/1-2dualpal/"/>
    <id>http://yoursite.com/2017/07/16/1-2dualpal/</id>
    <published>2017-07-16T11:50:48.000Z</published>
    <updated>2017-07-16T11:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;S=dualpal" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;S=dualpal</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A number that reads the same from right to left as when read from left to right is called a palindrome. The number 12321 is a palindrome; the number 77778 is not. Of course, palindromes have neither leading nor trailing zeroes, so 0220 is not a palindrome.</p>
<p>The number 21 (base 10) is not palindrome in base 10, but the number 21 (base 10) is, in fact, a palindrome in base 2 (10101).</p>
<p>Write a program that reads two numbers (expressed in base 10):</p>
<p>N (1 &lt;= N &lt;= 15)<br>S (0 &lt; S &lt; 10000)<br>and then finds and prints (in base 10) the first N numbers strictly greater than S that are palindromic when written in two or more number bases (2 &lt;= base &lt;= 10).<br>Solutions to this problem do not require manipulating integers larger than the standard 32 bits.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>A single line with space separated integers N and S.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>N lines, each with a base 10 number that is palindromic when expressed in at least two of the bases 2..10. The numbers should be listed in order from smallest to largest.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>25</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>26<br>27<br>28</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出十进制数大于S的前N个数，他们在十进制以内存在两个以上的回文数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>和上一题差不多的思路吧，变换进制检测即可,水题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: dualpal</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n,s;</div><div class="line"><span class="keyword">char</span> now[<span class="number">35</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> base=<span class="number">2</span>,length_now,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(base&lt;=<span class="number">10</span> &amp;&amp; cnt&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">int</span> temp=num;</div><div class="line">        length_now=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(temp)&#123;</div><div class="line">            now[length_now]=temp%base+<span class="string">'0'</span>;</div><div class="line">            length_now++;</div><div class="line">            temp/=base;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length_now/<span class="number">2</span> &amp;&amp; flag;++i)&#123;</div><div class="line">            <span class="keyword">if</span>(now[i]!=now[length_now<span class="number">-1</span>-i])</div><div class="line">                flag=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ++base;</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            cnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"dualpal.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"dualpal.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    ++s;</div><div class="line">    <span class="keyword">while</span>(cnt&lt;n)&#123;</div><div class="line">        <span class="keyword">if</span>(check(s))&#123;</div><div class="line">            ++cnt;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">        &#125;</div><div class="line">        ++s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=FXd0kY3vFTM&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="USACO" scheme="http://yoursite.com/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Palsquare</title>
    <link href="http://yoursite.com/2017/07/16/1-2palsquare/"/>
    <id>http://yoursite.com/2017/07/16/1-2palsquare/</id>
    <published>2017-07-16T07:53:19.000Z</published>
    <updated>2017-07-16T07:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;S=palsquare" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;S=palsquare</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Palindromes are numbers that read the same forwards as backwards. The number 12321 is a typical palindrome.</p>
<p>Given a number base B (2 &lt;= B &lt;= 20 base 10), print all the integers N (1 &lt;= N &lt;= 300 base 10) such that the square of N is palindromic when expressed in base B; also print the value of that palindromic square. Use the letters ‘A’, ‘B’, and so on to represent the digits 10, 11, and so on.</p>
<p>Print both the number and its square in base B.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p> A single line with B, the base (specified in base 10).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Lines with two integers represented in base B. The first integer is the number whose square is palindromic; the second integer is the square itself. NOTE WELL THAT BOTH INTEGERS ARE IN BASE B!</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>10</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 1<br>2 4<br>3 9<br>11 121<br>22 484<br>26 676<br>101 10201<br>111 12321<br>121 14641<br>202 40804<br>212 44944<br>264 69696</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个进制（小于20）判断其平方数在此进制下是否为回文数，如果是的话输出这个数字在该进制下的值以及其平方数在此进制下的值。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题，大于10的时候转换一下即可，代码要写得简洁凝练。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: palsquare</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">char</span> numa[<span class="number">10000</span>],numb[<span class="number">10000</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> length_i=<span class="number">0</span>,length_now=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i)&#123;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> judge=i%n;</div><div class="line">        <span class="keyword">if</span>(judge&gt;=<span class="number">10</span>)&#123;</div><div class="line">            c=judge<span class="number">-10</span>+<span class="string">'A'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            c=<span class="string">'0'</span>+judge;</div><div class="line">        &#125;</div><div class="line">        numa[length_i]=c;</div><div class="line">        length_i++;</div><div class="line">        i/=n;</div><div class="line">    &#125;</div><div class="line">    numa[length_i]=<span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">int</span> temp = now;</div><div class="line">    <span class="keyword">while</span>(temp)&#123;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> judge=temp%n;</div><div class="line">        <span class="keyword">if</span>(judge&gt;=<span class="number">10</span>)&#123;</div><div class="line">            c=judge<span class="number">-10</span>+<span class="string">'A'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            c=<span class="string">'0'</span>+judge;</div><div class="line">        &#125;</div><div class="line">        numb[length_now]=c;</div><div class="line">        length_now++;</div><div class="line">        temp/=n;</div><div class="line">    &#125;</div><div class="line">    numb[length_now]=<span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length_i/<span class="number">2</span>;++j)&#123;</div><div class="line">        <span class="keyword">char</span> to_s=numa[j];</div><div class="line">        numa[j]=numa[length_i<span class="number">-1</span>-j];</div><div class="line">        numa[length_i<span class="number">-1</span>-j]=to_s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length_now/<span class="number">2</span>;++j)&#123;</div><div class="line">        <span class="keyword">if</span>(numb[j]!=numb[length_now<span class="number">-1</span>-j])</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"palsquare.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"palsquare.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">300</span>;++i)&#123;</div><div class="line">        now=i*i;</div><div class="line">        <span class="keyword">if</span>(check(i))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,numa,numb);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=ioYmQLbYXvn&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Namenum</title>
    <link href="http://yoursite.com/2017/07/10/12namenum/"/>
    <id>http://yoursite.com/2017/07/10/12namenum/</id>
    <published>2017-07-10T06:04:08.000Z</published>
    <updated>2017-07-10T06:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=namenum" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=namenum</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Among the large Wisconsin cattle ranchers, it is customary to brand cows with serial numbers to please the Accounting Department. The cow hands don’t appreciate the advantage of this filing system, though, and wish to call the members of their herd by a pleasing name rather than saying, “C’mon, #4734, get along.”</p>
<p>Help the poor cowhands out by writing a program that will translate the brand serial number of a cow into possible names uniquely associated with that serial number. Since the cow hands all have cellular saddle phones these days, use the standard Touch-Tone(R) telephone keypad mapping to get from numbers to letters (except for “Q” and “Z”):</p>
<pre><code>      2: A,B,C     5: J,K,L    8: T,U,V
      3: D,E,F     6: M,N,O    9: W,X,Y
      4: G,H,I     7: P,R,S
</code></pre><p>Acceptable names for cattle are provided to you in a file named “dict.txt”, which contains a list of fewer than 5,000 acceptable cattle names (all letters capitalized). Take a cow’s brand number and report which of all the possible words to which that number maps are in the given dictionary which is supplied as dict.txt in the grading environment (and is sorted into ascending order).</p>
<p>For instance, the brand number 4734 produces all the following names:</p>
<p>GPDG GPDH GPDI GPEG GPEH GPEI GPFG GPFH GPFI GRDG GRDH GRDI<br>GREG GREH GREI GRFG GRFH GRFI GSDG GSDH GSDI GSEG GSEH GSEI<br>GSFG GSFH GSFI HPDG HPDH HPDI HPEG HPEH HPEI HPFG HPFH HPFI<br>HRDG HRDH HRDI HREG HREH HREI HRFG HRFH HRFI HSDG HSDH HSDI<br>HSEG HSEH HSEI HSFG HSFH HSFI IPDG IPDH IPDI IPEG IPEH IPEI<br>IPFG IPFH IPFI IRDG IRDH IRDI IREG IREH IREI IRFG IRFH IRFI<br>ISDG ISDH ISDI ISEG ISEH ISEI ISFG ISFH ISFI<br>As it happens, the only one of these 81 names that is in the list of valid names is “GREG”.</p>
<p>Write a program that is given the brand number of a cow and prints all the valid names that can be generated from that brand number or ``NONE’’ if there are no valid names. Serial numbers can be as many as a dozen digits long.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>A single line with a number from 1 through 12 digits in length.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A list of valid names that can be generated from the input, one per line, in ascending alphabetical order.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4734</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>GREG</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>牛之间用手机进行练习，给出牛的名单表和手机按键，判断这个牛是否在名单表中。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很容易知道按照输入来枚举的话数量很爆炸，所以直接按读入文件来进行枚举，转换后和输入相同就输出它就可以了。本题在另一方面练习了文件流的读写。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: namenum</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> alpha[<span class="number">26</span>]=&#123;<span class="string">'2'</span>,<span class="string">'2'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'3'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'4'</span>,</div><div class="line">    <span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'5'</span>,<span class="string">'5'</span>,  <span class="string">'6'</span>,<span class="string">'6'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,</div><div class="line">    <span class="string">'0'</span>,<span class="string">'7'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'8'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'9'</span>,<span class="string">'9'</span>,<span class="string">'0'</span>&#125;;</div><div class="line"><span class="built_in">string</span> words,tmp,data;</div><div class="line"><span class="keyword">bool</span> flag;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//定向程序IO。</span></div><div class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"namenum.in"</span>)</span></span>;</div><div class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"namenum.out"</span>)</span></span>;</div><div class="line">    <span class="comment">//不进行数字操作，只进行比较操作，直接用string处理。</span></div><div class="line">    fin&gt;&gt;data;</div><div class="line">    <span class="comment">//定向名字文件IO。</span></div><div class="line">    <span class="function">ifstream <span class="title">tin</span><span class="params">(<span class="string">"dict.txt"</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span>(tin&gt;&gt;words)&#123;</div><div class="line">        <span class="comment">//获取当前单词长度，再分开判断。</span></div><div class="line">        <span class="keyword">int</span> wnum=words.size();</div><div class="line">        tmp=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;wnum;++i)</div><div class="line">            tmp+=alpha[words[i]<span class="number">-65</span>];</div><div class="line">        <span class="keyword">if</span>(tmp==data)&#123;</div><div class="line">            fout&lt;&lt;words&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!flag) fout&lt;&lt;<span class="string">"NONE"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Transformations</title>
    <link href="http://yoursite.com/2017/07/10/12transform/"/>
    <id>http://yoursite.com/2017/07/10/12transform/</id>
    <published>2017-07-10T05:36:06.000Z</published>
    <updated>2017-07-10T05:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=transform" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;S=transform</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A square pattern of size N x N (1 &lt;= N &lt;= 10) black and white square tiles is transformed into another square pattern. Write a program that will recognize the minimum transformation that has been applied to the original pattern given the following list of possible transformations:</p>
<p>#1: 90 Degree Rotation: The pattern was rotated clockwise 90 degrees.<br>#2: 180 Degree Rotation: The pattern was rotated clockwise 180 degrees.<br>#3: 270 Degree Rotation: The pattern was rotated clockwise 270 degrees.<br>#4: Reflection: The pattern was reflected horizontally (turned into a mirror image of itself by reflecting around a vertical line in the middle of the image).<br>#5: Combination: The pattern was reflected horizontally and then subjected to one of the rotations (#1-#3).<br>#6: No Change: The original pattern was not changed.<br>#7: Invalid Transformation: The new pattern was not obtained by any of the above methods.<br>In the case that more than one transform could have been used, choose the one with the minimum number above.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    A single integer, N<br>Line 2..N+1:    N lines of N characters (each either `@’ or `-‘); this is the square before transformation<br>Line N+2..2*N+1:    N lines of N characters (each either `@’ or `-‘); this is the square after transformation</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line containing the number from 1 through 7 (described above) that categorizes the transformation required to change from the `before’ representation to the `after’ representation.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3</p>
<h2 id=""><a href="#" class="headerlink" title="@-@"></a>@-@</h2><p>@@-<br>@-@<br>@—<br>—@</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出原始矩阵和目标矩阵，一共有七种转换方式，给出最小可以达到目标矩阵的转换方式的编号。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>计算一下转化的公式，之后优雅地顺序执行判断即可,练习基本功的好题。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: transform</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</div><div class="line"><span class="keyword">char</span> m[maxn][maxn],t[maxn][maxn],a[maxn][maxn],now[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpy</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            t[i][j]=now[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            now[i][j]=m[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rot90</span><span class="params">()</span></span>&#123;</div><div class="line">    cpy();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            now[i][j]=t[n<span class="number">-1</span>-j][i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge4</span><span class="params">()</span></span>&#123;</div><div class="line">    cpy();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">            now[i][j]=t[i][n<span class="number">-1</span>-j];</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge5</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> tt[maxn][maxn];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</div><div class="line">            tt[i][j]=now[i][n<span class="number">-1</span>-j];</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(tt[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(now[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> ok5=<span class="literal">false</span>;</div><div class="line">    init();</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    rot90();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span>(judge5())</div><div class="line">        ok5=<span class="literal">true</span>;</div><div class="line">    init();</div><div class="line">    judge4();</div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    <span class="keyword">if</span>(ok5)</div><div class="line">        <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="keyword">if</span>(m[i][j]!=a[i][j])</div><div class="line">                <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"transform.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"transform.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;m[i][j];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=7LsqvWoYMNU&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>斯坦福机器学习（一）单变量线性回归</title>
    <link href="http://yoursite.com/2017/06/15/unvariablegradient/"/>
    <id>http://yoursite.com/2017/06/15/unvariablegradient/</id>
    <published>2017-06-15T06:19:52.000Z</published>
    <updated>2017-08-05T11:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h2><p>$m$ —— 训练集中训练样本个个数<br>$x’s$ —— 输入变量/特征量(即$features$，用$X_i$刻画样本数)<br>$y’s$ —— 输出变量/约定变量</p>
<h2 id="监督学习与回归问题"><a href="#监督学习与回归问题" class="headerlink" title="监督学习与回归问题"></a>监督学习与回归问题</h2><p>监督学习指机器能够通过使用包含特征量、已知结果的训练集训练，具备能够对问题给出“正确答案”的能力。<br>回归问题指能够机器能够对问题给出一个预计的真值输出（相对于分类问题）。</p>
<h2 id="单变量线性回归要解决的问题"><a href="#单变量线性回归要解决的问题" class="headerlink" title="单变量线性回归要解决的问题"></a>单变量线性回归要解决的问题</h2><p>$Hypothesis: h_\theta(x) = \theta_0 + \theta_1x$<br>$\theta_i’s: Parameters$<br>$How\ to\ choose\ \theta_i’s?$</p>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>为了解决$\theta_0$和$\theta_1$的选择问题，使它能够很好地拟合训练集的已知数据，我们必须引入评判模型误差的手段，这就是将要说明的代价函数，即Cost Function。<br>针对前面的公式，我们现在要解决两个参数$\theta_0$和$\theta_1$的选取，而代价函数定义为：</p>
<script type="math/tex; mode=display">
J(\theta_1,\theta_2)=\frac{1}{2m}\sum_{i=1}^{m}(h_0(x_i)-y_i)^2</script><p>可以从公式看出，其做的是计算当前<script type="math/tex">\theta_0</script>和<script type="math/tex">\theta_1</script>的确定的预测函数与精确已知值的方差。<br>我们构造模型的目标就是<script type="math/tex">\min_{\theta_0,\theta_1} J(\theta_0,\theta_1)</script><br>当仅有一个参数$\theta_1$时的代价函数图：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fglwia2t55j308n081aap.jpg" alt=""><br>两个参数$\theta_0$和$\theta_1$时的代价函数<strong>立体图</strong>：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fglwmjy7ovj30db0a1q6u.jpg" alt=""><br>两个参数$\theta_0$和$\theta_1$时的代价函数<strong>轮廓图</strong>：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fglwoswiluj30cn0bxq7i.jpg" alt=""><br>其最中心点就是为局部最优点取值对应的点位。</p>
<h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><p>梯度下降法能通过下山得到问题的一个最优解，其大多数情况是局部最优解，不一定为全局最优解。<br>梯度下降法的算法方程如下:</p>
<script type="math/tex; mode=display">
\begin{align*} \text{repeat until convergence: } \lbrace & \newline
\theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1)  \newline\rbrace& \end{align*}</script><p>公式中的$\theta_0$和$\theta_1$的每次更新都是同步的，写代码的时候不能够拆分成先后写，这样有时虽然也可能得到正确结果，但也可能导致不可预知的错误。<br>正确的同步更新写法可以写为：</p>
<script type="math/tex; mode=display">
\begin{align}
temp_0 := \theta_0 - \frac{\partial }{\partial \theta_0}J(\theta_0,\theta_1)\\
temp_1 := \theta_0 - \frac{\partial }{\partial \theta_1}J(\theta_0,\theta_1)\\
\theta_0 := temp_0\\
\theta_1 := temp_1\\
\end{align}</script><p>梯度下降(也称下山）图解：<br><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fglx7z9ztyj30ff07tjus.jpg" alt=""><br>注意，其中:<br>$\alpha$ —— 学习速率(即learning rate)，其决定了下山的步子迈多大，如果$\alpha$大的话说明迈的是大步子，其收敛速度快，但是如果过快的话会导致无法收敛的问题,而$\alpha$选取过小的话又会导致收敛速度过慢的问题。</p>
<h2 id="学习速率的选取"><a href="#学习速率的选取" class="headerlink" title="学习速率的选取"></a>学习速率的选取</h2><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fglxmaiymkj30hy09xdh9.jpg" alt=""><br>由图可以得出如下结论：<br>1.如果$\alpha$选取过小，则下降会非常缓慢，迟迟无法收敛。<br>2.如果$\alpha$选取过小，则步子过大会迈过最优点不断迭代发散导致振荡、溢出，得不到最优解。<br>为了选择最佳的学习速率，我们可以通过Octave画图观察不同迭代速率收敛的速度来选取，若每次迭代代价函数的值都在下降，即单调递减，再次基础上保证循环次数最少，即是我们想要的$\alpha$值。<br>尝试$\alpha$的时候可以从0.01、0.03、0.1、0.3、1……来进行粗调，再进行微调即可。</p>
<h2 id="单变量线性回归的梯度下降法运用"><a href="#单变量线性回归的梯度下降法运用" class="headerlink" title="单变量线性回归的梯度下降法运用"></a>单变量线性回归的梯度下降法运用</h2><p>对前面的代价公式求导后，得到算法流程如下：</p>
<script type="math/tex; mode=display">
\begin{align*} \text{repeat until convergence: } \lbrace & \newline \theta_0 := & \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}(h_\theta(x_{i}) - y_{i}) \newline \theta_1 := & \theta_1 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}\left((h_\theta(x_{i}) - y_{i}) x_{i}\right) \newline \rbrace& \end{align*}</script><p>注意，实现时一定要避免使用for循环结构，直接利用向量化解决问题会使得算法效率极大提高。<br>在变量$x$的矩阵当中，一定要记得添加一列全为1的<script type="math/tex">X_{0}</script>伴随矩阵于最左边。所以我们可以得到$X * \theta = h_{\theta}(x)$，其中X为特征矩阵。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，单变量线性回归问题的知识点全部介绍完，利用训练集求出的参数值就可以把模型应用于解决实际问题，它是之后多变量线性回归（多于一个特征值）的基础，需要牢固掌握，以及能够熟练编写代码解决实际问题。同时要注意编写程序的时候一定要应用向量化提高代码的执行效率，这需要对线性代数知识有扎实的基础。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约定符号&quot;&gt;&lt;a href=&quot;#约定符号&quot; class=&quot;headerlink&quot; title=&quot;约定符号&quot;&gt;&lt;/a&gt;约定符号&lt;/h2&gt;&lt;p&gt;$m$ —— 训练集中训练样本个个数&lt;br&gt;$x’s$ —— 输入变量/特征量(即$features$，用$X_i$刻画样本
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="梯度下降法" scheme="http://yoursite.com/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.2 Milking Cows</title>
    <link href="http://yoursite.com/2017/06/12/12milking/"/>
    <id>http://yoursite.com/2017/06/12/12milking/</id>
    <published>2017-06-11T16:34:37.000Z</published>
    <updated>2017-06-11T16:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;S=milk2" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;S=milk2</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Three farmers rise at 5 am each morning and head for the barn to milk three cows. The first farmer begins milking his cow at time 300 (measured in seconds after 5 am) and ends at time 1000. The second farmer begins at time 700 and ends at time 1200. The third farmer begins at time 1500 and ends at time 2100. The longest continuous time during which at least one farmer was milking a cow was 900 seconds (from 300 to 1200). The longest time no milking was done, between the beginning and the ending of all milking, was 300 seconds (1500 minus 1200).</p>
<p>Your job is to write a program that will examine a list of beginning and ending times for N (1 &lt;= N &lt;= 5000) farmers milking N cows and compute (in seconds):</p>
<p>The longest time interval at least one cow was milked.<br>The longest time interval (after milking starts) during which no cows were being milked.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    The single integer, N<br>Lines 2..N+1:    Two non-negative integers less than 1,000,000, respectively the starting and ending time in seconds after 0500</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line with two integers that represent the longest continuous time of milking and the longest idle time.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3<br>300 1000<br>700 1200<br>1500 2100</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>900 300</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出每头牛的工作时间段，输出最长至少一头牛的工作时间长度以及最长没有妞工作的时间长度。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>时间按开始时间早晚排序，用cur维护当前最长的从头到尾的时间段，若开始时间在cur的结束时间之前，且当前时间段的结束时间&gt;cur的结束时间，则更新cur的结束时间为当前时间的结束时间，否则如果当前时间段开始时间&gt;=cur的结束时间，而且结束时间&gt;=cur的结束时间，说明这个时间段在cur之外，则维护tnomilk的值和tmilk的值，且令这个时间段成为cur。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> ID: hyson601</div><div class="line"> PROG: milk2</div><div class="line"> LANG: C++11</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> nmilking,tmilk,tnomilk,t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> begin;</div><div class="line">    <span class="keyword">int</span> end;</div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(node a,node b)&#123;</div><div class="line">        <span class="keyword">return</span> a.begin&lt;b.begin;</div><div class="line">    &#125;</div><div class="line">&#125;milking[maxn],cur;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"milk2.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"milk2.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nmilking);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nmilking;++i)</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;milking[i].begin,&amp;milking[i].end);</div><div class="line">    sort(milking,milking+nmilking);</div><div class="line">    tmilk=<span class="number">0</span>,tnomilk=<span class="number">0</span>;</div><div class="line">    cur=milking[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nmilking;++i)&#123;</div><div class="line">        <span class="keyword">if</span>(milking[i].begin&gt;cur.end)&#123;</div><div class="line">            t=milking[i].begin-cur.end;</div><div class="line">            <span class="keyword">if</span>(t&gt;tnomilk)</div><div class="line">            tnomilk=t;</div><div class="line">            t=cur.end-cur.begin;</div><div class="line">            <span class="keyword">if</span>(t&gt;tmilk)</div><div class="line">            tmilk=t;</div><div class="line">            cur=milking[i];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(milking[i].end&gt;cur.end)</div><div class="line">            cur.end=milking[i].end;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    t=cur.end-cur.begin;</div><div class="line">    <span class="keyword">if</span>(t&gt;tmilk)</div><div class="line">    tmilk=t;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,tmilk,tnomilk);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=ONvqe5bkAcm&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>在Hexo中渲染MathJax数学公式</title>
    <link href="http://yoursite.com/2017/06/10/MathJax/"/>
    <id>http://yoursite.com/2017/06/10/MathJax/</id>
    <published>2017-06-10T11:34:20.000Z</published>
    <updated>2017-06-10T13:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>  最近在学习机器学习，课堂笔记中免不了有大量的数学公式，为了避免截图的麻烦，学习了用MathJax来渲染数学公式。Hexo完美地支持了MathJax的使用，但是由于渲染引擎的问题，默认情况下会出现不渲染的问题。</p>
<h2 id="原因（引自推酷作者ShallowLearner）"><a href="#原因（引自推酷作者ShallowLearner）" class="headerlink" title="原因（引自推酷作者ShallowLearner）"></a>原因（引自推酷作者ShallowLearner）</h2><p>Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为<em>标签。</em></p>
<p>因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为&lt;\em&gt;标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为\$x&lt;\em&gt;i&lt;/em&gt;$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</p>
<p>类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\’等。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以更换渲染引擎为<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="external">hexo-renderer-kramed</a>，其修复了默认引擎的一些Bug，能够更好地渲染MathJax公式而避免转义的麻烦。<br>安装过程如下：</p>
<blockquote>
<p>npm uninstall hexo-renderer-marked —save<br>npm install hexo-renderer-kramed —save</p>
</blockquote>
<h2 id="在主题中开启MathJax开关"><a href="#在主题中开启MathJax开关" class="headerlink" title="在主题中开启MathJax开关"></a>在主题中开启MathJax开关</h2><p>打开主题的 _config.yml 文件，如下片段：</p>
<blockquote>
<p># MathJax Support<br>mathjax:<br>  enable: flase<br>  per_page: false<br>  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</p>
</blockquote>
<p>修改两个false值为true即可打开MathJax的支持。<br>此外为了提高访问速度，MathJax并不是全局打开的，要在需要使用MathJax的文章Front-matter打开开关才可以使用，格式如下：</p>
<blockquote>
<p>-—<br>title: index.html<br>date: 2017-12-28 2017-06-10 19:34:20<br>tags:<br>mathjax: true<br>-—</p>
</blockquote>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>输入如下的LaTeX公式：</p>
<blockquote>
<p>$$<br>J(\theta<em>1,\theta_2)=\frac{1}{2m}\sum</em>{i=1}^{m}(\widehat{y<em>i}-y_i)^2 = \frac{1}{2m}\sum</em>{i=1}^{m}(h_0(x_i)-y_i)^2<br>$$</p>
</blockquote>
<p>即可渲染为：</p>
<script type="math/tex; mode=display">
J(\theta_1,\theta_2)=\frac{1}{2m}\sum_{i=1}^{m}(\widehat{y_i}-y_i)^2 = \frac{1}{2m}\sum_{i=1}^{m}(h_0(x_i)-y_i)^2</script><p>此外，如果你不熟悉MathJax的语法，可以借助下列网站来帮助你生成LaTeX代码：<br><a href="http://latex.codecogs.com/eqneditor/editor.php" target="_blank" rel="external">http://latex.codecogs.com/eqneditor/editor.php</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近在学习机器学习，课堂笔记中免不了有大量的数学公式，为了避免截图的麻烦，学习了用MathJax来渲染数学公式。Hexo完美地支持了MathJax的使用，但是由于渲染引擎的问题，默认情况下会出现不渲染的问题。&lt;/p&gt;
&lt;h2 id=&quot;原因（引自推酷作者ShallowLe
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="MathJax" scheme="http://yoursite.com/tags/MathJax/"/>
    
  </entry>
  
  <entry>
    <title>USACO 1.1 Broken Necklace</title>
    <link href="http://yoursite.com/2017/05/28/11necklace/"/>
    <id>http://yoursite.com/2017/05/28/11necklace/</id>
    <published>2017-05-28T03:59:42.000Z</published>
    <updated>2017-05-28T04:08:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;S=beads" target="_blank" rel="external">http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;S=beads</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have a necklace of N red, white, or blue beads (3&lt;=N&lt;=350) some of which are red, others blue, and others white, arranged at random. Here are two examples for n=29:</p>
<pre><code>            1 2                               1 2
        r b b r                           b r r b
      r         b                       b         b
     r           r                     b           r
    r             r                   w             r
   b               r                 w               w
  b                 b               r                 r
  b                 b               b                 b
  b                 b               r                 b
   r               r                 b               r
    b             r                   r             r
     b           r                     r           r
       r       r                         r       b
         r b r                             r r w
        Figure A                         Figure B
                    r red bead
                    b blue bead
                    w white bead
</code></pre><p>The beads considered first and second in the text that follows have been marked in the picture.</p>
<p>The configuration in Figure A may be represented as a string of b’s and r’s, where b represents a blue bead and r represents a red one, as follows: brbrrrbbbrrrrrbrrbbrbbbbrrrrb .</p>
<p>Suppose you are to break the necklace at some point, lay it out straight, and then collect beads of the same color from one end until you reach a bead of a different color, and do the same for the other end (which might not be of the same color as the beads collected before this).</p>
<p>Determine the point where the necklace should be broken so that the most number of beads can be collected.</p>
<p>Example</p>
<p>For example, for the necklace in Figure A, 8 beads can be collected, with the breaking point either between bead 9 and bead 10 or else between bead 24 and bead 25.</p>
<p>In some necklaces, white beads had been included as shown in Figure B above. When collecting beads, a white bead that is encountered may be treated as either red or blue and then painted with the desired color. The string that represents this configuration can include any of the three symbols r, b and w.</p>
<p>Write a program to determine the largest number of beads that can be collected from a supplied necklace.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line 1:    N, the number of beads<br>Line 2:    a string of N characters, each of which is r, b, or w</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>A single line containing the maximum of number of beads that can be collected from the supplied necklace.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>29<br>wwwbbrwrbrbrrbrbrwrwwrbwrwrrb</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>11</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>从某一个端点断开项链，然后从断开的两端数珠子，直到第一个与数的珠子颜色不同的珠子，停止计数。其中W颜色可以染色成R颜色或者B颜色。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>虽然说是水题，但是这题实在是不会啊，代码写得很乱很难看啊，只能过过样例啊，只好看官方题解了，在参数多于两个的时候应该调用函数封装好，比如本题的数珠子的方向dir与断点i。还有取余的模拟环操作也要注意判断是否为负，为负加一个len就可以了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">ID: hyson601</div><div class="line">PROG: beads</div><div class="line">LANG: C++</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(n&lt;<span class="number">0</span>) n+=m;</div><div class="line">    <span class="keyword">return</span> n%m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tobreak</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> dir)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">if</span>(dir&gt;<span class="number">0</span>) i=p;</div><div class="line">    <span class="keyword">else</span> i=mod(p<span class="number">-1</span>,len);</div><div class="line">    <span class="keyword">char</span> color=<span class="string">'w'</span>;</div><div class="line">    <span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;len;i=mod(i+dir,len))&#123;</div><div class="line">        <span class="keyword">if</span>(color==<span class="string">'w'</span> &amp;&amp; s[i]!=<span class="string">'w'</span>)</div><div class="line">            color=s[i];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color!=s[i] &amp;&amp; s[i]!=<span class="string">'w'</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        ++n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"beads.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"beads.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">    <span class="keyword">int</span> n,m=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</div><div class="line">        n=tobreak(i,<span class="number">1</span>)+tobreak(i,<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(n&gt;m) m=n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(m&gt;len) m=len;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://train.usaco.org/usacoprob2?a=XoNUWPzYQSw&amp;amp;S
    
    </summary>
    
      <category term="其他 水题" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96-%E6%B0%B4%E9%A2%98/"/>
    
    
      <category term="AD HOC" scheme="http://yoursite.com/tags/AD-HOC/"/>
    
  </entry>
  
  <entry>
    <title>省赛之后的训练计划</title>
    <link href="http://yoursite.com/2017/05/25/plan525/"/>
    <id>http://yoursite.com/2017/05/25/plan525/</id>
    <published>2017-05-25T06:43:54.000Z</published>
    <updated>2017-05-25T06:54:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于之前所学的算法知识比较零碎，省赛后要做的就是把所学的算法再次巩固一遍，更加深入地去理解每一个算法不要依赖板子，USACO显然是一个个比较好的选择，之后会针对USACO的课程来进行科学的刷题，并且继续提高自己的手速，将会涵盖的算法内容如下：</p>
<p>Dynamic Programming<br>Greedy<br>Complete Search<br>Flood Fill<br>Shortest Path<br>Recursive Search Techniques<br>Minimum Spanning Tree<br>Knapsack<br>Computational Geometry<br>Network Flow<br>Eulerian Path<br>Two-Dimensional Convex Hull<br>BigNums<br>Heuristic Search<br>Approximate Search<br>Ad Hoc Problems</p>
<p>将会采用USACO+白书+SPOJ的训练模式，为之后刷紫书做铺垫。<br>此外以后的每一场CodeForces仍然会坚持打，坚持补题。<br>新旅途开始，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于之前所学的算法知识比较零碎，省赛后要做的就是把所学的算法再次巩固一遍，更加深入地去理解每一个算法不要依赖板子，USACO显然是一个个比较好的选择，之后会针对USACO的课程来进行科学的刷题，并且继续提高自己的手速，将会涵盖的算法内容如下：&lt;/p&gt;
&lt;p&gt;Dynamic 
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ2409 Power Strings - KMP裸题</title>
    <link href="http://yoursite.com/2017/05/18/POJ2409/"/>
    <id>http://yoursite.com/2017/05/18/POJ2409/</id>
    <published>2017-05-18T02:27:30.000Z</published>
    <updated>2017-05-18T02:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><p><a href="http://poj.org/problem?id=2406" target="_blank" rel="external">http://poj.org/problem?id=2406</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings a and b we define a<em>b to be their concatenation. For example, if a = “abc” and b = “def” then a</em>b = “abcdef”. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = “” (the empty string) and a^(n+1) = a*(a^n).</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each s you should print the largest n such that s = a^n for some string a.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>abcd<br>aaaa<br>ababab<br>.</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1<br>4<br>3</p>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>This problem has huge input, use scanf instead of cin to avoid time limit exceed.</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>寻找最小循环节，并求循环次数。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>其实寒假做过这种求最小循环节的题，但是太久没有摸过KMP忘记了Next数组怎么操作，特地复习了一遍。简单的说，Next数组可以在模式串和原串失配的时候返回一个前缀和后缀相等的最大位置，而且这个过程是可以递归的。在串中某个循环节不断重复的过程中其实next数组已经记录了最大的滑动位置，所以最后要得到的结果为s[next[len]]s[next[len]+1]……s[len-1]。如果其长度能够被串本身长度整除，说明它存在不是它本身的子串，否则自己就是长度最大子串，返回1。</p>
<p>Tips:字符串ababab的Next数组值为-1,0,0,1,2,3,4。<br>字符串abaabcac的Next数组值为-1,0,0,1,1,2,0,1。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> Next[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</div><div class="line">    Next[<span class="number">0</span>]=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(i&lt;=len)&#123;</div><div class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || (i&lt;len &amp;&amp; s[i]==s[j]))&#123;</div><div class="line">            Next[++i]=++j;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            j=Next[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s) &amp;&amp; <span class="built_in">strcmp</span>(s,<span class="string">"."</span>)!=<span class="number">0</span>)&#123;</div><div class="line">        len=<span class="built_in">strlen</span>(s);</div><div class="line">        get_next(s);</div><div class="line">        <span class="keyword">if</span>(len%(len-Next[len])==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,len/(len-Next[len]));</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2406&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>POJ3624 Charm Bracelet - 01背包</title>
    <link href="http://yoursite.com/2017/05/17/POJ3624/"/>
    <id>http://yoursite.com/2017/05/17/POJ3624/</id>
    <published>2017-05-17T00:49:08.000Z</published>
    <updated>2017-05-17T00:56:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目连接"><a href="#题目连接" class="headerlink" title="题目连接"></a>题目连接</h2><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Bessie has gone to the mall’s jewelry store and spies a charm bracelet. Of course, she’d like to fill it with the best charms possible from the N (1 ≤ N ≤ 3,402) available charms. Each charm i in the supplied list has a weight Wi (1 ≤ Wi ≤ 400), a ‘desirability’ factor Di (1 ≤ Di ≤ 100), and can be used at most once. Bessie can only support a charm bracelet whose weight is no more than M (1 ≤ M ≤ 12,880).</p>
<p>Given that weight limit as a constraint and a list of the charms with their weights and desirability rating, deduce the maximum possible sum of ratings.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><ul>
<li>Line 1: Two space-separated integers: N and M</li>
<li>Lines 2..N+1: Line i+1 describes charm i with two space-separated integers: Wi and Di <h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2></li>
<li>Line 1: A single integer that is the greatest sum of charm desirabilities that can be achieved given the weight constraints</li>
</ul>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4 6<br>1 4<br>2 6<br>3 12<br>2 7</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>23</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>买珠宝，每个珠宝都有一个魅力值，但是也有重量，要求允许重量不满情况下取得的最大魅力值为多少。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>典型的01背包问题，一维状态转移方程为F[v]=max{F[v],F[v-Ci]+Wi}。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150000</span>;</div><div class="line"><span class="keyword">int</span> f[maxn],w[maxn],d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;w[i],&amp;d[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=w[i];--j)</div><div class="line">            f[j]=max(f[j],f[j-w[i]]+d[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[m]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目连接&quot;&gt;&lt;a href=&quot;#题目连接&quot; class=&quot;headerlink&quot; title=&quot;题目连接&quot;&gt;&lt;/a&gt;题目连接&lt;/h2&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="动态规划 背包DP" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85DP/"/>
    
    
      <category term="01背包" scheme="http://yoursite.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
</feed>
